/**
 * React v0.11.2
 *
 * Copyright 2013-2014 Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;"undefined"!=typeof window?t=window:"undefined"!=typeof global?t=global:"undefined"!=typeof self&&(t=self),t.React=e()}}(function(){return function e(t,n,r){function o(a,s){if(!n[a]){if(!t[a]){var u="function"==typeof require&&require;if(!s&&u)return u(a,!0);if(i)return i(a,!0);throw new Error("Cannot find module '"+a+"'")}var c=n[a]={exports:{}};t[a][0].call(c.exports,function(e){var n=t[a][1][e];return o(n?n:e)},c,c.exports,e,t,n,r)}return n[a].exports}for(var i="function"==typeof require&&require,a=0;a<r.length;a++)o(r[a]);return o}({1:[function(e,t){"use strict";var n=e("./focusNode"),r={componentDidMount:function(){this.props.autoFocus&&n(this.getDOMNode())}};t.exports=r},{"./focusNode":104}],2:[function(e,t){"use strict";function n(){var e=window.opera;return"object"==typeof e&&"function"==typeof e.version&&parseInt(e.version(),10)<=12}function r(e){return(e.ctrlKey||e.altKey||e.metaKey)&&!(e.ctrlKey&&e.altKey)}var o=e("./EventConstants"),i=e("./EventPropagators"),a=e("./ExecutionEnvironment"),s=e("./SyntheticInputEvent"),u=e("./keyOf"),c=a.canUseDOM&&"TextEvent"in window&&!("documentMode"in document||n()),l=32,p=String.fromCharCode(l),d=o.topLevelTypes,f={beforeInput:{phasedRegistrationNames:{bubbled:u({onBeforeInput:null}),captured:u({onBeforeInputCapture:null})},dependencies:[d.topCompositionEnd,d.topKeyPress,d.topTextInput,d.topPaste]}},h=null,v={eventTypes:f,extractEvents:function(e,t,n,o){var a;if(c)switch(e){case d.topKeyPress:var u=o.which;if(u!==l)return;a=String.fromCharCode(u);break;case d.topTextInput:if(a=o.data,a===p)return;break;default:return}else{switch(e){case d.topPaste:h=null;break;case d.topKeyPress:o.which&&!r(o)&&(h=String.fromCharCode(o.which));break;case d.topCompositionEnd:h=o.data}if(null===h)return;a=h}if(a){var v=s.getPooled(f.beforeInput,n,o);return v.data=a,h=null,i.accumulateTwoPhaseDispatches(v),v}}};t.exports=v},{"./EventConstants":15,"./EventPropagators":20,"./ExecutionEnvironment":21,"./SyntheticInputEvent":84,"./keyOf":125}],3:[function(e,t){"use strict";function n(e,t){return e+t.charAt(0).toUpperCase()+t.substring(1)}var r={columnCount:!0,fillOpacity:!0,flex:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},o=["Webkit","ms","Moz","O"];Object.keys(r).forEach(function(e){o.forEach(function(t){r[n(t,e)]=r[e]})});var i={background:{backgroundImage:!0,backgroundPosition:!0,backgroundRepeat:!0,backgroundColor:!0},border:{borderWidth:!0,borderStyle:!0,borderColor:!0},borderBottom:{borderBottomWidth:!0,borderBottomStyle:!0,borderBottomColor:!0},borderLeft:{borderLeftWidth:!0,borderLeftStyle:!0,borderLeftColor:!0},borderRight:{borderRightWidth:!0,borderRightStyle:!0,borderRightColor:!0},borderTop:{borderTopWidth:!0,borderTopStyle:!0,borderTopColor:!0},font:{fontStyle:!0,fontVariant:!0,fontWeight:!0,fontSize:!0,lineHeight:!0,fontFamily:!0}},a={isUnitlessNumber:r,shorthandPropertyExpansions:i};t.exports=a},{}],4:[function(e,t){"use strict";var n=e("./CSSProperty"),r=e("./dangerousStyleValue"),o=e("./hyphenateStyleName"),i=e("./memoizeStringOnly"),a=i(function(e){return o(e)}),s={createMarkupForStyles:function(e){var t="";for(var n in e)if(e.hasOwnProperty(n)){var o=e[n];null!=o&&(t+=a(n)+":",t+=r(n,o)+";")}return t||null},setValueForStyles:function(e,t){var o=e.style;for(var i in t)if(t.hasOwnProperty(i)){var a=r(i,t[i]);if(a)o[i]=a;else{var s=n.shorthandPropertyExpansions[i];if(s)for(var u in s)o[u]="";else o[i]=""}}}};t.exports=s},{"./CSSProperty":3,"./dangerousStyleValue":99,"./hyphenateStyleName":116,"./memoizeStringOnly":127}],5:[function(e,t){"use strict";function n(){this._callbacks=null,this._contexts=null}var r=e("./PooledClass"),o=e("./invariant"),i=e("./mixInto");i(n,{enqueue:function(e,t){this._callbacks=this._callbacks||[],this._contexts=this._contexts||[],this._callbacks.push(e),this._contexts.push(t)},notifyAll:function(){var e=this._callbacks,t=this._contexts;if(e){o(e.length===t.length),this._callbacks=null,this._contexts=null;for(var n=0,r=e.length;r>n;n++)e[n].call(t[n]);e.length=0,t.length=0}},reset:function(){this._callbacks=null,this._contexts=null},destructor:function(){this.reset()}}),r.addPoolingTo(n),t.exports=n},{"./PooledClass":26,"./invariant":118,"./mixInto":131}],6:[function(e,t){"use strict";function n(e){return"SELECT"===e.nodeName||"INPUT"===e.nodeName&&"file"===e.type}function r(e){var t=M.getPooled(P.change,_,e);C.accumulateTwoPhaseDispatches(t),R.batchedUpdates(o,t)}function o(e){y.enqueueEvents(e),y.processEventQueue()}function i(e,t){I=e,_=t,I.attachEvent("onchange",r)}function a(){I&&(I.detachEvent("onchange",r),I=null,_=null)}function s(e,t,n){return e===O.topChange?n:void 0}function u(e,t,n){e===O.topFocus?(a(),i(t,n)):e===O.topBlur&&a()}function c(e,t){I=e,_=t,T=e.value,N=Object.getOwnPropertyDescriptor(e.constructor.prototype,"value"),Object.defineProperty(I,"value",A),I.attachEvent("onpropertychange",p)}function l(){I&&(delete I.value,I.detachEvent("onpropertychange",p),I=null,_=null,T=null,N=null)}function p(e){if("value"===e.propertyName){var t=e.srcElement.value;t!==T&&(T=t,r(e))}}function d(e,t,n){return e===O.topInput?n:void 0}function f(e,t,n){e===O.topFocus?(l(),c(t,n)):e===O.topBlur&&l()}function h(e){return e!==O.topSelectionChange&&e!==O.topKeyUp&&e!==O.topKeyDown||!I||I.value===T?void 0:(T=I.value,_)}function v(e){return"INPUT"===e.nodeName&&("checkbox"===e.type||"radio"===e.type)}function m(e,t,n){return e===O.topClick?n:void 0}var g=e("./EventConstants"),y=e("./EventPluginHub"),C=e("./EventPropagators"),E=e("./ExecutionEnvironment"),R=e("./ReactUpdates"),M=e("./SyntheticEvent"),D=e("./isEventSupported"),x=e("./isTextInputElement"),b=e("./keyOf"),O=g.topLevelTypes,P={change:{phasedRegistrationNames:{bubbled:b({onChange:null}),captured:b({onChangeCapture:null})},dependencies:[O.topBlur,O.topChange,O.topClick,O.topFocus,O.topInput,O.topKeyDown,O.topKeyUp,O.topSelectionChange]}},I=null,_=null,T=null,N=null,w=!1;E.canUseDOM&&(w=D("change")&&(!("documentMode"in document)||document.documentMode>8));var S=!1;E.canUseDOM&&(S=D("input")&&(!("documentMode"in document)||document.documentMode>9));var A={get:function(){return N.get.call(this)},set:function(e){T=""+e,N.set.call(this,e)}},k={eventTypes:P,extractEvents:function(e,t,r,o){var i,a;if(n(t)?w?i=s:a=u:x(t)?S?i=d:(i=h,a=f):v(t)&&(i=m),i){var c=i(e,t,r);if(c){var l=M.getPooled(P.change,c,o);return C.accumulateTwoPhaseDispatches(l),l}}a&&a(e,t,r)}};t.exports=k},{"./EventConstants":15,"./EventPluginHub":17,"./EventPropagators":20,"./ExecutionEnvironment":21,"./ReactUpdates":74,"./SyntheticEvent":82,"./isEventSupported":119,"./isTextInputElement":121,"./keyOf":125}],7:[function(e,t){"use strict";var n=0,r={createReactRootIndex:function(){return n++}};t.exports=r},{}],8:[function(e,t){"use strict";function n(e){switch(e){case g.topCompositionStart:return C.compositionStart;case g.topCompositionEnd:return C.compositionEnd;case g.topCompositionUpdate:return C.compositionUpdate}}function r(e,t){return e===g.topKeyDown&&t.keyCode===h}function o(e,t){switch(e){case g.topKeyUp:return-1!==f.indexOf(t.keyCode);case g.topKeyDown:return t.keyCode!==h;case g.topKeyPress:case g.topMouseDown:case g.topBlur:return!0;default:return!1}}function i(e){this.root=e,this.startSelection=c.getSelection(e),this.startValue=this.getText()}var a=e("./EventConstants"),s=e("./EventPropagators"),u=e("./ExecutionEnvironment"),c=e("./ReactInputSelection"),l=e("./SyntheticCompositionEvent"),p=e("./getTextContentAccessor"),d=e("./keyOf"),f=[9,13,27,32],h=229,v=u.canUseDOM&&"CompositionEvent"in window,m=!v||"documentMode"in document&&document.documentMode>8&&document.documentMode<=11,g=a.topLevelTypes,y=null,C={compositionEnd:{phasedRegistrationNames:{bubbled:d({onCompositionEnd:null}),captured:d({onCompositionEndCapture:null})},dependencies:[g.topBlur,g.topCompositionEnd,g.topKeyDown,g.topKeyPress,g.topKeyUp,g.topMouseDown]},compositionStart:{phasedRegistrationNames:{bubbled:d({onCompositionStart:null}),captured:d({onCompositionStartCapture:null})},dependencies:[g.topBlur,g.topCompositionStart,g.topKeyDown,g.topKeyPress,g.topKeyUp,g.topMouseDown]},compositionUpdate:{phasedRegistrationNames:{bubbled:d({onCompositionUpdate:null}),captured:d({onCompositionUpdateCapture:null})},dependencies:[g.topBlur,g.topCompositionUpdate,g.topKeyDown,g.topKeyPress,g.topKeyUp,g.topMouseDown]}};i.prototype.getText=function(){return this.root.value||this.root[p()]},i.prototype.getData=function(){var e=this.getText(),t=this.startSelection.start,n=this.startValue.length-this.startSelection.end;return e.substr(t,e.length-n-t)};var E={eventTypes:C,extractEvents:function(e,t,a,u){var c,p;if(v?c=n(e):y?o(e,u)&&(c=C.compositionEnd):r(e,u)&&(c=C.compositionStart),m&&(y||c!==C.compositionStart?c===C.compositionEnd&&y&&(p=y.getData(),y=null):y=new i(t)),c){var d=l.getPooled(c,a,u);return p&&(d.data=p),s.accumulateTwoPhaseDispatches(d),d}}};t.exports=E},{"./EventConstants":15,"./EventPropagators":20,"./ExecutionEnvironment":21,"./ReactInputSelection":56,"./SyntheticCompositionEvent":80,"./getTextContentAccessor":113,"./keyOf":125}],9:[function(e,t){"use strict";function n(e,t,n){e.insertBefore(t,e.childNodes[n]||null)}var r,o=e("./Danger"),i=e("./ReactMultiChildUpdateTypes"),a=e("./getTextContentAccessor"),s=e("./invariant"),u=a();r="textContent"===u?function(e,t){e.textContent=t}:function(e,t){for(;e.firstChild;)e.removeChild(e.firstChild);if(t){var n=e.ownerDocument||document;e.appendChild(n.createTextNode(t))}};var c={dangerouslyReplaceNodeWithMarkup:o.dangerouslyReplaceNodeWithMarkup,updateTextContent:r,processUpdates:function(e,t){for(var a,u=null,c=null,l=0;a=e[l];l++)if(a.type===i.MOVE_EXISTING||a.type===i.REMOVE_NODE){var p=a.fromIndex,d=a.parentNode.childNodes[p],f=a.parentID;s(d),u=u||{},u[f]=u[f]||[],u[f][p]=d,c=c||[],c.push(d)}var h=o.dangerouslyRenderMarkup(t);if(c)for(var v=0;v<c.length;v++)c[v].parentNode.removeChild(c[v]);for(var m=0;a=e[m];m++)switch(a.type){case i.INSERT_MARKUP:n(a.parentNode,h[a.markupIndex],a.toIndex);break;case i.MOVE_EXISTING:n(a.parentNode,u[a.parentID][a.fromIndex],a.toIndex);break;case i.TEXT_CONTENT:r(a.parentNode,a.textContent);break;case i.REMOVE_NODE:}}};t.exports=c},{"./Danger":12,"./ReactMultiChildUpdateTypes":61,"./getTextContentAccessor":113,"./invariant":118}],10:[function(e,t){"use strict";var n=e("./invariant"),r={MUST_USE_ATTRIBUTE:1,MUST_USE_PROPERTY:2,HAS_SIDE_EFFECTS:4,HAS_BOOLEAN_VALUE:8,HAS_NUMERIC_VALUE:16,HAS_POSITIVE_NUMERIC_VALUE:48,HAS_OVERLOADED_BOOLEAN_VALUE:64,injectDOMPropertyConfig:function(e){var t=e.Properties||{},o=e.DOMAttributeNames||{},a=e.DOMPropertyNames||{},s=e.DOMMutationMethods||{};e.isCustomAttribute&&i._isCustomAttributeFunctions.push(e.isCustomAttribute);for(var u in t){n(!i.isStandardName.hasOwnProperty(u)),i.isStandardName[u]=!0;var c=u.toLowerCase();if(i.getPossibleStandardName[c]=u,o.hasOwnProperty(u)){var l=o[u];i.getPossibleStandardName[l]=u,i.getAttributeName[u]=l}else i.getAttributeName[u]=c;i.getPropertyName[u]=a.hasOwnProperty(u)?a[u]:u,i.getMutationMethod[u]=s.hasOwnProperty(u)?s[u]:null;var p=t[u];i.mustUseAttribute[u]=p&r.MUST_USE_ATTRIBUTE,i.mustUseProperty[u]=p&r.MUST_USE_PROPERTY,i.hasSideEffects[u]=p&r.HAS_SIDE_EFFECTS,i.hasBooleanValue[u]=p&r.HAS_BOOLEAN_VALUE,i.hasNumericValue[u]=p&r.HAS_NUMERIC_VALUE,i.hasPositiveNumericValue[u]=p&r.HAS_POSITIVE_NUMERIC_VALUE,i.hasOverloadedBooleanValue[u]=p&r.HAS_OVERLOADED_BOOLEAN_VALUE,n(!i.mustUseAttribute[u]||!i.mustUseProperty[u]),n(i.mustUseProperty[u]||!i.hasSideEffects[u]),n(!!i.hasBooleanValue[u]+!!i.hasNumericValue[u]+!!i.hasOverloadedBooleanValue[u]<=1)}}},o={},i={ID_ATTRIBUTE_NAME:"data-reactid",isStandardName:{},getPossibleStandardName:{},getAttributeName:{},getPropertyName:{},getMutationMethod:{},mustUseAttribute:{},mustUseProperty:{},hasSideEffects:{},hasBooleanValue:{},hasNumericValue:{},hasPositiveNumericValue:{},hasOverloadedBooleanValue:{},_isCustomAttributeFunctions:[],isCustomAttribute:function(e){for(var t=0;t<i._isCustomAttributeFunctions.length;t++){var n=i._isCustomAttributeFunctions[t];if(n(e))return!0}return!1},getDefaultValueForProperty:function(e,t){var n,r=o[e];return r||(o[e]=r={}),t in r||(n=document.createElement(e),r[t]=n[t]),r[t]},injection:r};t.exports=i},{"./invariant":118}],11:[function(e,t){"use strict";function n(e,t){return null==t||r.hasBooleanValue[e]&&!t||r.hasNumericValue[e]&&isNaN(t)||r.hasPositiveNumericValue[e]&&1>t||r.hasOverloadedBooleanValue[e]&&t===!1}var r=e("./DOMProperty"),o=e("./escapeTextForBrowser"),i=e("./memoizeStringOnly"),a=(e("./warning"),i(function(e){return o(e)+'="'})),s={createMarkupForID:function(e){return a(r.ID_ATTRIBUTE_NAME)+o(e)+'"'},createMarkupForProperty:function(e,t){if(r.isStandardName.hasOwnProperty(e)&&r.isStandardName[e]){if(n(e,t))return"";var i=r.getAttributeName[e];return r.hasBooleanValue[e]||r.hasOverloadedBooleanValue[e]&&t===!0?o(i):a(i)+o(t)+'"'}return r.isCustomAttribute(e)?null==t?"":a(e)+o(t)+'"':null},setValueForProperty:function(e,t,o){if(r.isStandardName.hasOwnProperty(t)&&r.isStandardName[t]){var i=r.getMutationMethod[t];if(i)i(e,o);else if(n(t,o))this.deleteValueForProperty(e,t);else if(r.mustUseAttribute[t])e.setAttribute(r.getAttributeName[t],""+o);else{var a=r.getPropertyName[t];r.hasSideEffects[t]&&e[a]===o||(e[a]=o)}}else r.isCustomAttribute(t)&&(null==o?e.removeAttribute(t):e.setAttribute(t,""+o))},deleteValueForProperty:function(e,t){if(r.isStandardName.hasOwnProperty(t)&&r.isStandardName[t]){var n=r.getMutationMethod[t];if(n)n(e,void 0);else if(r.mustUseAttribute[t])e.removeAttribute(r.getAttributeName[t]);else{var o=r.getPropertyName[t],i=r.getDefaultValueForProperty(e.nodeName,o);r.hasSideEffects[t]&&e[o]===i||(e[o]=i)}}else r.isCustomAttribute(t)&&e.removeAttribute(t)}};t.exports=s},{"./DOMProperty":10,"./escapeTextForBrowser":102,"./memoizeStringOnly":127,"./warning":139}],12:[function(e,t){"use strict";function n(e){return e.substring(1,e.indexOf(" "))}var r=e("./ExecutionEnvironment"),o=e("./createNodesFromMarkup"),i=e("./emptyFunction"),a=e("./getMarkupWrap"),s=e("./invariant"),u=/^(<[^ \/>]+)/,c="data-danger-index",l={dangerouslyRenderMarkup:function(e){s(r.canUseDOM);for(var t,l={},p=0;p<e.length;p++)s(e[p]),t=n(e[p]),t=a(t)?t:"*",l[t]=l[t]||[],l[t][p]=e[p];var d=[],f=0;for(t in l)if(l.hasOwnProperty(t)){var h=l[t];for(var v in h)if(h.hasOwnProperty(v)){var m=h[v];h[v]=m.replace(u,"$1 "+c+'="'+v+'" ')}var g=o(h.join(""),i);for(p=0;p<g.length;++p){var y=g[p];y.hasAttribute&&y.hasAttribute(c)&&(v=+y.getAttribute(c),y.removeAttribute(c),s(!d.hasOwnProperty(v)),d[v]=y,f+=1)}}return s(f===d.length),s(d.length===e.length),d},dangerouslyReplaceNodeWithMarkup:function(e,t){s(r.canUseDOM),s(t),s("html"!==e.tagName.toLowerCase());var n=o(t,i)[0];e.parentNode.replaceChild(n,e)}};t.exports=l},{"./ExecutionEnvironment":21,"./createNodesFromMarkup":98,"./emptyFunction":100,"./getMarkupWrap":110,"./invariant":118}],13:[function(e,t){"use strict";var n=e("./keyOf"),r=[n({ResponderEventPlugin:null}),n({SimpleEventPlugin:null}),n({TapEventPlugin:null}),n({EnterLeaveEventPlugin:null}),n({ChangeEventPlugin:null}),n({SelectEventPlugin:null}),n({CompositionEventPlugin:null}),n({BeforeInputEventPlugin:null}),n({AnalyticsEventPlugin:null}),n({MobileSafariClickEventPlugin:null})];t.exports=r},{"./keyOf":125}],14:[function(e,t){"use strict";var n=e("./EventConstants"),r=e("./EventPropagators"),o=e("./SyntheticMouseEvent"),i=e("./ReactMount"),a=e("./keyOf"),s=n.topLevelTypes,u=i.getFirstReactDOM,c={mouseEnter:{registrationName:a({onMouseEnter:null}),dependencies:[s.topMouseOut,s.topMouseOver]},mouseLeave:{registrationName:a({onMouseLeave:null}),dependencies:[s.topMouseOut,s.topMouseOver]}},l=[null,null],p={eventTypes:c,extractEvents:function(e,t,n,a){if(e===s.topMouseOver&&(a.relatedTarget||a.fromElement))return null;if(e!==s.topMouseOut&&e!==s.topMouseOver)return null;var p;if(t.window===t)p=t;else{var d=t.ownerDocument;p=d?d.defaultView||d.parentWindow:window}var f,h;if(e===s.topMouseOut?(f=t,h=u(a.relatedTarget||a.toElement)||p):(f=p,h=t),f===h)return null;var v=f?i.getID(f):"",m=h?i.getID(h):"",g=o.getPooled(c.mouseLeave,v,a);g.type="mouseleave",g.target=f,g.relatedTarget=h;var y=o.getPooled(c.mouseEnter,m,a);return y.type="mouseenter",y.target=h,y.relatedTarget=f,r.accumulateEnterLeaveDispatches(g,y,v,m),l[0]=g,l[1]=y,l}};t.exports=p},{"./EventConstants":15,"./EventPropagators":20,"./ReactMount":59,"./SyntheticMouseEvent":86,"./keyOf":125}],15:[function(e,t){"use strict";var n=e("./keyMirror"),r=n({bubbled:null,captured:null}),o=n({topBlur:null,topChange:null,topClick:null,topCompositionEnd:null,topCompositionStart:null,topCompositionUpdate:null,topContextMenu:null,topCopy:null,topCut:null,topDoubleClick:null,topDrag:null,topDragEnd:null,topDragEnter:null,topDragExit:null,topDragLeave:null,topDragOver:null,topDragStart:null,topDrop:null,topError:null,topFocus:null,topInput:null,topKeyDown:null,topKeyPress:null,topKeyUp:null,topLoad:null,topMouseDown:null,topMouseMove:null,topMouseOut:null,topMouseOver:null,topMouseUp:null,topPaste:null,topReset:null,topScroll:null,topSelectionChange:null,topSubmit:null,topTextInput:null,topTouchCancel:null,topTouchEnd:null,topTouchMove:null,topTouchStart:null,topWheel:null}),i={topLevelTypes:o,PropagationPhases:r};t.exports=i},{"./keyMirror":124}],16:[function(e,t){var n=e("./emptyFunction"),r={listen:function(e,t,n){return e.addEventListener?(e.addEventListener(t,n,!1),{remove:function(){e.removeEventListener(t,n,!1)}}):e.attachEvent?(e.attachEvent("on"+t,n),{remove:function(){e.detachEvent("on"+t,n)}}):void 0},capture:function(e,t,r){return e.addEventListener?(e.addEventListener(t,r,!0),{remove:function(){e.removeEventListener(t,r,!0)}}):{remove:n}},registerDefault:function(){}};t.exports=r},{"./emptyFunction":100}],17:[function(e,t){"use strict";var n=e("./EventPluginRegistry"),r=e("./EventPluginUtils"),o=e("./accumulate"),i=e("./forEachAccumulated"),a=e("./invariant"),s=(e("./isEventSupported"),e("./monitorCodeUse"),{}),u=null,c=function(e){if(e){var t=r.executeDispatch,o=n.getPluginModuleForEvent(e);o&&o.executeDispatch&&(t=o.executeDispatch),r.executeDispatchesInOrder(e,t),e.isPersistent()||e.constructor.release(e)}},l=null,p={injection:{injectMount:r.injection.injectMount,injectInstanceHandle:function(e){l=e},getInstanceHandle:function(){return l},injectEventPluginOrder:n.injectEventPluginOrder,injectEventPluginsByName:n.injectEventPluginsByName},eventNameDispatchConfigs:n.eventNameDispatchConfigs,registrationNameModules:n.registrationNameModules,putListener:function(e,t,n){a(!n||"function"==typeof n);var r=s[t]||(s[t]={});r[e]=n},getListener:function(e,t){var n=s[t];return n&&n[e]},deleteListener:function(e,t){var n=s[t];n&&delete n[e]},deleteAllListeners:function(e){for(var t in s)delete s[t][e]},extractEvents:function(e,t,r,i){for(var a,s=n.plugins,u=0,c=s.length;c>u;u++){var l=s[u];if(l){var p=l.extractEvents(e,t,r,i);p&&(a=o(a,p))}}return a},enqueueEvents:function(e){e&&(u=o(u,e))},processEventQueue:function(){var e=u;u=null,i(e,c),a(!u)},__purge:function(){s={}},__getListenerBank:function(){return s}};t.exports=p},{"./EventPluginRegistry":18,"./EventPluginUtils":19,"./accumulate":92,"./forEachAccumulated":105,"./invariant":118,"./isEventSupported":119,"./monitorCodeUse":132}],18:[function(e,t){"use strict";function n(){if(a)for(var e in s){var t=s[e],n=a.indexOf(e);if(i(n>-1),!u.plugins[n]){i(t.extractEvents),u.plugins[n]=t;var o=t.eventTypes;for(var c in o)i(r(o[c],t,c))}}}function r(e,t,n){i(!u.eventNameDispatchConfigs.hasOwnProperty(n)),u.eventNameDispatchConfigs[n]=e;var r=e.phasedRegistrationNames;if(r){for(var a in r)if(r.hasOwnProperty(a)){var s=r[a];o(s,t,n)}return!0}return e.registrationName?(o(e.registrationName,t,n),!0):!1}function o(e,t,n){i(!u.registrationNameModules[e]),u.registrationNameModules[e]=t,u.registrationNameDependencies[e]=t.eventTypes[n].dependencies}var i=e("./invariant"),a=null,s={},u={plugins:[],eventNameDispatchConfigs:{},registrationNameModules:{},registrationNameDependencies:{},injectEventPluginOrder:function(e){i(!a),a=Array.prototype.slice.call(e),n()},injectEventPluginsByName:function(e){var t=!1;for(var r in e)if(e.hasOwnProperty(r)){var o=e[r];s.hasOwnProperty(r)&&s[r]===o||(i(!s[r]),s[r]=o,t=!0)}t&&n()},getPluginModuleForEvent:function(e){var t=e.dispatchConfig;if(t.registrationName)return u.registrationNameModules[t.registrationName]||null;for(var n in t.phasedRegistrationNames)if(t.phasedRegistrationNames.hasOwnProperty(n)){var r=u.registrationNameModules[t.phasedRegistrationNames[n]];if(r)return r}return null},_resetEventPlugins:function(){a=null;for(var e in s)s.hasOwnProperty(e)&&delete s[e];u.plugins.length=0;var t=u.eventNameDispatchConfigs;for(var n in t)t.hasOwnProperty(n)&&delete t[n];var r=u.registrationNameModules;for(var o in r)r.hasOwnProperty(o)&&delete r[o]}};t.exports=u},{"./invariant":118}],19:[function(e,t){"use strict";function n(e){return e===v.topMouseUp||e===v.topTouchEnd||e===v.topTouchCancel}function r(e){return e===v.topMouseMove||e===v.topTouchMove}function o(e){return e===v.topMouseDown||e===v.topTouchStart}function i(e,t){var n=e._dispatchListeners,r=e._dispatchIDs;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)t(e,n[o],r[o]);else n&&t(e,n,r)}function a(e,t,n){e.currentTarget=h.Mount.getNode(n);var r=t(e,n);return e.currentTarget=null,r}function s(e,t){i(e,t),e._dispatchListeners=null,e._dispatchIDs=null}function u(e){var t=e._dispatchListeners,n=e._dispatchIDs;if(Array.isArray(t)){for(var r=0;r<t.length&&!e.isPropagationStopped();r++)if(t[r](e,n[r]))return n[r]}else if(t&&t(e,n))return n;return null}function c(e){var t=u(e);return e._dispatchIDs=null,e._dispatchListeners=null,t}function l(e){var t=e._dispatchListeners,n=e._dispatchIDs;f(!Array.isArray(t));var r=t?t(e,n):null;return e._dispatchListeners=null,e._dispatchIDs=null,r}function p(e){return!!e._dispatchListeners}var d=e("./EventConstants"),f=e("./invariant"),h={Mount:null,injectMount:function(e){h.Mount=e}},v=d.topLevelTypes,m={isEndish:n,isMoveish:r,isStartish:o,executeDirectDispatch:l,executeDispatch:a,executeDispatchesInOrder:s,executeDispatchesInOrderStopAtTrue:c,hasDispatches:p,injection:h,useTouchEvents:!1};t.exports=m},{"./EventConstants":15,"./invariant":118}],20:[function(e,t){"use strict";function n(e,t,n){var r=t.dispatchConfig.phasedRegistrationNames[n];return v(e,r)}function r(e,t,r){var o=t?h.bubbled:h.captured,i=n(e,r,o);i&&(r._dispatchListeners=d(r._dispatchListeners,i),r._dispatchIDs=d(r._dispatchIDs,e))}function o(e){e&&e.dispatchConfig.phasedRegistrationNames&&p.injection.getInstanceHandle().traverseTwoPhase(e.dispatchMarker,r,e)}function i(e,t,n){if(n&&n.dispatchConfig.registrationName){var r=n.dispatchConfig.registrationName,o=v(e,r);o&&(n._dispatchListeners=d(n._dispatchListeners,o),n._dispatchIDs=d(n._dispatchIDs,e))}}function a(e){e&&e.dispatchConfig.registrationName&&i(e.dispatchMarker,null,e)}function s(e){f(e,o)}function u(e,t,n,r){p.injection.getInstanceHandle().traverseEnterLeave(n,r,i,e,t)}function c(e){f(e,a)}var l=e("./EventConstants"),p=e("./EventPluginHub"),d=e("./accumulate"),f=e("./forEachAccumulated"),h=l.PropagationPhases,v=p.getListener,m={accumulateTwoPhaseDispatches:s,accumulateDirectDispatches:c,accumulateEnterLeaveDispatches:u};t.exports=m},{"./EventConstants":15,"./EventPluginHub":17,"./accumulate":92,"./forEachAccumulated":105}],21:[function(e,t){"use strict";var n=!("undefined"==typeof window||!window.document||!window.document.createElement),r={canUseDOM:n,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:n&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:n&&!!window.screen,isInWorker:!n};t.exports=r},{}],22:[function(e,t){"use strict";var n,r=e("./DOMProperty"),o=e("./ExecutionEnvironment"),i=r.injection.MUST_USE_ATTRIBUTE,a=r.injection.MUST_USE_PROPERTY,s=r.injection.HAS_BOOLEAN_VALUE,u=r.injection.HAS_SIDE_EFFECTS,c=r.injection.HAS_NUMERIC_VALUE,l=r.injection.HAS_POSITIVE_NUMERIC_VALUE,p=r.injection.HAS_OVERLOADED_BOOLEAN_VALUE;if(o.canUseDOM){var d=document.implementation;n=d&&d.hasFeature&&d.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure","1.1")}var f={isCustomAttribute:RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),Properties:{accept:null,accessKey:null,action:null,allowFullScreen:i|s,allowTransparency:i,alt:null,async:s,autoComplete:null,autoPlay:s,cellPadding:null,cellSpacing:null,charSet:i,checked:a|s,className:n?i:a,cols:i|l,colSpan:null,content:null,contentEditable:null,contextMenu:i,controls:a|s,coords:null,crossOrigin:null,data:null,dateTime:i,defer:s,dir:null,disabled:i|s,download:p,draggable:null,encType:null,form:i,formNoValidate:s,frameBorder:i,height:i,hidden:i|s,href:null,hrefLang:null,htmlFor:null,httpEquiv:null,icon:null,id:a,label:null,lang:null,list:null,loop:a|s,max:null,maxLength:i,media:i,mediaGroup:null,method:null,min:null,multiple:a|s,muted:a|s,name:null,noValidate:s,open:null,pattern:null,placeholder:null,poster:null,preload:null,radioGroup:null,readOnly:a|s,rel:null,required:s,role:i,rows:i|l,rowSpan:null,sandbox:null,scope:null,scrollLeft:a,scrolling:null,scrollTop:a,seamless:i|s,selected:a|s,shape:null,size:i|l,sizes:i,span:l,spellCheck:null,src:null,srcDoc:a,srcSet:i,start:c,step:null,style:null,tabIndex:null,target:null,title:null,type:null,useMap:null,value:a|u,width:i,wmode:i,autoCapitalize:null,autoCorrect:null,itemProp:i,itemScope:i|s,itemType:i,property:null},DOMAttributeNames:{className:"class",htmlFor:"for",httpEquiv:"http-equiv"},DOMPropertyNames:{autoCapitalize:"autocapitalize",autoComplete:"autocomplete",autoCorrect:"autocorrect",autoFocus:"autofocus",autoPlay:"autoplay",encType:"enctype",hrefLang:"hreflang",radioGroup:"radiogroup",spellCheck:"spellcheck",srcDoc:"srcdoc",srcSet:"srcset"}};t.exports=f},{"./DOMProperty":10,"./ExecutionEnvironment":21}],23:[function(e,t){"use strict";function n(e){u(null==e.props.checkedLink||null==e.props.valueLink)}function r(e){n(e),u(null==e.props.value&&null==e.props.onChange)}function o(e){n(e),u(null==e.props.checked&&null==e.props.onChange)}function i(e){this.props.valueLink.requestChange(e.target.value)}function a(e){this.props.checkedLink.requestChange(e.target.checked)}var s=e("./ReactPropTypes"),u=e("./invariant"),c={button:!0,checkbox:!0,image:!0,hidden:!0,radio:!0,reset:!0,submit:!0},l={Mixin:{propTypes:{value:function(e,t){return!e[t]||c[e.type]||e.onChange||e.readOnly||e.disabled?void 0:new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.")},checked:function(e,t){return!e[t]||e.onChange||e.readOnly||e.disabled?void 0:new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.")},onChange:s.func}},getValue:function(e){return e.props.valueLink?(r(e),e.props.valueLink.value):e.props.value},getChecked:function(e){return e.props.checkedLink?(o(e),e.props.checkedLink.value):e.props.checked},getOnChange:function(e){return e.props.valueLink?(r(e),i):e.props.checkedLink?(o(e),a):e.props.onChange}};t.exports=l},{"./ReactPropTypes":67,"./invariant":118}],24:[function(e,t){"use strict";function n(e){e.remove()}var r=e("./ReactBrowserEventEmitter"),o=e("./accumulate"),i=e("./forEachAccumulated"),a=e("./invariant"),s={trapBubbledEvent:function(e,t){a(this.isMounted());var n=r.trapBubbledEvent(e,t,this.getDOMNode());this._localEventListeners=o(this._localEventListeners,n)},componentWillUnmount:function(){this._localEventListeners&&i(this._localEventListeners,n)}};t.exports=s},{"./ReactBrowserEventEmitter":29,"./accumulate":92,"./forEachAccumulated":105,"./invariant":118}],25:[function(e,t){"use strict";var n=e("./EventConstants"),r=e("./emptyFunction"),o=n.topLevelTypes,i={eventTypes:null,extractEvents:function(e,t,n,i){if(e===o.topTouchStart){var a=i.target;a&&!a.onclick&&(a.onclick=r)}}};t.exports=i},{"./EventConstants":15,"./emptyFunction":100}],26:[function(e,t){"use strict";var n=e("./invariant"),r=function(e){var t=this;if(t.instancePool.length){var n=t.instancePool.pop();return t.call(n,e),n}return new t(e)},o=function(e,t){var n=this;if(n.instancePool.length){var r=n.instancePool.pop();return n.call(r,e,t),r}return new n(e,t)},i=function(e,t,n){var r=this;if(r.instancePool.length){var o=r.instancePool.pop();return r.call(o,e,t,n),o}return new r(e,t,n)},a=function(e,t,n,r,o){var i=this;if(i.instancePool.length){var a=i.instancePool.pop();return i.call(a,e,t,n,r,o),a}return new i(e,t,n,r,o)},s=function(e){var t=this;n(e instanceof t),e.destructor&&e.destructor(),t.instancePool.length<t.poolSize&&t.instancePool.push(e)},u=10,c=r,l=function(e,t){var n=e;return n.instancePool=[],n.getPooled=t||c,n.poolSize||(n.poolSize=u),n.release=s,n},p={addPoolingTo:l,oneArgumentPooler:r,twoArgumentPooler:o,threeArgumentPooler:i,fiveArgumentPooler:a};t.exports=p},{"./invariant":118}],27:[function(e,t){"use strict";function n(e){var t=Array.prototype.slice.call(arguments,1);return e.apply(null,t)}{var r=e("./DOMPropertyOperations"),o=e("./EventPluginUtils"),i=e("./ReactChildren"),a=e("./ReactComponent"),s=e("./ReactCompositeComponent"),u=e("./ReactContext"),c=e("./ReactCurrentOwner"),l=e("./ReactDescriptor"),p=e("./ReactDOM"),d=e("./ReactDOMComponent"),f=e("./ReactDefaultInjection"),h=e("./ReactInstanceHandles"),v=e("./ReactMount"),m=e("./ReactMultiChild"),g=e("./ReactPerf"),y=e("./ReactPropTypes"),C=e("./ReactServerRendering"),E=e("./ReactTextComponent"),R=e("./onlyChild");e("./warning")}f.inject();var M={Children:{map:i.map,forEach:i.forEach,count:i.count,only:R},DOM:p,PropTypes:y,initializeTouchEvents:function(e){o.useTouchEvents=e},createClass:s.createClass,createDescriptor:function(){return n.apply(this,arguments)},createElement:n,constructAndRenderComponent:v.constructAndRenderComponent,constructAndRenderComponentByID:v.constructAndRenderComponentByID,renderComponent:g.measure("React","renderComponent",v.renderComponent),renderComponentToString:C.renderComponentToString,renderComponentToStaticMarkup:C.renderComponentToStaticMarkup,unmountComponentAtNode:v.unmountComponentAtNode,isValidClass:l.isValidFactory,isValidComponent:l.isValidDescriptor,withContext:u.withContext,__internals:{Component:a,CurrentOwner:c,DOMComponent:d,DOMPropertyOperations:r,InstanceHandles:h,Mount:v,MultiChild:m,TextComponent:E}};M.version="0.11.2",t.exports=M},{"./DOMPropertyOperations":11,"./EventPluginUtils":19,"./ReactChildren":30,"./ReactComponent":31,"./ReactCompositeComponent":33,"./ReactContext":34,"./ReactCurrentOwner":35,"./ReactDOM":36,"./ReactDOMComponent":38,"./ReactDefaultInjection":48,"./ReactDescriptor":49,"./ReactInstanceHandles":57,"./ReactMount":59,"./ReactMultiChild":60,"./ReactPerf":63,"./ReactPropTypes":67,"./ReactServerRendering":71,"./ReactTextComponent":73,"./onlyChild":133,"./warning":139}],28:[function(e,t){"use strict";var n=e("./ReactEmptyComponent"),r=e("./ReactMount"),o=e("./invariant"),i={getDOMNode:function(){return o(this.isMounted()),n.isNullComponentID(this._rootNodeID)?null:r.getNode(this._rootNodeID)}};t.exports=i},{"./ReactEmptyComponent":51,"./ReactMount":59,"./invariant":118}],29:[function(e,t){"use strict";function n(e){return Object.prototype.hasOwnProperty.call(e,h)||(e[h]=d++,l[e[h]]={}),l[e[h]]}var r=e("./EventConstants"),o=e("./EventPluginHub"),i=e("./EventPluginRegistry"),a=e("./ReactEventEmitterMixin"),s=e("./ViewportMetrics"),u=e("./isEventSupported"),c=e("./merge"),l={},p=!1,d=0,f={topBlur:"blur",topChange:"change",topClick:"click",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topScroll:"scroll",topSelectionChange:"selectionchange",topTextInput:"textInput",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topWheel:"wheel"},h="_reactListenersID"+String(Math.random()).slice(2),v=c(a,{ReactEventListener:null,injection:{injectReactEventListener:function(e){e.setHandleTopLevel(v.handleTopLevel),v.ReactEventListener=e
}},setEnabled:function(e){v.ReactEventListener&&v.ReactEventListener.setEnabled(e)},isEnabled:function(){return!(!v.ReactEventListener||!v.ReactEventListener.isEnabled())},listenTo:function(e,t){for(var o=t,a=n(o),s=i.registrationNameDependencies[e],c=r.topLevelTypes,l=0,p=s.length;p>l;l++){var d=s[l];a.hasOwnProperty(d)&&a[d]||(d===c.topWheel?u("wheel")?v.ReactEventListener.trapBubbledEvent(c.topWheel,"wheel",o):u("mousewheel")?v.ReactEventListener.trapBubbledEvent(c.topWheel,"mousewheel",o):v.ReactEventListener.trapBubbledEvent(c.topWheel,"DOMMouseScroll",o):d===c.topScroll?u("scroll",!0)?v.ReactEventListener.trapCapturedEvent(c.topScroll,"scroll",o):v.ReactEventListener.trapBubbledEvent(c.topScroll,"scroll",v.ReactEventListener.WINDOW_HANDLE):d===c.topFocus||d===c.topBlur?(u("focus",!0)?(v.ReactEventListener.trapCapturedEvent(c.topFocus,"focus",o),v.ReactEventListener.trapCapturedEvent(c.topBlur,"blur",o)):u("focusin")&&(v.ReactEventListener.trapBubbledEvent(c.topFocus,"focusin",o),v.ReactEventListener.trapBubbledEvent(c.topBlur,"focusout",o)),a[c.topBlur]=!0,a[c.topFocus]=!0):f.hasOwnProperty(d)&&v.ReactEventListener.trapBubbledEvent(d,f[d],o),a[d]=!0)}},trapBubbledEvent:function(e,t,n){return v.ReactEventListener.trapBubbledEvent(e,t,n)},trapCapturedEvent:function(e,t,n){return v.ReactEventListener.trapCapturedEvent(e,t,n)},ensureScrollValueMonitoring:function(){if(!p){var e=s.refreshScrollValues;v.ReactEventListener.monitorScrollValue(e),p=!0}},eventNameDispatchConfigs:o.eventNameDispatchConfigs,registrationNameModules:o.registrationNameModules,putListener:o.putListener,getListener:o.getListener,deleteListener:o.deleteListener,deleteAllListeners:o.deleteAllListeners});t.exports=v},{"./EventConstants":15,"./EventPluginHub":17,"./EventPluginRegistry":18,"./ReactEventEmitterMixin":53,"./ViewportMetrics":91,"./isEventSupported":119,"./merge":128}],30:[function(e,t){"use strict";function n(e,t){this.forEachFunction=e,this.forEachContext=t}function r(e,t,n,r){var o=e;o.forEachFunction.call(o.forEachContext,t,r)}function o(e,t,o){if(null==e)return e;var i=n.getPooled(t,o);p(e,r,i),n.release(i)}function i(e,t,n){this.mapResult=e,this.mapFunction=t,this.mapContext=n}function a(e,t,n,r){var o=e,i=o.mapResult,a=!i.hasOwnProperty(n);if(a){var s=o.mapFunction.call(o.mapContext,t,r);i[n]=s}}function s(e,t,n){if(null==e)return e;var r={},o=i.getPooled(r,t,n);return p(e,a,o),i.release(o),r}function u(){return null}function c(e){return p(e,u,null)}var l=e("./PooledClass"),p=e("./traverseAllChildren"),d=(e("./warning"),l.twoArgumentPooler),f=l.threeArgumentPooler;l.addPoolingTo(n,d),l.addPoolingTo(i,f);var h={forEach:o,map:s,count:c};t.exports=h},{"./PooledClass":26,"./traverseAllChildren":138,"./warning":139}],31:[function(e,t){"use strict";var n=e("./ReactDescriptor"),r=e("./ReactOwner"),o=e("./ReactUpdates"),i=e("./invariant"),a=e("./keyMirror"),s=e("./merge"),u=a({MOUNTED:null,UNMOUNTED:null}),c=!1,l=null,p=null,d={injection:{injectEnvironment:function(e){i(!c),p=e.mountImageIntoNode,l=e.unmountIDFromEnvironment,d.BackendIDOperations=e.BackendIDOperations,c=!0}},LifeCycle:u,BackendIDOperations:null,Mixin:{isMounted:function(){return this._lifeCycleState===u.MOUNTED},setProps:function(e,t){var n=this._pendingDescriptor||this._descriptor;this.replaceProps(s(n.props,e),t)},replaceProps:function(e,t){i(this.isMounted()),i(0===this._mountDepth),this._pendingDescriptor=n.cloneAndReplaceProps(this._pendingDescriptor||this._descriptor,e),o.enqueueUpdate(this,t)},_setPropsInternal:function(e,t){var r=this._pendingDescriptor||this._descriptor;this._pendingDescriptor=n.cloneAndReplaceProps(r,s(r.props,e)),o.enqueueUpdate(this,t)},construct:function(e){this.props=e.props,this._owner=e._owner,this._lifeCycleState=u.UNMOUNTED,this._pendingCallbacks=null,this._descriptor=e,this._pendingDescriptor=null},mountComponent:function(e,t,n){i(!this.isMounted());var o=this._descriptor.props;if(null!=o.ref){var a=this._descriptor._owner;r.addComponentAsRefTo(this,o.ref,a)}this._rootNodeID=e,this._lifeCycleState=u.MOUNTED,this._mountDepth=n},unmountComponent:function(){i(this.isMounted());var e=this.props;null!=e.ref&&r.removeComponentAsRefFrom(this,e.ref,this._owner),l(this._rootNodeID),this._rootNodeID=null,this._lifeCycleState=u.UNMOUNTED},receiveComponent:function(e,t){i(this.isMounted()),this._pendingDescriptor=e,this.performUpdateIfNecessary(t)},performUpdateIfNecessary:function(e){if(null!=this._pendingDescriptor){var t=this._descriptor,n=this._pendingDescriptor;this._descriptor=n,this.props=n.props,this._owner=n._owner,this._pendingDescriptor=null,this.updateComponent(e,t)}},updateComponent:function(e,t){var n=this._descriptor;(n._owner!==t._owner||n.props.ref!==t.props.ref)&&(null!=t.props.ref&&r.removeComponentAsRefFrom(this,t.props.ref,t._owner),null!=n.props.ref&&r.addComponentAsRefTo(this,n.props.ref,n._owner))},mountComponentIntoNode:function(e,t,n){var r=o.ReactReconcileTransaction.getPooled();r.perform(this._mountComponentIntoNode,this,e,t,r,n),o.ReactReconcileTransaction.release(r)},_mountComponentIntoNode:function(e,t,n,r){var o=this.mountComponent(e,n,0);p(o,t,r)},isOwnedBy:function(e){return this._owner===e},getSiblingByRef:function(e){var t=this._owner;return t&&t.refs?t.refs[e]:null}}};t.exports=d},{"./ReactDescriptor":49,"./ReactOwner":62,"./ReactUpdates":74,"./invariant":118,"./keyMirror":124,"./merge":128}],32:[function(e,t){"use strict";var n=e("./ReactDOMIDOperations"),r=e("./ReactMarkupChecksum"),o=e("./ReactMount"),i=e("./ReactPerf"),a=e("./ReactReconcileTransaction"),s=e("./getReactRootElementInContainer"),u=e("./invariant"),c=e("./setInnerHTML"),l=1,p=9,d={ReactReconcileTransaction:a,BackendIDOperations:n,unmountIDFromEnvironment:function(e){o.purgeID(e)},mountImageIntoNode:i.measure("ReactComponentBrowserEnvironment","mountImageIntoNode",function(e,t,n){if(u(t&&(t.nodeType===l||t.nodeType===p)),n){if(r.canReuseMarkup(e,s(t)))return;u(t.nodeType!==p)}u(t.nodeType!==p),c(t,e)})};t.exports=d},{"./ReactDOMIDOperations":40,"./ReactMarkupChecksum":58,"./ReactMount":59,"./ReactPerf":63,"./ReactReconcileTransaction":69,"./getReactRootElementInContainer":112,"./invariant":118,"./setInnerHTML":134}],33:[function(e,t){"use strict";function n(e){var t=e._owner||null;return t&&t.constructor&&t.constructor.displayName?" Check the render method of `"+t.constructor.displayName+"`.":""}function r(e,t){for(var n in t)t.hasOwnProperty(n)&&D("function"==typeof t[n])}function o(e,t){var n=N.hasOwnProperty(t)?N[t]:null;A.hasOwnProperty(t)&&D(n===_.OVERRIDE_BASE),e.hasOwnProperty(t)&&D(n===_.DEFINE_MANY||n===_.DEFINE_MANY_MERGED)}function i(e){var t=e._compositeLifeCycleState;D(e.isMounted()||t===S.MOUNTING),D(t!==S.RECEIVING_STATE),D(t!==S.UNMOUNTING)}function a(e,t){D(!h.isValidFactory(t)),D(!h.isValidDescriptor(t));var n=e.prototype;for(var r in t){var i=t[r];if(t.hasOwnProperty(r))if(o(n,r),w.hasOwnProperty(r))w[r](e,i);else{var a=N.hasOwnProperty(r),s=n.hasOwnProperty(r),u=i&&i.__reactDontBind,p="function"==typeof i,d=p&&!a&&!s&&!u;if(d)n.__reactAutoBindMap||(n.__reactAutoBindMap={}),n.__reactAutoBindMap[r]=i,n[r]=i;else if(s){var f=N[r];D(a&&(f===_.DEFINE_MANY_MERGED||f===_.DEFINE_MANY)),f===_.DEFINE_MANY_MERGED?n[r]=c(n[r],i):f===_.DEFINE_MANY&&(n[r]=l(n[r],i))}else n[r]=i}}}function s(e,t){if(t)for(var n in t){var r=t[n];if(t.hasOwnProperty(n)){var o=n in e,i=r;if(o){var a=e[n],s=typeof a,u=typeof r;D("function"===s&&"function"===u),i=l(a,r)}e[n]=i}}}function u(e,t){return D(e&&t&&"object"==typeof e&&"object"==typeof t),P(t,function(t,n){D(void 0===e[n]),e[n]=t}),e}function c(e,t){return function(){var n=e.apply(this,arguments),r=t.apply(this,arguments);return null==n?r:null==r?n:u(n,r)}}function l(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}}var p=e("./ReactComponent"),d=e("./ReactContext"),f=e("./ReactCurrentOwner"),h=e("./ReactDescriptor"),v=(e("./ReactDescriptorValidator"),e("./ReactEmptyComponent")),m=e("./ReactErrorUtils"),g=e("./ReactOwner"),y=e("./ReactPerf"),C=e("./ReactPropTransferer"),E=e("./ReactPropTypeLocations"),R=(e("./ReactPropTypeLocationNames"),e("./ReactUpdates")),M=e("./instantiateReactComponent"),D=e("./invariant"),x=e("./keyMirror"),b=e("./merge"),O=e("./mixInto"),P=(e("./monitorCodeUse"),e("./mapObject")),I=e("./shouldUpdateReactComponent"),_=(e("./warning"),x({DEFINE_ONCE:null,DEFINE_MANY:null,OVERRIDE_BASE:null,DEFINE_MANY_MERGED:null})),T=[],N={mixins:_.DEFINE_MANY,statics:_.DEFINE_MANY,propTypes:_.DEFINE_MANY,contextTypes:_.DEFINE_MANY,childContextTypes:_.DEFINE_MANY,getDefaultProps:_.DEFINE_MANY_MERGED,getInitialState:_.DEFINE_MANY_MERGED,getChildContext:_.DEFINE_MANY_MERGED,render:_.DEFINE_ONCE,componentWillMount:_.DEFINE_MANY,componentDidMount:_.DEFINE_MANY,componentWillReceiveProps:_.DEFINE_MANY,shouldComponentUpdate:_.DEFINE_ONCE,componentWillUpdate:_.DEFINE_MANY,componentDidUpdate:_.DEFINE_MANY,componentWillUnmount:_.DEFINE_MANY,updateComponent:_.OVERRIDE_BASE},w={displayName:function(e,t){e.displayName=t},mixins:function(e,t){if(t)for(var n=0;n<t.length;n++)a(e,t[n])},childContextTypes:function(e,t){r(e,t,E.childContext),e.childContextTypes=b(e.childContextTypes,t)},contextTypes:function(e,t){r(e,t,E.context),e.contextTypes=b(e.contextTypes,t)},getDefaultProps:function(e,t){e.getDefaultProps=e.getDefaultProps?c(e.getDefaultProps,t):t},propTypes:function(e,t){r(e,t,E.prop),e.propTypes=b(e.propTypes,t)},statics:function(e,t){s(e,t)}},S=x({MOUNTING:null,UNMOUNTING:null,RECEIVING_PROPS:null,RECEIVING_STATE:null}),A={construct:function(){p.Mixin.construct.apply(this,arguments),g.Mixin.construct.apply(this,arguments),this.state=null,this._pendingState=null,this.context=null,this._compositeLifeCycleState=null},isMounted:function(){return p.Mixin.isMounted.call(this)&&this._compositeLifeCycleState!==S.MOUNTING},mountComponent:y.measure("ReactCompositeComponent","mountComponent",function(e,t,n){p.Mixin.mountComponent.call(this,e,t,n),this._compositeLifeCycleState=S.MOUNTING,this.__reactAutoBindMap&&this._bindAutoBindMethods(),this.context=this._processContext(this._descriptor._context),this.props=this._processProps(this.props),this.state=this.getInitialState?this.getInitialState():null,D("object"==typeof this.state&&!Array.isArray(this.state)),this._pendingState=null,this._pendingForceUpdate=!1,this.componentWillMount&&(this.componentWillMount(),this._pendingState&&(this.state=this._pendingState,this._pendingState=null)),this._renderedComponent=M(this._renderValidatedComponent()),this._compositeLifeCycleState=null;var r=this._renderedComponent.mountComponent(e,t,n+1);return this.componentDidMount&&t.getReactMountReady().enqueue(this.componentDidMount,this),r}),unmountComponent:function(){this._compositeLifeCycleState=S.UNMOUNTING,this.componentWillUnmount&&this.componentWillUnmount(),this._compositeLifeCycleState=null,this._renderedComponent.unmountComponent(),this._renderedComponent=null,p.Mixin.unmountComponent.call(this)},setState:function(e,t){D("object"==typeof e||null==e),this.replaceState(b(this._pendingState||this.state,e),t)},replaceState:function(e,t){i(this),this._pendingState=e,this._compositeLifeCycleState!==S.MOUNTING&&R.enqueueUpdate(this,t)},_processContext:function(e){var t=null,n=this.constructor.contextTypes;if(n){t={};for(var r in n)t[r]=e[r]}return t},_processChildContext:function(e){var t=this.getChildContext&&this.getChildContext();if(this.constructor.displayName||"ReactCompositeComponent",t){D("object"==typeof this.constructor.childContextTypes);for(var n in t)D(n in this.constructor.childContextTypes);return b(e,t)}return e},_processProps:function(e){var t,n=this.constructor.defaultProps;if(n){t=b(e);for(var r in n)"undefined"==typeof t[r]&&(t[r]=n[r])}else t=e;return t},_checkPropTypes:function(e,t,r){var o=this.constructor.displayName;for(var i in e)if(e.hasOwnProperty(i)){var a=e[i](t,i,o,r);a instanceof Error&&n(this)}},performUpdateIfNecessary:function(e){var t=this._compositeLifeCycleState;if(t!==S.MOUNTING&&t!==S.RECEIVING_PROPS&&(null!=this._pendingDescriptor||null!=this._pendingState||this._pendingForceUpdate)){var n=this.context,r=this.props,o=this._descriptor;null!=this._pendingDescriptor&&(o=this._pendingDescriptor,n=this._processContext(o._context),r=this._processProps(o.props),this._pendingDescriptor=null,this._compositeLifeCycleState=S.RECEIVING_PROPS,this.componentWillReceiveProps&&this.componentWillReceiveProps(r,n)),this._compositeLifeCycleState=S.RECEIVING_STATE;var i=this._pendingState||this.state;this._pendingState=null;try{var a=this._pendingForceUpdate||!this.shouldComponentUpdate||this.shouldComponentUpdate(r,i,n);a?(this._pendingForceUpdate=!1,this._performComponentUpdate(o,r,i,n,e)):(this._descriptor=o,this.props=r,this.state=i,this.context=n,this._owner=o._owner)}finally{this._compositeLifeCycleState=null}}},_performComponentUpdate:function(e,t,n,r,o){var i=this._descriptor,a=this.props,s=this.state,u=this.context;this.componentWillUpdate&&this.componentWillUpdate(t,n,r),this._descriptor=e,this.props=t,this.state=n,this.context=r,this._owner=e._owner,this.updateComponent(o,i),this.componentDidUpdate&&o.getReactMountReady().enqueue(this.componentDidUpdate.bind(this,a,s,u),this)},receiveComponent:function(e,t){(e!==this._descriptor||null==e._owner)&&p.Mixin.receiveComponent.call(this,e,t)},updateComponent:y.measure("ReactCompositeComponent","updateComponent",function(e,t){p.Mixin.updateComponent.call(this,e,t);var n=this._renderedComponent,r=n._descriptor,o=this._renderValidatedComponent();if(I(r,o))n.receiveComponent(o,e);else{var i=this._rootNodeID,a=n._rootNodeID;n.unmountComponent(),this._renderedComponent=M(o);var s=this._renderedComponent.mountComponent(i,e,this._mountDepth+1);p.BackendIDOperations.dangerouslyReplaceNodeWithMarkupByID(a,s)}}),forceUpdate:function(e){var t=this._compositeLifeCycleState;D(this.isMounted()||t===S.MOUNTING),D(t!==S.RECEIVING_STATE&&t!==S.UNMOUNTING),this._pendingForceUpdate=!0,R.enqueueUpdate(this,e)},_renderValidatedComponent:y.measure("ReactCompositeComponent","_renderValidatedComponent",function(){var e,t=d.current;d.current=this._processChildContext(this._descriptor._context),f.current=this;try{e=this.render(),null===e||e===!1?(e=v.getEmptyComponent(),v.registerNullComponentID(this._rootNodeID)):v.deregisterNullComponentID(this._rootNodeID)}finally{d.current=t,f.current=null}return D(h.isValidDescriptor(e)),e}),_bindAutoBindMethods:function(){for(var e in this.__reactAutoBindMap)if(this.__reactAutoBindMap.hasOwnProperty(e)){var t=this.__reactAutoBindMap[e];this[e]=this._bindAutoBindMethod(m.guard(t,this.constructor.displayName+"."+e))}},_bindAutoBindMethod:function(e){var t=this,n=function(){return e.apply(t,arguments)};return n}},k=function(){};O(k,p.Mixin),O(k,g.Mixin),O(k,C.Mixin),O(k,A);var U={LifeCycle:S,Base:k,createClass:function(e){var t=function(e,t){this.construct(e,t)};t.prototype=new k,t.prototype.constructor=t,T.forEach(a.bind(null,t)),a(t,e),t.getDefaultProps&&(t.defaultProps=t.getDefaultProps()),D(t.prototype.render);for(var n in N)t.prototype[n]||(t.prototype[n]=null);var r=h.createFactory(t);return r},injection:{injectMixin:function(e){T.push(e)}}};t.exports=U},{"./ReactComponent":31,"./ReactContext":34,"./ReactCurrentOwner":35,"./ReactDescriptor":49,"./ReactDescriptorValidator":50,"./ReactEmptyComponent":51,"./ReactErrorUtils":52,"./ReactOwner":62,"./ReactPerf":63,"./ReactPropTransferer":64,"./ReactPropTypeLocationNames":65,"./ReactPropTypeLocations":66,"./ReactUpdates":74,"./instantiateReactComponent":117,"./invariant":118,"./keyMirror":124,"./mapObject":126,"./merge":128,"./mixInto":131,"./monitorCodeUse":132,"./shouldUpdateReactComponent":136,"./warning":139}],34:[function(e,t){"use strict";var n=e("./merge"),r={current:{},withContext:function(e,t){var o,i=r.current;r.current=n(i,e);try{o=t()}finally{r.current=i}return o}};t.exports=r},{"./merge":128}],35:[function(e,t){"use strict";var n={current:null};t.exports=n},{}],36:[function(e,t){"use strict";function n(e,t){var n=function(e){this.construct(e)};n.prototype=new o(t,e),n.prototype.constructor=n,n.displayName=t;var i=r.createFactory(n);return i}var r=e("./ReactDescriptor"),o=(e("./ReactDescriptorValidator"),e("./ReactDOMComponent")),i=e("./mergeInto"),a=e("./mapObject"),s=a({a:!1,abbr:!1,address:!1,area:!0,article:!1,aside:!1,audio:!1,b:!1,base:!0,bdi:!1,bdo:!1,big:!1,blockquote:!1,body:!1,br:!0,button:!1,canvas:!1,caption:!1,cite:!1,code:!1,col:!0,colgroup:!1,data:!1,datalist:!1,dd:!1,del:!1,details:!1,dfn:!1,dialog:!1,div:!1,dl:!1,dt:!1,em:!1,embed:!0,fieldset:!1,figcaption:!1,figure:!1,footer:!1,form:!1,h1:!1,h2:!1,h3:!1,h4:!1,h5:!1,h6:!1,head:!1,header:!1,hr:!0,html:!1,i:!1,iframe:!1,img:!0,input:!0,ins:!1,kbd:!1,keygen:!0,label:!1,legend:!1,li:!1,link:!0,main:!1,map:!1,mark:!1,menu:!1,menuitem:!1,meta:!0,meter:!1,nav:!1,noscript:!1,object:!1,ol:!1,optgroup:!1,option:!1,output:!1,p:!1,param:!0,picture:!1,pre:!1,progress:!1,q:!1,rp:!1,rt:!1,ruby:!1,s:!1,samp:!1,script:!1,section:!1,select:!1,small:!1,source:!0,span:!1,strong:!1,style:!1,sub:!1,summary:!1,sup:!1,table:!1,tbody:!1,td:!1,textarea:!1,tfoot:!1,th:!1,thead:!1,time:!1,title:!1,tr:!1,track:!0,u:!1,ul:!1,"var":!1,video:!1,wbr:!0,circle:!1,defs:!1,ellipse:!1,g:!1,line:!1,linearGradient:!1,mask:!1,path:!1,pattern:!1,polygon:!1,polyline:!1,radialGradient:!1,rect:!1,stop:!1,svg:!1,text:!1,tspan:!1},n),u={injectComponentClasses:function(e){i(s,e)}};s.injection=u,t.exports=s},{"./ReactDOMComponent":38,"./ReactDescriptor":49,"./ReactDescriptorValidator":50,"./mapObject":126,"./mergeInto":130}],37:[function(e,t){"use strict";var n=e("./AutoFocusMixin"),r=e("./ReactBrowserComponentMixin"),o=e("./ReactCompositeComponent"),i=e("./ReactDOM"),a=e("./keyMirror"),s=i.button,u=a({onClick:!0,onDoubleClick:!0,onMouseDown:!0,onMouseMove:!0,onMouseUp:!0,onClickCapture:!0,onDoubleClickCapture:!0,onMouseDownCapture:!0,onMouseMoveCapture:!0,onMouseUpCapture:!0}),c=o.createClass({displayName:"ReactDOMButton",mixins:[n,r],render:function(){var e={};for(var t in this.props)!this.props.hasOwnProperty(t)||this.props.disabled&&u[t]||(e[t]=this.props[t]);return s(e,this.props.children)}});t.exports=c},{"./AutoFocusMixin":1,"./ReactBrowserComponentMixin":28,"./ReactCompositeComponent":33,"./ReactDOM":36,"./keyMirror":124}],38:[function(e,t){"use strict";function n(e){e&&(v(null==e.children||null==e.dangerouslySetInnerHTML),v(null==e.style||"object"==typeof e.style))}function r(e,t,n,r){var o=p.findReactContainerForID(e);if(o){var i=o.nodeType===x?o.ownerDocument:o;E(t,i)}r.getPutListenerQueue().enqueuePutListener(e,t,n)}function o(e,t){this._tagOpen="<"+e,this._tagClose=t?"":"</"+e+">",this.tagName=e.toUpperCase()}var i=e("./CSSPropertyOperations"),a=e("./DOMProperty"),s=e("./DOMPropertyOperations"),u=e("./ReactBrowserComponentMixin"),c=e("./ReactComponent"),l=e("./ReactBrowserEventEmitter"),p=e("./ReactMount"),d=e("./ReactMultiChild"),f=e("./ReactPerf"),h=e("./escapeTextForBrowser"),v=e("./invariant"),m=e("./keyOf"),g=e("./merge"),y=e("./mixInto"),C=l.deleteListener,E=l.listenTo,R=l.registrationNameModules,M={string:!0,number:!0},D=m({style:null}),x=1;o.Mixin={mountComponent:f.measure("ReactDOMComponent","mountComponent",function(e,t,r){return c.Mixin.mountComponent.call(this,e,t,r),n(this.props),this._createOpenTagMarkupAndPutListeners(t)+this._createContentMarkup(t)+this._tagClose}),_createOpenTagMarkupAndPutListeners:function(e){var t=this.props,n=this._tagOpen;for(var o in t)if(t.hasOwnProperty(o)){var a=t[o];if(null!=a)if(R.hasOwnProperty(o))r(this._rootNodeID,o,a,e);else{o===D&&(a&&(a=t.style=g(t.style)),a=i.createMarkupForStyles(a));var u=s.createMarkupForProperty(o,a);u&&(n+=" "+u)}}if(e.renderToStaticMarkup)return n+">";var c=s.createMarkupForID(this._rootNodeID);return n+" "+c+">"},_createContentMarkup:function(e){var t=this.props.dangerouslySetInnerHTML;if(null!=t){if(null!=t.__html)return t.__html}else{var n=M[typeof this.props.children]?this.props.children:null,r=null!=n?null:this.props.children;if(null!=n)return h(n);if(null!=r){var o=this.mountChildren(r,e);return o.join("")}}return""},receiveComponent:function(e,t){(e!==this._descriptor||null==e._owner)&&c.Mixin.receiveComponent.call(this,e,t)},updateComponent:f.measure("ReactDOMComponent","updateComponent",function(e,t){n(this._descriptor.props),c.Mixin.updateComponent.call(this,e,t),this._updateDOMProperties(t.props,e),this._updateDOMChildren(t.props,e)}),_updateDOMProperties:function(e,t){var n,o,i,s=this.props;for(n in e)if(!s.hasOwnProperty(n)&&e.hasOwnProperty(n))if(n===D){var u=e[n];for(o in u)u.hasOwnProperty(o)&&(i=i||{},i[o]="")}else R.hasOwnProperty(n)?C(this._rootNodeID,n):(a.isStandardName[n]||a.isCustomAttribute(n))&&c.BackendIDOperations.deletePropertyByID(this._rootNodeID,n);for(n in s){var l=s[n],p=e[n];if(s.hasOwnProperty(n)&&l!==p)if(n===D)if(l&&(l=s.style=g(l)),p){for(o in p)!p.hasOwnProperty(o)||l&&l.hasOwnProperty(o)||(i=i||{},i[o]="");for(o in l)l.hasOwnProperty(o)&&p[o]!==l[o]&&(i=i||{},i[o]=l[o])}else i=l;else R.hasOwnProperty(n)?r(this._rootNodeID,n,l,t):(a.isStandardName[n]||a.isCustomAttribute(n))&&c.BackendIDOperations.updatePropertyByID(this._rootNodeID,n,l)}i&&c.BackendIDOperations.updateStylesByID(this._rootNodeID,i)},_updateDOMChildren:function(e,t){var n=this.props,r=M[typeof e.children]?e.children:null,o=M[typeof n.children]?n.children:null,i=e.dangerouslySetInnerHTML&&e.dangerouslySetInnerHTML.__html,a=n.dangerouslySetInnerHTML&&n.dangerouslySetInnerHTML.__html,s=null!=r?null:e.children,u=null!=o?null:n.children,l=null!=r||null!=i,p=null!=o||null!=a;null!=s&&null==u?this.updateChildren(null,t):l&&!p&&this.updateTextContent(""),null!=o?r!==o&&this.updateTextContent(""+o):null!=a?i!==a&&c.BackendIDOperations.updateInnerHTMLByID(this._rootNodeID,a):null!=u&&this.updateChildren(u,t)},unmountComponent:function(){this.unmountChildren(),l.deleteAllListeners(this._rootNodeID),c.Mixin.unmountComponent.call(this)}},y(o,c.Mixin),y(o,o.Mixin),y(o,d.Mixin),y(o,u),t.exports=o},{"./CSSPropertyOperations":4,"./DOMProperty":10,"./DOMPropertyOperations":11,"./ReactBrowserComponentMixin":28,"./ReactBrowserEventEmitter":29,"./ReactComponent":31,"./ReactMount":59,"./ReactMultiChild":60,"./ReactPerf":63,"./escapeTextForBrowser":102,"./invariant":118,"./keyOf":125,"./merge":128,"./mixInto":131}],39:[function(e,t){"use strict";var n=e("./EventConstants"),r=e("./LocalEventTrapMixin"),o=e("./ReactBrowserComponentMixin"),i=e("./ReactCompositeComponent"),a=e("./ReactDOM"),s=a.form,u=i.createClass({displayName:"ReactDOMForm",mixins:[o,r],render:function(){return this.transferPropsTo(s(null,this.props.children))},componentDidMount:function(){this.trapBubbledEvent(n.topLevelTypes.topReset,"reset"),this.trapBubbledEvent(n.topLevelTypes.topSubmit,"submit")}});t.exports=u},{"./EventConstants":15,"./LocalEventTrapMixin":24,"./ReactBrowserComponentMixin":28,"./ReactCompositeComponent":33,"./ReactDOM":36}],40:[function(e,t){"use strict";var n=e("./CSSPropertyOperations"),r=e("./DOMChildrenOperations"),o=e("./DOMPropertyOperations"),i=e("./ReactMount"),a=e("./ReactPerf"),s=e("./invariant"),u=e("./setInnerHTML"),c={dangerouslySetInnerHTML:"`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.",style:"`style` must be set using `updateStylesByID()`."},l={updatePropertyByID:a.measure("ReactDOMIDOperations","updatePropertyByID",function(e,t,n){var r=i.getNode(e);s(!c.hasOwnProperty(t)),null!=n?o.setValueForProperty(r,t,n):o.deleteValueForProperty(r,t)}),deletePropertyByID:a.measure("ReactDOMIDOperations","deletePropertyByID",function(e,t,n){var r=i.getNode(e);s(!c.hasOwnProperty(t)),o.deleteValueForProperty(r,t,n)}),updateStylesByID:a.measure("ReactDOMIDOperations","updateStylesByID",function(e,t){var r=i.getNode(e);n.setValueForStyles(r,t)}),updateInnerHTMLByID:a.measure("ReactDOMIDOperations","updateInnerHTMLByID",function(e,t){var n=i.getNode(e);u(n,t)}),updateTextContentByID:a.measure("ReactDOMIDOperations","updateTextContentByID",function(e,t){var n=i.getNode(e);r.updateTextContent(n,t)}),dangerouslyReplaceNodeWithMarkupByID:a.measure("ReactDOMIDOperations","dangerouslyReplaceNodeWithMarkupByID",function(e,t){var n=i.getNode(e);r.dangerouslyReplaceNodeWithMarkup(n,t)}),dangerouslyProcessChildrenUpdates:a.measure("ReactDOMIDOperations","dangerouslyProcessChildrenUpdates",function(e,t){for(var n=0;n<e.length;n++)e[n].parentNode=i.getNode(e[n].parentID);r.processUpdates(e,t)})};t.exports=l},{"./CSSPropertyOperations":4,"./DOMChildrenOperations":9,"./DOMPropertyOperations":11,"./ReactMount":59,"./ReactPerf":63,"./invariant":118,"./setInnerHTML":134}],41:[function(e,t){"use strict";var n=e("./EventConstants"),r=e("./LocalEventTrapMixin"),o=e("./ReactBrowserComponentMixin"),i=e("./ReactCompositeComponent"),a=e("./ReactDOM"),s=a.img,u=i.createClass({displayName:"ReactDOMImg",tagName:"IMG",mixins:[o,r],render:function(){return s(this.props)},componentDidMount:function(){this.trapBubbledEvent(n.topLevelTypes.topLoad,"load"),this.trapBubbledEvent(n.topLevelTypes.topError,"error")}});t.exports=u},{"./EventConstants":15,"./LocalEventTrapMixin":24,"./ReactBrowserComponentMixin":28,"./ReactCompositeComponent":33,"./ReactDOM":36}],42:[function(e,t){"use strict";var n=e("./AutoFocusMixin"),r=e("./DOMPropertyOperations"),o=e("./LinkedValueUtils"),i=e("./ReactBrowserComponentMixin"),a=e("./ReactCompositeComponent"),s=e("./ReactDOM"),u=e("./ReactMount"),c=e("./invariant"),l=e("./merge"),p=s.input,d={},f=a.createClass({displayName:"ReactDOMInput",mixins:[n,o.Mixin,i],getInitialState:function(){var e=this.props.defaultValue;return{checked:this.props.defaultChecked||!1,value:null!=e?e:null}},shouldComponentUpdate:function(){return!this._isChanging},render:function(){var e=l(this.props);e.defaultChecked=null,e.defaultValue=null;var t=o.getValue(this);e.value=null!=t?t:this.state.value;var n=o.getChecked(this);return e.checked=null!=n?n:this.state.checked,e.onChange=this._handleChange,p(e,this.props.children)},componentDidMount:function(){var e=u.getID(this.getDOMNode());d[e]=this},componentWillUnmount:function(){var e=this.getDOMNode(),t=u.getID(e);delete d[t]},componentDidUpdate:function(){var e=this.getDOMNode();null!=this.props.checked&&r.setValueForProperty(e,"checked",this.props.checked||!1);var t=o.getValue(this);null!=t&&r.setValueForProperty(e,"value",""+t)},_handleChange:function(e){var t,n=o.getOnChange(this);n&&(this._isChanging=!0,t=n.call(this,e),this._isChanging=!1),this.setState({checked:e.target.checked,value:e.target.value});var r=this.props.name;if("radio"===this.props.type&&null!=r){for(var i=this.getDOMNode(),a=i;a.parentNode;)a=a.parentNode;for(var s=a.querySelectorAll("input[name="+JSON.stringify(""+r)+'][type="radio"]'),l=0,p=s.length;p>l;l++){var f=s[l];if(f!==i&&f.form===i.form){var h=u.getID(f);c(h);var v=d[h];c(v),v.setState({checked:!1})}}}return t}});t.exports=f},{"./AutoFocusMixin":1,"./DOMPropertyOperations":11,"./LinkedValueUtils":23,"./ReactBrowserComponentMixin":28,"./ReactCompositeComponent":33,"./ReactDOM":36,"./ReactMount":59,"./invariant":118,"./merge":128}],43:[function(e,t){"use strict";var n=e("./ReactBrowserComponentMixin"),r=e("./ReactCompositeComponent"),o=e("./ReactDOM"),i=(e("./warning"),o.option),a=r.createClass({displayName:"ReactDOMOption",mixins:[n],componentWillMount:function(){},render:function(){return i(this.props,this.props.children)}});t.exports=a},{"./ReactBrowserComponentMixin":28,"./ReactCompositeComponent":33,"./ReactDOM":36,"./warning":139}],44:[function(e,t){"use strict";function n(e,t){if(null!=e[t])if(e.multiple){if(!Array.isArray(e[t]))return new Error("The `"+t+"` prop supplied to <select> must be an array if `multiple` is true.")}else if(Array.isArray(e[t]))return new Error("The `"+t+"` prop supplied to <select> must be a scalar value if `multiple` is false.")}function r(e,t){var n,r,o,i=e.props.multiple,a=null!=t?t:e.state.value,s=e.getDOMNode().options;if(i)for(n={},r=0,o=a.length;o>r;++r)n[""+a[r]]=!0;else n=""+a;for(r=0,o=s.length;o>r;r++){var u=i?n.hasOwnProperty(s[r].value):s[r].value===n;u!==s[r].selected&&(s[r].selected=u)}}var o=e("./AutoFocusMixin"),i=e("./LinkedValueUtils"),a=e("./ReactBrowserComponentMixin"),s=e("./ReactCompositeComponent"),u=e("./ReactDOM"),c=e("./merge"),l=u.select,p=s.createClass({displayName:"ReactDOMSelect",mixins:[o,i.Mixin,a],propTypes:{defaultValue:n,value:n},getInitialState:function(){return{value:this.props.defaultValue||(this.props.multiple?[]:"")}},componentWillReceiveProps:function(e){!this.props.multiple&&e.multiple?this.setState({value:[this.state.value]}):this.props.multiple&&!e.multiple&&this.setState({value:this.state.value[0]})},shouldComponentUpdate:function(){return!this._isChanging},render:function(){var e=c(this.props);return e.onChange=this._handleChange,e.value=null,l(e,this.props.children)},componentDidMount:function(){r(this,i.getValue(this))},componentDidUpdate:function(e){var t=i.getValue(this),n=!!e.multiple,o=!!this.props.multiple;(null!=t||n!==o)&&r(this,t)},_handleChange:function(e){var t,n=i.getOnChange(this);n&&(this._isChanging=!0,t=n.call(this,e),this._isChanging=!1);var r;if(this.props.multiple){r=[];for(var o=e.target.options,a=0,s=o.length;s>a;a++)o[a].selected&&r.push(o[a].value)}else r=e.target.value;return this.setState({value:r}),t}});t.exports=p},{"./AutoFocusMixin":1,"./LinkedValueUtils":23,"./ReactBrowserComponentMixin":28,"./ReactCompositeComponent":33,"./ReactDOM":36,"./merge":128}],45:[function(e,t){"use strict";function n(e,t,n,r){return e===n&&t===r}function r(e){var t=document.selection,n=t.createRange(),r=n.text.length,o=n.duplicate();o.moveToElementText(e),o.setEndPoint("EndToStart",n);var i=o.text.length,a=i+r;return{start:i,end:a}}function o(e){var t=window.getSelection();if(0===t.rangeCount)return null;var r=t.anchorNode,o=t.anchorOffset,i=t.focusNode,a=t.focusOffset,s=t.getRangeAt(0),u=n(t.anchorNode,t.anchorOffset,t.focusNode,t.focusOffset),c=u?0:s.toString().length,l=s.cloneRange();l.selectNodeContents(e),l.setEnd(s.startContainer,s.startOffset);var p=n(l.startContainer,l.startOffset,l.endContainer,l.endOffset),d=p?0:l.toString().length,f=d+c,h=document.createRange();h.setStart(r,o),h.setEnd(i,a);var v=h.collapsed;return h.detach(),{start:v?f:d,end:v?d:f}}function i(e,t){var n,r,o=document.selection.createRange().duplicate();"undefined"==typeof t.end?(n=t.start,r=n):t.start>t.end?(n=t.end,r=t.start):(n=t.start,r=t.end),o.moveToElementText(e),o.moveStart("character",n),o.setEndPoint("EndToStart",o),o.moveEnd("character",r-n),o.select()}function a(e,t){var n=window.getSelection(),r=e[c()].length,o=Math.min(t.start,r),i="undefined"==typeof t.end?o:Math.min(t.end,r);if(!n.extend&&o>i){var a=i;i=o,o=a}var s=u(e,o),l=u(e,i);if(s&&l){var p=document.createRange();p.setStart(s.node,s.offset),n.removeAllRanges(),o>i?(n.addRange(p),n.extend(l.node,l.offset)):(p.setEnd(l.node,l.offset),n.addRange(p)),p.detach()}}var s=e("./ExecutionEnvironment"),u=e("./getNodeForCharacterOffset"),c=e("./getTextContentAccessor"),l=s.canUseDOM&&document.selection,p={getOffsets:l?r:o,setOffsets:l?i:a};t.exports=p},{"./ExecutionEnvironment":21,"./getNodeForCharacterOffset":111,"./getTextContentAccessor":113}],46:[function(e,t){"use strict";var n=e("./AutoFocusMixin"),r=e("./DOMPropertyOperations"),o=e("./LinkedValueUtils"),i=e("./ReactBrowserComponentMixin"),a=e("./ReactCompositeComponent"),s=e("./ReactDOM"),u=e("./invariant"),c=e("./merge"),l=(e("./warning"),s.textarea),p=a.createClass({displayName:"ReactDOMTextarea",mixins:[n,o.Mixin,i],getInitialState:function(){var e=this.props.defaultValue,t=this.props.children;null!=t&&(u(null==e),Array.isArray(t)&&(u(t.length<=1),t=t[0]),e=""+t),null==e&&(e="");var n=o.getValue(this);return{initialValue:""+(null!=n?n:e)}},shouldComponentUpdate:function(){return!this._isChanging},render:function(){var e=c(this.props);return u(null==e.dangerouslySetInnerHTML),e.defaultValue=null,e.value=null,e.onChange=this._handleChange,l(e,this.state.initialValue)
},componentDidUpdate:function(){var e=o.getValue(this);if(null!=e){var t=this.getDOMNode();r.setValueForProperty(t,"value",""+e)}},_handleChange:function(e){var t,n=o.getOnChange(this);return n&&(this._isChanging=!0,t=n.call(this,e),this._isChanging=!1),this.setState({value:e.target.value}),t}});t.exports=p},{"./AutoFocusMixin":1,"./DOMPropertyOperations":11,"./LinkedValueUtils":23,"./ReactBrowserComponentMixin":28,"./ReactCompositeComponent":33,"./ReactDOM":36,"./invariant":118,"./merge":128,"./warning":139}],47:[function(e,t){"use strict";function n(){this.reinitializeTransaction()}var r=e("./ReactUpdates"),o=e("./Transaction"),i=e("./emptyFunction"),a=e("./mixInto"),s={initialize:i,close:function(){p.isBatchingUpdates=!1}},u={initialize:i,close:r.flushBatchedUpdates.bind(r)},c=[u,s];a(n,o.Mixin),a(n,{getTransactionWrappers:function(){return c}});var l=new n,p={isBatchingUpdates:!1,batchedUpdates:function(e,t,n){var r=p.isBatchingUpdates;p.isBatchingUpdates=!0,r?e(t,n):l.perform(e,null,t,n)}};t.exports=p},{"./ReactUpdates":74,"./Transaction":90,"./emptyFunction":100,"./mixInto":131}],48:[function(e,t){"use strict";function n(){x.EventEmitter.injectReactEventListener(D),x.EventPluginHub.injectEventPluginOrder(s),x.EventPluginHub.injectInstanceHandle(b),x.EventPluginHub.injectMount(O),x.EventPluginHub.injectEventPluginsByName({SimpleEventPlugin:_,EnterLeaveEventPlugin:u,ChangeEventPlugin:o,CompositionEventPlugin:a,MobileSafariClickEventPlugin:p,SelectEventPlugin:P,BeforeInputEventPlugin:r}),x.DOM.injectComponentClasses({button:m,form:g,img:y,input:C,option:E,select:R,textarea:M,html:N(v.html),head:N(v.head),body:N(v.body)}),x.CompositeComponent.injectMixin(d),x.DOMProperty.injectDOMPropertyConfig(l),x.DOMProperty.injectDOMPropertyConfig(T),x.EmptyComponent.injectEmptyComponent(v.noscript),x.Updates.injectReconcileTransaction(f.ReactReconcileTransaction),x.Updates.injectBatchingStrategy(h),x.RootIndex.injectCreateReactRootIndex(c.canUseDOM?i.createReactRootIndex:I.createReactRootIndex),x.Component.injectEnvironment(f)}var r=e("./BeforeInputEventPlugin"),o=e("./ChangeEventPlugin"),i=e("./ClientReactRootIndex"),a=e("./CompositionEventPlugin"),s=e("./DefaultEventPluginOrder"),u=e("./EnterLeaveEventPlugin"),c=e("./ExecutionEnvironment"),l=e("./HTMLDOMPropertyConfig"),p=e("./MobileSafariClickEventPlugin"),d=e("./ReactBrowserComponentMixin"),f=e("./ReactComponentBrowserEnvironment"),h=e("./ReactDefaultBatchingStrategy"),v=e("./ReactDOM"),m=e("./ReactDOMButton"),g=e("./ReactDOMForm"),y=e("./ReactDOMImg"),C=e("./ReactDOMInput"),E=e("./ReactDOMOption"),R=e("./ReactDOMSelect"),M=e("./ReactDOMTextarea"),D=e("./ReactEventListener"),x=e("./ReactInjection"),b=e("./ReactInstanceHandles"),O=e("./ReactMount"),P=e("./SelectEventPlugin"),I=e("./ServerReactRootIndex"),_=e("./SimpleEventPlugin"),T=e("./SVGDOMPropertyConfig"),N=e("./createFullPageComponent");t.exports={inject:n}},{"./BeforeInputEventPlugin":2,"./ChangeEventPlugin":6,"./ClientReactRootIndex":7,"./CompositionEventPlugin":8,"./DefaultEventPluginOrder":13,"./EnterLeaveEventPlugin":14,"./ExecutionEnvironment":21,"./HTMLDOMPropertyConfig":22,"./MobileSafariClickEventPlugin":25,"./ReactBrowserComponentMixin":28,"./ReactComponentBrowserEnvironment":32,"./ReactDOM":36,"./ReactDOMButton":37,"./ReactDOMForm":39,"./ReactDOMImg":41,"./ReactDOMInput":42,"./ReactDOMOption":43,"./ReactDOMSelect":44,"./ReactDOMTextarea":46,"./ReactDefaultBatchingStrategy":47,"./ReactEventListener":54,"./ReactInjection":55,"./ReactInstanceHandles":57,"./ReactMount":59,"./SVGDOMPropertyConfig":75,"./SelectEventPlugin":76,"./ServerReactRootIndex":77,"./SimpleEventPlugin":78,"./createFullPageComponent":97}],49:[function(e,t){"use strict";function n(e,t){if("function"==typeof t)for(var n in t)if(t.hasOwnProperty(n)){var r=t[n];if("function"==typeof r){var o=r.bind(t);for(var i in r)r.hasOwnProperty(i)&&(o[i]=r[i]);e[n]=o}else e[n]=r}}var r=e("./ReactContext"),o=e("./ReactCurrentOwner"),i=e("./merge"),a=(e("./warning"),function(){});a.createFactory=function(e){var t=Object.create(a.prototype),s=function(e,n){null==e?e={}:"object"==typeof e&&(e=i(e));var a=arguments.length-1;if(1===a)e.children=n;else if(a>1){for(var s=Array(a),u=0;a>u;u++)s[u]=arguments[u+1];e.children=s}var c=Object.create(t);return c._owner=o.current,c._context=r.current,c.props=e,c};return s.prototype=t,s.type=e,t.type=e,n(s,e),t.constructor=s,s},a.cloneAndReplaceProps=function(e,t){var n=Object.create(e.constructor.prototype);return n._owner=e._owner,n._context=e._context,n.props=t,n},a.isValidFactory=function(e){return"function"==typeof e&&e.prototype instanceof a},a.isValidDescriptor=function(e){return e instanceof a},t.exports=a},{"./ReactContext":34,"./ReactCurrentOwner":35,"./merge":128,"./warning":139}],50:[function(e,t){"use strict";function n(){var e=p.current;return e&&e.constructor.displayName||void 0}function r(e,t){e._store.validated||null!=e.props.key||(e._store.validated=!0,i("react_key_warning",'Each child in an array should have a unique "key" prop.',e,t))}function o(e,t,n){m.test(e)&&i("react_numeric_key_warning","Child objects should have non-numeric keys so ordering is preserved.",t,n)}function i(e,t,r,o){var i=n(),a=o.displayName,s=i||a,u=f[e];if(!u.hasOwnProperty(s)){u[s]=!0,t+=i?" Check the render method of "+i+".":" Check the renderComponent call using <"+a+">.";var c=null;r._owner&&r._owner!==p.current&&(c=r._owner.constructor.displayName,t+=" It was passed a child from "+c+"."),t+=" See http://fb.me/react-warning-keys for more information.",d(e,{component:s,componentOwner:c}),console.warn(t)}}function a(){var e=n()||"";h.hasOwnProperty(e)||(h[e]=!0,d("react_object_map_children"))}function s(e,t){if(Array.isArray(e))for(var n=0;n<e.length;n++){var i=e[n];c.isValidDescriptor(i)&&r(i,t)}else if(c.isValidDescriptor(e))e._store.validated=!0;else if(e&&"object"==typeof e){a();for(var s in e)o(s,e[s],t)}}function u(e,t,n,r){for(var o in t)if(t.hasOwnProperty(o)){var i;try{i=t[o](n,o,e,r)}catch(a){i=a}i instanceof Error&&!(i.message in v)&&(v[i.message]=!0,d("react_failed_descriptor_type_check",{message:i.message}))}}var c=e("./ReactDescriptor"),l=e("./ReactPropTypeLocations"),p=e("./ReactCurrentOwner"),d=e("./monitorCodeUse"),f={react_key_warning:{},react_numeric_key_warning:{}},h={},v={},m=/^\d+$/,g={createFactory:function(e,t,n){var r=function(){for(var r=e.apply(this,arguments),o=1;o<arguments.length;o++)s(arguments[o],r.type);var i=r.type.displayName;return t&&u(i,t,r.props,l.prop),n&&u(i,n,r._context,l.context),r};r.prototype=e.prototype,r.type=e.type;for(var o in e)e.hasOwnProperty(o)&&(r[o]=e[o]);return r}};t.exports=g},{"./ReactCurrentOwner":35,"./ReactDescriptor":49,"./ReactPropTypeLocations":66,"./monitorCodeUse":132}],51:[function(e,t){"use strict";function n(){return s(a),a()}function r(e){u[e]=!0}function o(e){delete u[e]}function i(e){return u[e]}var a,s=e("./invariant"),u={},c={injectEmptyComponent:function(e){a=e}},l={deregisterNullComponentID:o,getEmptyComponent:n,injection:c,isNullComponentID:i,registerNullComponentID:r};t.exports=l},{"./invariant":118}],52:[function(e,t){"use strict";var n={guard:function(e){return e}};t.exports=n},{}],53:[function(e,t){"use strict";function n(e){r.enqueueEvents(e),r.processEventQueue()}var r=e("./EventPluginHub"),o={handleTopLevel:function(e,t,o,i){var a=r.extractEvents(e,t,o,i);n(a)}};t.exports=o},{"./EventPluginHub":17}],54:[function(e,t){"use strict";function n(e){var t=l.getID(e),n=c.getReactRootIDFromNodeID(t),r=l.findReactContainerForID(n),o=l.getFirstReactDOM(r);return o}function r(e,t){this.topLevelType=e,this.nativeEvent=t,this.ancestors=[]}function o(e){for(var t=l.getFirstReactDOM(d(e.nativeEvent))||window,r=t;r;)e.ancestors.push(r),r=n(r);for(var o=0,i=e.ancestors.length;i>o;o++){t=e.ancestors[o];var a=l.getID(t)||"";v._handleTopLevel(e.topLevelType,t,a,e.nativeEvent)}}function i(e){var t=f(window);e(t)}var a=e("./EventListener"),s=e("./ExecutionEnvironment"),u=e("./PooledClass"),c=e("./ReactInstanceHandles"),l=e("./ReactMount"),p=e("./ReactUpdates"),d=e("./getEventTarget"),f=e("./getUnboundedScrollPosition"),h=e("./mixInto");h(r,{destructor:function(){this.topLevelType=null,this.nativeEvent=null,this.ancestors.length=0}}),u.addPoolingTo(r,u.twoArgumentPooler);var v={_enabled:!0,_handleTopLevel:null,WINDOW_HANDLE:s.canUseDOM?window:null,setHandleTopLevel:function(e){v._handleTopLevel=e},setEnabled:function(e){v._enabled=!!e},isEnabled:function(){return v._enabled},trapBubbledEvent:function(e,t,n){var r=n;return r?a.listen(r,t,v.dispatchEvent.bind(null,e)):void 0},trapCapturedEvent:function(e,t,n){var r=n;return r?a.capture(r,t,v.dispatchEvent.bind(null,e)):void 0},monitorScrollValue:function(e){var t=i.bind(null,e);a.listen(window,"scroll",t),a.listen(window,"resize",t)},dispatchEvent:function(e,t){if(v._enabled){var n=r.getPooled(e,t);try{p.batchedUpdates(o,n)}finally{r.release(n)}}}};t.exports=v},{"./EventListener":16,"./ExecutionEnvironment":21,"./PooledClass":26,"./ReactInstanceHandles":57,"./ReactMount":59,"./ReactUpdates":74,"./getEventTarget":109,"./getUnboundedScrollPosition":114,"./mixInto":131}],55:[function(e,t){"use strict";var n=e("./DOMProperty"),r=e("./EventPluginHub"),o=e("./ReactComponent"),i=e("./ReactCompositeComponent"),a=e("./ReactDOM"),s=e("./ReactEmptyComponent"),u=e("./ReactBrowserEventEmitter"),c=e("./ReactPerf"),l=e("./ReactRootIndex"),p=e("./ReactUpdates"),d={Component:o.injection,CompositeComponent:i.injection,DOMProperty:n.injection,EmptyComponent:s.injection,EventPluginHub:r.injection,DOM:a.injection,EventEmitter:u.injection,Perf:c.injection,RootIndex:l.injection,Updates:p.injection};t.exports=d},{"./DOMProperty":10,"./EventPluginHub":17,"./ReactBrowserEventEmitter":29,"./ReactComponent":31,"./ReactCompositeComponent":33,"./ReactDOM":36,"./ReactEmptyComponent":51,"./ReactPerf":63,"./ReactRootIndex":70,"./ReactUpdates":74}],56:[function(e,t){"use strict";function n(e){return o(document.documentElement,e)}var r=e("./ReactDOMSelection"),o=e("./containsNode"),i=e("./focusNode"),a=e("./getActiveElement"),s={hasSelectionCapabilities:function(e){return e&&("INPUT"===e.nodeName&&"text"===e.type||"TEXTAREA"===e.nodeName||"true"===e.contentEditable)},getSelectionInformation:function(){var e=a();return{focusedElem:e,selectionRange:s.hasSelectionCapabilities(e)?s.getSelection(e):null}},restoreSelection:function(e){var t=a(),r=e.focusedElem,o=e.selectionRange;t!==r&&n(r)&&(s.hasSelectionCapabilities(r)&&s.setSelection(r,o),i(r))},getSelection:function(e){var t;if("selectionStart"in e)t={start:e.selectionStart,end:e.selectionEnd};else if(document.selection&&"INPUT"===e.nodeName){var n=document.selection.createRange();n.parentElement()===e&&(t={start:-n.moveStart("character",-e.value.length),end:-n.moveEnd("character",-e.value.length)})}else t=r.getOffsets(e);return t||{start:0,end:0}},setSelection:function(e,t){var n=t.start,o=t.end;if("undefined"==typeof o&&(o=n),"selectionStart"in e)e.selectionStart=n,e.selectionEnd=Math.min(o,e.value.length);else if(document.selection&&"INPUT"===e.nodeName){var i=e.createTextRange();i.collapse(!0),i.moveStart("character",n),i.moveEnd("character",o-n),i.select()}else r.setOffsets(e,t)}};t.exports=s},{"./ReactDOMSelection":45,"./containsNode":94,"./focusNode":104,"./getActiveElement":106}],57:[function(e,t){"use strict";function n(e){return d+e.toString(36)}function r(e,t){return e.charAt(t)===d||t===e.length}function o(e){return""===e||e.charAt(0)===d&&e.charAt(e.length-1)!==d}function i(e,t){return 0===t.indexOf(e)&&r(t,e.length)}function a(e){return e?e.substr(0,e.lastIndexOf(d)):""}function s(e,t){if(p(o(e)&&o(t)),p(i(e,t)),e===t)return e;for(var n=e.length+f,a=n;a<t.length&&!r(t,a);a++);return t.substr(0,a)}function u(e,t){var n=Math.min(e.length,t.length);if(0===n)return"";for(var i=0,a=0;n>=a;a++)if(r(e,a)&&r(t,a))i=a;else if(e.charAt(a)!==t.charAt(a))break;var s=e.substr(0,i);return p(o(s)),s}function c(e,t,n,r,o,u){e=e||"",t=t||"",p(e!==t);var c=i(t,e);p(c||i(e,t));for(var l=0,d=c?a:s,f=e;;f=d(f,t)){var v;if(o&&f===e||u&&f===t||(v=n(f,c,r)),v===!1||f===t)break;p(l++<h)}}var l=e("./ReactRootIndex"),p=e("./invariant"),d=".",f=d.length,h=100,v={createReactRootID:function(){return n(l.createReactRootIndex())},createReactID:function(e,t){return e+t},getReactRootIDFromNodeID:function(e){if(e&&e.charAt(0)===d&&e.length>1){var t=e.indexOf(d,1);return t>-1?e.substr(0,t):e}return null},traverseEnterLeave:function(e,t,n,r,o){var i=u(e,t);i!==e&&c(e,i,n,r,!1,!0),i!==t&&c(i,t,n,o,!0,!1)},traverseTwoPhase:function(e,t,n){e&&(c("",e,t,n,!0,!1),c(e,"",t,n,!1,!0))},traverseAncestors:function(e,t,n){c("",e,t,n,!0,!1)},_getFirstCommonAncestorID:u,_getNextDescendantID:s,isAncestorIDOf:i,SEPARATOR:d};t.exports=v},{"./ReactRootIndex":70,"./invariant":118}],58:[function(e,t){"use strict";var n=e("./adler32"),r={CHECKSUM_ATTR_NAME:"data-react-checksum",addChecksumToMarkup:function(e){var t=n(e);return e.replace(">"," "+r.CHECKSUM_ATTR_NAME+'="'+t+'">')},canReuseMarkup:function(e,t){var o=t.getAttribute(r.CHECKSUM_ATTR_NAME);o=o&&parseInt(o,10);var i=n(e);return i===o}};t.exports=r},{"./adler32":93}],59:[function(e,t){"use strict";function n(e){var t=g(e);return t&&T.getID(t)}function r(e){var t=o(e);if(t)if(D.hasOwnProperty(t)){var n=D[t];n!==e&&(C(!s(n,t)),D[t]=e)}else D[t]=e;return t}function o(e){return e&&e.getAttribute&&e.getAttribute(M)||""}function i(e,t){var n=o(e);n!==t&&delete D[n],e.setAttribute(M,t),D[t]=e}function a(e){return D.hasOwnProperty(e)&&s(D[e],e)||(D[e]=T.findReactNodeByID(e)),D[e]}function s(e,t){if(e){C(o(e)===t);var n=T.findReactContainerForID(t);if(n&&m(n,e))return!0}return!1}function u(e){delete D[e]}function c(e){var t=D[e];return t&&s(t,e)?void(_=t):!1}function l(e){_=null,h.traverseAncestors(e,c);var t=_;return _=null,t}var p=e("./DOMProperty"),d=e("./ReactBrowserEventEmitter"),f=(e("./ReactCurrentOwner"),e("./ReactDescriptor")),h=e("./ReactInstanceHandles"),v=e("./ReactPerf"),m=e("./containsNode"),g=e("./getReactRootElementInContainer"),y=e("./instantiateReactComponent"),C=e("./invariant"),E=e("./shouldUpdateReactComponent"),R=(e("./warning"),h.SEPARATOR),M=p.ID_ATTRIBUTE_NAME,D={},x=1,b=9,O={},P={},I=[],_=null,T={_instancesByReactRootID:O,scrollMonitor:function(e,t){t()},_updateRootComponent:function(e,t,n,r){var o=t.props;return T.scrollMonitor(n,function(){e.replaceProps(o,r)}),e},_registerComponent:function(e,t){C(t&&(t.nodeType===x||t.nodeType===b)),d.ensureScrollValueMonitoring();var n=T.registerContainer(t);return O[n]=e,n},_renderNewRootComponent:v.measure("ReactMount","_renderNewRootComponent",function(e,t,n){var r=y(e),o=T._registerComponent(r,t);return r.mountComponentIntoNode(o,t,n),r}),renderComponent:function(e,t,r){C(f.isValidDescriptor(e));var o=O[n(t)];if(o){var i=o._descriptor;if(E(i,e))return T._updateRootComponent(o,e,t,r);T.unmountComponentAtNode(t)}var a=g(t),s=a&&T.isRenderedByReact(a),u=s&&!o,c=T._renderNewRootComponent(e,t,u);return r&&r.call(c),c},constructAndRenderComponent:function(e,t,n){return T.renderComponent(e(t),n)},constructAndRenderComponentByID:function(e,t,n){var r=document.getElementById(n);return C(r),T.constructAndRenderComponent(e,t,r)},registerContainer:function(e){var t=n(e);return t&&(t=h.getReactRootIDFromNodeID(t)),t||(t=h.createReactRootID()),P[t]=e,t},unmountComponentAtNode:function(e){var t=n(e),r=O[t];return r?(T.unmountComponentFromNode(r,e),delete O[t],delete P[t],!0):!1},unmountComponentFromNode:function(e,t){for(e.unmountComponent(),t.nodeType===b&&(t=t.documentElement);t.lastChild;)t.removeChild(t.lastChild)},findReactContainerForID:function(e){var t=h.getReactRootIDFromNodeID(e),n=P[t];return n},findReactNodeByID:function(e){var t=T.findReactContainerForID(e);return T.findComponentRoot(t,e)},isRenderedByReact:function(e){if(1!==e.nodeType)return!1;var t=T.getID(e);return t?t.charAt(0)===R:!1},getFirstReactDOM:function(e){for(var t=e;t&&t.parentNode!==t;){if(T.isRenderedByReact(t))return t;t=t.parentNode}return null},findComponentRoot:function(e,t){var n=I,r=0,o=l(t)||e;for(n[0]=o.firstChild,n.length=1;r<n.length;){for(var i,a=n[r++];a;){var s=T.getID(a);s?t===s?i=a:h.isAncestorIDOf(s,t)&&(n.length=r=0,n.push(a.firstChild)):n.push(a.firstChild),a=a.nextSibling}if(i)return n.length=0,i}n.length=0,C(!1)},getReactRootID:n,getID:r,setID:i,getNode:a,purgeID:u};t.exports=T},{"./DOMProperty":10,"./ReactBrowserEventEmitter":29,"./ReactCurrentOwner":35,"./ReactDescriptor":49,"./ReactInstanceHandles":57,"./ReactPerf":63,"./containsNode":94,"./getReactRootElementInContainer":112,"./instantiateReactComponent":117,"./invariant":118,"./shouldUpdateReactComponent":136,"./warning":139}],60:[function(e,t){"use strict";function n(e,t,n){h.push({parentID:e,parentNode:null,type:c.INSERT_MARKUP,markupIndex:v.push(t)-1,textContent:null,fromIndex:null,toIndex:n})}function r(e,t,n){h.push({parentID:e,parentNode:null,type:c.MOVE_EXISTING,markupIndex:null,textContent:null,fromIndex:t,toIndex:n})}function o(e,t){h.push({parentID:e,parentNode:null,type:c.REMOVE_NODE,markupIndex:null,textContent:null,fromIndex:t,toIndex:null})}function i(e,t){h.push({parentID:e,parentNode:null,type:c.TEXT_CONTENT,markupIndex:null,textContent:t,fromIndex:null,toIndex:null})}function a(){h.length&&(u.BackendIDOperations.dangerouslyProcessChildrenUpdates(h,v),s())}function s(){h.length=0,v.length=0}var u=e("./ReactComponent"),c=e("./ReactMultiChildUpdateTypes"),l=e("./flattenChildren"),p=e("./instantiateReactComponent"),d=e("./shouldUpdateReactComponent"),f=0,h=[],v=[],m={Mixin:{mountChildren:function(e,t){var n=l(e),r=[],o=0;this._renderedChildren=n;for(var i in n){var a=n[i];if(n.hasOwnProperty(i)){var s=p(a);n[i]=s;var u=this._rootNodeID+i,c=s.mountComponent(u,t,this._mountDepth+1);s._mountIndex=o,r.push(c),o++}}return r},updateTextContent:function(e){f++;var t=!0;try{var n=this._renderedChildren;for(var r in n)n.hasOwnProperty(r)&&this._unmountChildByName(n[r],r);this.setTextContent(e),t=!1}finally{f--,f||(t?s():a())}},updateChildren:function(e,t){f++;var n=!0;try{this._updateChildren(e,t),n=!1}finally{f--,f||(n?s():a())}},_updateChildren:function(e,t){var n=l(e),r=this._renderedChildren;if(n||r){var o,i=0,a=0;for(o in n)if(n.hasOwnProperty(o)){var s=r&&r[o],u=s&&s._descriptor,c=n[o];if(d(u,c))this.moveChild(s,a,i),i=Math.max(s._mountIndex,i),s.receiveComponent(c,t),s._mountIndex=a;else{s&&(i=Math.max(s._mountIndex,i),this._unmountChildByName(s,o));var f=p(c);this._mountChildByNameAtIndex(f,o,a,t)}a++}for(o in r)!r.hasOwnProperty(o)||n&&n[o]||this._unmountChildByName(r[o],o)}},unmountChildren:function(){var e=this._renderedChildren;for(var t in e){var n=e[t];n.unmountComponent&&n.unmountComponent()}this._renderedChildren=null},moveChild:function(e,t,n){e._mountIndex<n&&r(this._rootNodeID,e._mountIndex,t)},createChild:function(e,t){n(this._rootNodeID,t,e._mountIndex)},removeChild:function(e){o(this._rootNodeID,e._mountIndex)},setTextContent:function(e){i(this._rootNodeID,e)},_mountChildByNameAtIndex:function(e,t,n,r){var o=this._rootNodeID+t,i=e.mountComponent(o,r,this._mountDepth+1);e._mountIndex=n,this.createChild(e,i),this._renderedChildren=this._renderedChildren||{},this._renderedChildren[t]=e},_unmountChildByName:function(e,t){this.removeChild(e),e._mountIndex=null,e.unmountComponent(),delete this._renderedChildren[t]}}};t.exports=m},{"./ReactComponent":31,"./ReactMultiChildUpdateTypes":61,"./flattenChildren":103,"./instantiateReactComponent":117,"./shouldUpdateReactComponent":136}],61:[function(e,t){"use strict";var n=e("./keyMirror"),r=n({INSERT_MARKUP:null,MOVE_EXISTING:null,REMOVE_NODE:null,TEXT_CONTENT:null});t.exports=r},{"./keyMirror":124}],62:[function(e,t){"use strict";var n=e("./emptyObject"),r=e("./invariant"),o={isValidOwner:function(e){return!(!e||"function"!=typeof e.attachRef||"function"!=typeof e.detachRef)},addComponentAsRefTo:function(e,t,n){r(o.isValidOwner(n)),n.attachRef(t,e)},removeComponentAsRefFrom:function(e,t,n){r(o.isValidOwner(n)),n.refs[t]===e&&n.detachRef(t)},Mixin:{construct:function(){this.refs=n},attachRef:function(e,t){r(t.isOwnedBy(this));var o=this.refs===n?this.refs={}:this.refs;o[e]=t},detachRef:function(e){delete this.refs[e]}}};t.exports=o},{"./emptyObject":101,"./invariant":118}],63:[function(e,t){"use strict";function n(e,t,n){return n}var r={enableMeasure:!1,storedMeasure:n,measure:function(e,t,n){return n},injection:{injectMeasure:function(e){r.storedMeasure=e}}};t.exports=r},{}],64:[function(e,t){"use strict";function n(e){return function(t,n,r){t[n]=t.hasOwnProperty(n)?e(t[n],r):r}}function r(e,t){for(var n in t)if(t.hasOwnProperty(n)){var r=c[n];r&&c.hasOwnProperty(n)?r(e,n,t[n]):e.hasOwnProperty(n)||(e[n]=t[n])}return e}var o=e("./emptyFunction"),i=e("./invariant"),a=e("./joinClasses"),s=e("./merge"),u=n(function(e,t){return s(t,e)}),c={children:o,className:n(a),key:o,ref:o,style:u},l={TransferStrategies:c,mergeProps:function(e,t){return r(s(e),t)},Mixin:{transferPropsTo:function(e){return i(e._owner===this),r(e.props,this.props),e}}};t.exports=l},{"./emptyFunction":100,"./invariant":118,"./joinClasses":123,"./merge":128}],65:[function(e,t){"use strict";var n={};t.exports=n},{}],66:[function(e,t){"use strict";var n=e("./keyMirror"),r=n({prop:null,context:null,childContext:null});t.exports=r},{"./keyMirror":124}],67:[function(e,t){"use strict";function n(e){function t(t,n,r,o,i){if(o=o||C,null!=n[r])return e(n,r,o,i);var a=g[i];return t?new Error("Required "+a+" `"+r+"` was not specified in "+("`"+o+"`.")):void 0}var n=t.bind(null,!1);return n.isRequired=t.bind(null,!0),n}function r(e){function t(t,n,r,o){var i=t[n],a=h(i);if(a!==e){var s=g[o],u=v(i);return new Error("Invalid "+s+" `"+n+"` of type `"+u+"` "+("supplied to `"+r+"`, expected `"+e+"`."))}}return n(t)}function o(){return n(y.thatReturns())}function i(e){function t(t,n,r,o){var i=t[n];if(!Array.isArray(i)){var a=g[o],s=h(i);return new Error("Invalid "+a+" `"+n+"` of type "+("`"+s+"` supplied to `"+r+"`, expected an array."))}for(var u=0;u<i.length;u++){var c=e(i,u,r,o);if(c instanceof Error)return c}}return n(t)}function a(){function e(e,t,n,r){if(!m.isValidDescriptor(e[t])){var o=g[r];return new Error("Invalid "+o+" `"+t+"` supplied to "+("`"+n+"`, expected a React component."))}}return n(e)}function s(e){function t(t,n,r,o){if(!(t[n]instanceof e)){var i=g[o],a=e.name||C;return new Error("Invalid "+i+" `"+n+"` supplied to "+("`"+r+"`, expected instance of `"+a+"`."))}}return n(t)}function u(e){function t(t,n,r,o){for(var i=t[n],a=0;a<e.length;a++)if(i===e[a])return;var s=g[o],u=JSON.stringify(e);return new Error("Invalid "+s+" `"+n+"` of value `"+i+"` "+("supplied to `"+r+"`, expected one of "+u+"."))}return n(t)}function c(e){function t(t,n,r,o){var i=t[n],a=h(i);if("object"!==a){var s=g[o];return new Error("Invalid "+s+" `"+n+"` of type "+("`"+a+"` supplied to `"+r+"`, expected an object."))}for(var u in i)if(i.hasOwnProperty(u)){var c=e(i,u,r,o);if(c instanceof Error)return c}}return n(t)}function l(e){function t(t,n,r,o){for(var i=0;i<e.length;i++){var a=e[i];if(null==a(t,n,r,o))return}var s=g[o];return new Error("Invalid "+s+" `"+n+"` supplied to "+("`"+r+"`."))}return n(t)}function p(){function e(e,t,n,r){if(!f(e[t])){var o=g[r];return new Error("Invalid "+o+" `"+t+"` supplied to "+("`"+n+"`, expected a renderable prop."))}}return n(e)}function d(e){function t(t,n,r,o){var i=t[n],a=h(i);if("object"!==a){var s=g[o];return new Error("Invalid "+s+" `"+n+"` of type `"+a+"` "+("supplied to `"+r+"`, expected `object`."))}for(var u in e){var c=e[u];if(c){var l=c(i,u,r,o);if(l)return l}}}return n(t,"expected `object`")}function f(e){switch(typeof e){case"number":case"string":return!0;case"boolean":return!e;case"object":if(Array.isArray(e))return e.every(f);if(m.isValidDescriptor(e))return!0;for(var t in e)if(!f(e[t]))return!1;return!0;default:return!1}}function h(e){var t=typeof e;return Array.isArray(e)?"array":e instanceof RegExp?"object":t}function v(e){var t=h(e);if("object"===t){if(e instanceof Date)return"date";if(e instanceof RegExp)return"regexp"}return t}var m=e("./ReactDescriptor"),g=e("./ReactPropTypeLocationNames"),y=e("./emptyFunction"),C="<<anonymous>>",E={array:r("array"),bool:r("boolean"),func:r("function"),number:r("number"),object:r("object"),string:r("string"),any:o(),arrayOf:i,component:a(),instanceOf:s,objectOf:c,oneOf:u,oneOfType:l,renderable:p(),shape:d};t.exports=E},{"./ReactDescriptor":49,"./ReactPropTypeLocationNames":65,"./emptyFunction":100}],68:[function(e,t){"use strict";function n(){this.listenersToPut=[]}var r=e("./PooledClass"),o=e("./ReactBrowserEventEmitter"),i=e("./mixInto");i(n,{enqueuePutListener:function(e,t,n){this.listenersToPut.push({rootNodeID:e,propKey:t,propValue:n})},putListeners:function(){for(var e=0;e<this.listenersToPut.length;e++){var t=this.listenersToPut[e];o.putListener(t.rootNodeID,t.propKey,t.propValue)}},reset:function(){this.listenersToPut.length=0},destructor:function(){this.reset()}}),r.addPoolingTo(n),t.exports=n},{"./PooledClass":26,"./ReactBrowserEventEmitter":29,"./mixInto":131}],69:[function(e,t){"use strict";function n(){this.reinitializeTransaction(),this.renderToStaticMarkup=!1,this.reactMountReady=r.getPooled(null),this.putListenerQueue=s.getPooled()}var r=e("./CallbackQueue"),o=e("./PooledClass"),i=e("./ReactBrowserEventEmitter"),a=e("./ReactInputSelection"),s=e("./ReactPutListenerQueue"),u=e("./Transaction"),c=e("./mixInto"),l={initialize:a.getSelectionInformation,close:a.restoreSelection},p={initialize:function(){var e=i.isEnabled();return i.setEnabled(!1),e},close:function(e){i.setEnabled(e)}},d={initialize:function(){this.reactMountReady.reset()},close:function(){this.reactMountReady.notifyAll()}},f={initialize:function(){this.putListenerQueue.reset()},close:function(){this.putListenerQueue.putListeners()}},h=[f,l,p,d],v={getTransactionWrappers:function(){return h},getReactMountReady:function(){return this.reactMountReady},getPutListenerQueue:function(){return this.putListenerQueue},destructor:function(){r.release(this.reactMountReady),this.reactMountReady=null,s.release(this.putListenerQueue),this.putListenerQueue=null}};c(n,u.Mixin),c(n,v),o.addPoolingTo(n),t.exports=n},{"./CallbackQueue":5,"./PooledClass":26,"./ReactBrowserEventEmitter":29,"./ReactInputSelection":56,"./ReactPutListenerQueue":68,"./Transaction":90,"./mixInto":131}],70:[function(e,t){"use strict";var n={injectCreateReactRootIndex:function(e){r.createReactRootIndex=e}},r={createReactRootIndex:null,injection:n};t.exports=r},{}],71:[function(e,t){"use strict";function n(e){c(o.isValidDescriptor(e)),c(!(2===arguments.length&&"function"==typeof arguments[1]));var t;try{var n=i.createReactRootID();return t=s.getPooled(!1),t.perform(function(){var r=u(e),o=r.mountComponent(n,t,0);return a.addChecksumToMarkup(o)},null)}finally{s.release(t)}}function r(e){c(o.isValidDescriptor(e));var t;try{var n=i.createReactRootID();return t=s.getPooled(!0),t.perform(function(){var r=u(e);return r.mountComponent(n,t,0)},null)}finally{s.release(t)}}var o=e("./ReactDescriptor"),i=e("./ReactInstanceHandles"),a=e("./ReactMarkupChecksum"),s=e("./ReactServerRenderingTransaction"),u=e("./instantiateReactComponent"),c=e("./invariant");t.exports={renderComponentToString:n,renderComponentToStaticMarkup:r}},{"./ReactDescriptor":49,"./ReactInstanceHandles":57,"./ReactMarkupChecksum":58,"./ReactServerRenderingTransaction":72,"./instantiateReactComponent":117,"./invariant":118}],72:[function(e,t){"use strict";function n(e){this.reinitializeTransaction(),this.renderToStaticMarkup=e,this.reactMountReady=o.getPooled(null),this.putListenerQueue=i.getPooled()}var r=e("./PooledClass"),o=e("./CallbackQueue"),i=e("./ReactPutListenerQueue"),a=e("./Transaction"),s=e("./emptyFunction"),u=e("./mixInto"),c={initialize:function(){this.reactMountReady.reset()},close:s},l={initialize:function(){this.putListenerQueue.reset()},close:s},p=[l,c],d={getTransactionWrappers:function(){return p},getReactMountReady:function(){return this.reactMountReady},getPutListenerQueue:function(){return this.putListenerQueue},destructor:function(){o.release(this.reactMountReady),this.reactMountReady=null,i.release(this.putListenerQueue),this.putListenerQueue=null}};u(n,a.Mixin),u(n,d),r.addPoolingTo(n),t.exports=n},{"./CallbackQueue":5,"./PooledClass":26,"./ReactPutListenerQueue":68,"./Transaction":90,"./emptyFunction":100,"./mixInto":131}],73:[function(e,t){"use strict";var n=e("./DOMPropertyOperations"),r=e("./ReactBrowserComponentMixin"),o=e("./ReactComponent"),i=e("./ReactDescriptor"),a=e("./escapeTextForBrowser"),s=e("./mixInto"),u=function(e){this.construct(e)};s(u,o.Mixin),s(u,r),s(u,{mountComponent:function(e,t,r){o.Mixin.mountComponent.call(this,e,t,r);var i=a(this.props);return t.renderToStaticMarkup?i:"<span "+n.createMarkupForID(e)+">"+i+"</span>"},receiveComponent:function(e){var t=e.props;t!==this.props&&(this.props=t,o.BackendIDOperations.updateTextContentByID(this._rootNodeID,t))}}),t.exports=i.createFactory(u)},{"./DOMPropertyOperations":11,"./ReactBrowserComponentMixin":28,"./ReactComponent":31,"./ReactDescriptor":49,"./escapeTextForBrowser":102,"./mixInto":131}],74:[function(e,t){"use strict";function n(){d(R.ReactReconcileTransaction&&v)}function r(){this.reinitializeTransaction(),this.dirtyComponentsLength=null,this.callbackQueue=u.getPooled(null),this.reconcileTransaction=R.ReactReconcileTransaction.getPooled()}function o(e,t,r){n(),v.batchedUpdates(e,t,r)}function i(e,t){return e._mountDepth-t._mountDepth}function a(e){var t=e.dirtyComponentsLength;d(t===h.length),h.sort(i);for(var n=0;t>n;n++){var r=h[n];if(r.isMounted()){var o=r._pendingCallbacks;if(r._pendingCallbacks=null,r.performUpdateIfNecessary(e.reconcileTransaction),o)for(var a=0;a<o.length;a++)e.callbackQueue.enqueue(o[a],r)}}}function s(e,t){return d(!t||"function"==typeof t),n(),v.isBatchingUpdates?(h.push(e),void(t&&(e._pendingCallbacks?e._pendingCallbacks.push(t):e._pendingCallbacks=[t]))):void v.batchedUpdates(s,e,t)}var u=e("./CallbackQueue"),c=e("./PooledClass"),l=(e("./ReactCurrentOwner"),e("./ReactPerf")),p=e("./Transaction"),d=e("./invariant"),f=e("./mixInto"),h=(e("./warning"),[]),v=null,m={initialize:function(){this.dirtyComponentsLength=h.length},close:function(){this.dirtyComponentsLength!==h.length?(h.splice(0,this.dirtyComponentsLength),C()):h.length=0}},g={initialize:function(){this.callbackQueue.reset()},close:function(){this.callbackQueue.notifyAll()}},y=[m,g];f(r,p.Mixin),f(r,{getTransactionWrappers:function(){return y},destructor:function(){this.dirtyComponentsLength=null,u.release(this.callbackQueue),this.callbackQueue=null,R.ReactReconcileTransaction.release(this.reconcileTransaction),this.reconcileTransaction=null},perform:function(e,t,n){return p.Mixin.perform.call(this,this.reconcileTransaction.perform,this.reconcileTransaction,e,t,n)}}),c.addPoolingTo(r);var C=l.measure("ReactUpdates","flushBatchedUpdates",function(){for(;h.length;){var e=r.getPooled();e.perform(a,null,e),r.release(e)}}),E={injectReconcileTransaction:function(e){d(e),R.ReactReconcileTransaction=e},injectBatchingStrategy:function(e){d(e),d("function"==typeof e.batchedUpdates),d("boolean"==typeof e.isBatchingUpdates),v=e}},R={ReactReconcileTransaction:null,batchedUpdates:o,enqueueUpdate:s,flushBatchedUpdates:C,injection:E};t.exports=R},{"./CallbackQueue":5,"./PooledClass":26,"./ReactCurrentOwner":35,"./ReactPerf":63,"./Transaction":90,"./invariant":118,"./mixInto":131,"./warning":139}],75:[function(e,t){"use strict";var n=e("./DOMProperty"),r=n.injection.MUST_USE_ATTRIBUTE,o={Properties:{cx:r,cy:r,d:r,dx:r,dy:r,fill:r,fillOpacity:r,fontFamily:r,fontSize:r,fx:r,fy:r,gradientTransform:r,gradientUnits:r,markerEnd:r,markerMid:r,markerStart:r,offset:r,opacity:r,patternContentUnits:r,patternUnits:r,points:r,preserveAspectRatio:r,r:r,rx:r,ry:r,spreadMethod:r,stopColor:r,stopOpacity:r,stroke:r,strokeDasharray:r,strokeLinecap:r,strokeOpacity:r,strokeWidth:r,textAnchor:r,transform:r,version:r,viewBox:r,x1:r,x2:r,x:r,y1:r,y2:r,y:r},DOMAttributeNames:{fillOpacity:"fill-opacity",fontFamily:"font-family",fontSize:"font-size",gradientTransform:"gradientTransform",gradientUnits:"gradientUnits",markerEnd:"marker-end",markerMid:"marker-mid",markerStart:"marker-start",patternContentUnits:"patternContentUnits",patternUnits:"patternUnits",preserveAspectRatio:"preserveAspectRatio",spreadMethod:"spreadMethod",stopColor:"stop-color",stopOpacity:"stop-opacity",strokeDasharray:"stroke-dasharray",strokeLinecap:"stroke-linecap",strokeOpacity:"stroke-opacity",strokeWidth:"stroke-width",textAnchor:"text-anchor",viewBox:"viewBox"}};
t.exports=o},{"./DOMProperty":10}],76:[function(e,t){"use strict";function n(e){if("selectionStart"in e&&a.hasSelectionCapabilities(e))return{start:e.selectionStart,end:e.selectionEnd};if(document.selection){var t=document.selection.createRange();return{parentElement:t.parentElement(),text:t.text,top:t.boundingTop,left:t.boundingLeft}}var n=window.getSelection();return{anchorNode:n.anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}}function r(e){if(!g&&null!=h&&h==u()){var t=n(h);if(!m||!p(m,t)){m=t;var r=s.getPooled(f.select,v,e);return r.type="select",r.target=h,i.accumulateTwoPhaseDispatches(r),r}}}var o=e("./EventConstants"),i=e("./EventPropagators"),a=e("./ReactInputSelection"),s=e("./SyntheticEvent"),u=e("./getActiveElement"),c=e("./isTextInputElement"),l=e("./keyOf"),p=e("./shallowEqual"),d=o.topLevelTypes,f={select:{phasedRegistrationNames:{bubbled:l({onSelect:null}),captured:l({onSelectCapture:null})},dependencies:[d.topBlur,d.topContextMenu,d.topFocus,d.topKeyDown,d.topMouseDown,d.topMouseUp,d.topSelectionChange]}},h=null,v=null,m=null,g=!1,y={eventTypes:f,extractEvents:function(e,t,n,o){switch(e){case d.topFocus:(c(t)||"true"===t.contentEditable)&&(h=t,v=n,m=null);break;case d.topBlur:h=null,v=null,m=null;break;case d.topMouseDown:g=!0;break;case d.topContextMenu:case d.topMouseUp:return g=!1,r(o);case d.topSelectionChange:case d.topKeyDown:case d.topKeyUp:return r(o)}}};t.exports=y},{"./EventConstants":15,"./EventPropagators":20,"./ReactInputSelection":56,"./SyntheticEvent":82,"./getActiveElement":106,"./isTextInputElement":121,"./keyOf":125,"./shallowEqual":135}],77:[function(e,t){"use strict";var n=Math.pow(2,53),r={createReactRootIndex:function(){return Math.ceil(Math.random()*n)}};t.exports=r},{}],78:[function(e,t){"use strict";var n=e("./EventConstants"),r=e("./EventPluginUtils"),o=e("./EventPropagators"),i=e("./SyntheticClipboardEvent"),a=e("./SyntheticEvent"),s=e("./SyntheticFocusEvent"),u=e("./SyntheticKeyboardEvent"),c=e("./SyntheticMouseEvent"),l=e("./SyntheticDragEvent"),p=e("./SyntheticTouchEvent"),d=e("./SyntheticUIEvent"),f=e("./SyntheticWheelEvent"),h=e("./invariant"),v=e("./keyOf"),m=n.topLevelTypes,g={blur:{phasedRegistrationNames:{bubbled:v({onBlur:!0}),captured:v({onBlurCapture:!0})}},click:{phasedRegistrationNames:{bubbled:v({onClick:!0}),captured:v({onClickCapture:!0})}},contextMenu:{phasedRegistrationNames:{bubbled:v({onContextMenu:!0}),captured:v({onContextMenuCapture:!0})}},copy:{phasedRegistrationNames:{bubbled:v({onCopy:!0}),captured:v({onCopyCapture:!0})}},cut:{phasedRegistrationNames:{bubbled:v({onCut:!0}),captured:v({onCutCapture:!0})}},doubleClick:{phasedRegistrationNames:{bubbled:v({onDoubleClick:!0}),captured:v({onDoubleClickCapture:!0})}},drag:{phasedRegistrationNames:{bubbled:v({onDrag:!0}),captured:v({onDragCapture:!0})}},dragEnd:{phasedRegistrationNames:{bubbled:v({onDragEnd:!0}),captured:v({onDragEndCapture:!0})}},dragEnter:{phasedRegistrationNames:{bubbled:v({onDragEnter:!0}),captured:v({onDragEnterCapture:!0})}},dragExit:{phasedRegistrationNames:{bubbled:v({onDragExit:!0}),captured:v({onDragExitCapture:!0})}},dragLeave:{phasedRegistrationNames:{bubbled:v({onDragLeave:!0}),captured:v({onDragLeaveCapture:!0})}},dragOver:{phasedRegistrationNames:{bubbled:v({onDragOver:!0}),captured:v({onDragOverCapture:!0})}},dragStart:{phasedRegistrationNames:{bubbled:v({onDragStart:!0}),captured:v({onDragStartCapture:!0})}},drop:{phasedRegistrationNames:{bubbled:v({onDrop:!0}),captured:v({onDropCapture:!0})}},focus:{phasedRegistrationNames:{bubbled:v({onFocus:!0}),captured:v({onFocusCapture:!0})}},input:{phasedRegistrationNames:{bubbled:v({onInput:!0}),captured:v({onInputCapture:!0})}},keyDown:{phasedRegistrationNames:{bubbled:v({onKeyDown:!0}),captured:v({onKeyDownCapture:!0})}},keyPress:{phasedRegistrationNames:{bubbled:v({onKeyPress:!0}),captured:v({onKeyPressCapture:!0})}},keyUp:{phasedRegistrationNames:{bubbled:v({onKeyUp:!0}),captured:v({onKeyUpCapture:!0})}},load:{phasedRegistrationNames:{bubbled:v({onLoad:!0}),captured:v({onLoadCapture:!0})}},error:{phasedRegistrationNames:{bubbled:v({onError:!0}),captured:v({onErrorCapture:!0})}},mouseDown:{phasedRegistrationNames:{bubbled:v({onMouseDown:!0}),captured:v({onMouseDownCapture:!0})}},mouseMove:{phasedRegistrationNames:{bubbled:v({onMouseMove:!0}),captured:v({onMouseMoveCapture:!0})}},mouseOut:{phasedRegistrationNames:{bubbled:v({onMouseOut:!0}),captured:v({onMouseOutCapture:!0})}},mouseOver:{phasedRegistrationNames:{bubbled:v({onMouseOver:!0}),captured:v({onMouseOverCapture:!0})}},mouseUp:{phasedRegistrationNames:{bubbled:v({onMouseUp:!0}),captured:v({onMouseUpCapture:!0})}},paste:{phasedRegistrationNames:{bubbled:v({onPaste:!0}),captured:v({onPasteCapture:!0})}},reset:{phasedRegistrationNames:{bubbled:v({onReset:!0}),captured:v({onResetCapture:!0})}},scroll:{phasedRegistrationNames:{bubbled:v({onScroll:!0}),captured:v({onScrollCapture:!0})}},submit:{phasedRegistrationNames:{bubbled:v({onSubmit:!0}),captured:v({onSubmitCapture:!0})}},touchCancel:{phasedRegistrationNames:{bubbled:v({onTouchCancel:!0}),captured:v({onTouchCancelCapture:!0})}},touchEnd:{phasedRegistrationNames:{bubbled:v({onTouchEnd:!0}),captured:v({onTouchEndCapture:!0})}},touchMove:{phasedRegistrationNames:{bubbled:v({onTouchMove:!0}),captured:v({onTouchMoveCapture:!0})}},touchStart:{phasedRegistrationNames:{bubbled:v({onTouchStart:!0}),captured:v({onTouchStartCapture:!0})}},wheel:{phasedRegistrationNames:{bubbled:v({onWheel:!0}),captured:v({onWheelCapture:!0})}}},y={topBlur:g.blur,topClick:g.click,topContextMenu:g.contextMenu,topCopy:g.copy,topCut:g.cut,topDoubleClick:g.doubleClick,topDrag:g.drag,topDragEnd:g.dragEnd,topDragEnter:g.dragEnter,topDragExit:g.dragExit,topDragLeave:g.dragLeave,topDragOver:g.dragOver,topDragStart:g.dragStart,topDrop:g.drop,topError:g.error,topFocus:g.focus,topInput:g.input,topKeyDown:g.keyDown,topKeyPress:g.keyPress,topKeyUp:g.keyUp,topLoad:g.load,topMouseDown:g.mouseDown,topMouseMove:g.mouseMove,topMouseOut:g.mouseOut,topMouseOver:g.mouseOver,topMouseUp:g.mouseUp,topPaste:g.paste,topReset:g.reset,topScroll:g.scroll,topSubmit:g.submit,topTouchCancel:g.touchCancel,topTouchEnd:g.touchEnd,topTouchMove:g.touchMove,topTouchStart:g.touchStart,topWheel:g.wheel};for(var C in y)y[C].dependencies=[C];var E={eventTypes:g,executeDispatch:function(e,t,n){var o=r.executeDispatch(e,t,n);o===!1&&(e.stopPropagation(),e.preventDefault())},extractEvents:function(e,t,n,r){var v=y[e];if(!v)return null;var g;switch(e){case m.topInput:case m.topLoad:case m.topError:case m.topReset:case m.topSubmit:g=a;break;case m.topKeyPress:if(0===r.charCode)return null;case m.topKeyDown:case m.topKeyUp:g=u;break;case m.topBlur:case m.topFocus:g=s;break;case m.topClick:if(2===r.button)return null;case m.topContextMenu:case m.topDoubleClick:case m.topMouseDown:case m.topMouseMove:case m.topMouseOut:case m.topMouseOver:case m.topMouseUp:g=c;break;case m.topDrag:case m.topDragEnd:case m.topDragEnter:case m.topDragExit:case m.topDragLeave:case m.topDragOver:case m.topDragStart:case m.topDrop:g=l;break;case m.topTouchCancel:case m.topTouchEnd:case m.topTouchMove:case m.topTouchStart:g=p;break;case m.topScroll:g=d;break;case m.topWheel:g=f;break;case m.topCopy:case m.topCut:case m.topPaste:g=i}h(g);var C=g.getPooled(v,n,r);return o.accumulateTwoPhaseDispatches(C),C}};t.exports=E},{"./EventConstants":15,"./EventPluginUtils":19,"./EventPropagators":20,"./SyntheticClipboardEvent":79,"./SyntheticDragEvent":81,"./SyntheticEvent":82,"./SyntheticFocusEvent":83,"./SyntheticKeyboardEvent":85,"./SyntheticMouseEvent":86,"./SyntheticTouchEvent":87,"./SyntheticUIEvent":88,"./SyntheticWheelEvent":89,"./invariant":118,"./keyOf":125}],79:[function(e,t){"use strict";function n(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticEvent"),o={clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}};r.augmentClass(n,o),t.exports=n},{"./SyntheticEvent":82}],80:[function(e,t){"use strict";function n(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticEvent"),o={data:null};r.augmentClass(n,o),t.exports=n},{"./SyntheticEvent":82}],81:[function(e,t){"use strict";function n(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticMouseEvent"),o={dataTransfer:null};r.augmentClass(n,o),t.exports=n},{"./SyntheticMouseEvent":86}],82:[function(e,t){"use strict";function n(e,t,n){this.dispatchConfig=e,this.dispatchMarker=t,this.nativeEvent=n;var r=this.constructor.Interface;for(var i in r)if(r.hasOwnProperty(i)){var a=r[i];this[i]=a?a(n):n[i]}var s=null!=n.defaultPrevented?n.defaultPrevented:n.returnValue===!1;this.isDefaultPrevented=s?o.thatReturnsTrue:o.thatReturnsFalse,this.isPropagationStopped=o.thatReturnsFalse}var r=e("./PooledClass"),o=e("./emptyFunction"),i=e("./getEventTarget"),a=e("./merge"),s=e("./mergeInto"),u={type:null,target:i,currentTarget:o.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};s(n.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e.preventDefault?e.preventDefault():e.returnValue=!1,this.isDefaultPrevented=o.thatReturnsTrue},stopPropagation:function(){var e=this.nativeEvent;e.stopPropagation?e.stopPropagation():e.cancelBubble=!0,this.isPropagationStopped=o.thatReturnsTrue},persist:function(){this.isPersistent=o.thatReturnsTrue},isPersistent:o.thatReturnsFalse,destructor:function(){var e=this.constructor.Interface;for(var t in e)this[t]=null;this.dispatchConfig=null,this.dispatchMarker=null,this.nativeEvent=null}}),n.Interface=u,n.augmentClass=function(e,t){var n=this,o=Object.create(n.prototype);s(o,e.prototype),e.prototype=o,e.prototype.constructor=e,e.Interface=a(n.Interface,t),e.augmentClass=n.augmentClass,r.addPoolingTo(e,r.threeArgumentPooler)},r.addPoolingTo(n,r.threeArgumentPooler),t.exports=n},{"./PooledClass":26,"./emptyFunction":100,"./getEventTarget":109,"./merge":128,"./mergeInto":130}],83:[function(e,t){"use strict";function n(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticUIEvent"),o={relatedTarget:null};r.augmentClass(n,o),t.exports=n},{"./SyntheticUIEvent":88}],84:[function(e,t){"use strict";function n(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticEvent"),o={data:null};r.augmentClass(n,o),t.exports=n},{"./SyntheticEvent":82}],85:[function(e,t){"use strict";function n(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticUIEvent"),o=e("./getEventKey"),i=e("./getEventModifierState"),a={key:o,location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:i,charCode:function(e){return"keypress"===e.type?"charCode"in e?e.charCode:e.keyCode:0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return e.keyCode||e.charCode}};r.augmentClass(n,a),t.exports=n},{"./SyntheticUIEvent":88,"./getEventKey":107,"./getEventModifierState":108}],86:[function(e,t){"use strict";function n(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticUIEvent"),o=e("./ViewportMetrics"),i=e("./getEventModifierState"),a={screenX:null,screenY:null,clientX:null,clientY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:i,button:function(e){var t=e.button;return"which"in e?t:2===t?2:4===t?1:0},buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},pageX:function(e){return"pageX"in e?e.pageX:e.clientX+o.currentScrollLeft},pageY:function(e){return"pageY"in e?e.pageY:e.clientY+o.currentScrollTop}};r.augmentClass(n,a),t.exports=n},{"./SyntheticUIEvent":88,"./ViewportMetrics":91,"./getEventModifierState":108}],87:[function(e,t){"use strict";function n(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticUIEvent"),o=e("./getEventModifierState"),i={touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:o};r.augmentClass(n,i),t.exports=n},{"./SyntheticUIEvent":88,"./getEventModifierState":108}],88:[function(e,t){"use strict";function n(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticEvent"),o=e("./getEventTarget"),i={view:function(e){if(e.view)return e.view;var t=o(e);if(null!=t&&t.window===t)return t;var n=t.ownerDocument;return n?n.defaultView||n.parentWindow:window},detail:function(e){return e.detail||0}};r.augmentClass(n,i),t.exports=n},{"./SyntheticEvent":82,"./getEventTarget":109}],89:[function(e,t){"use strict";function n(e,t,n){r.call(this,e,t,n)}var r=e("./SyntheticMouseEvent"),o={deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null};r.augmentClass(n,o),t.exports=n},{"./SyntheticMouseEvent":86}],90:[function(e,t){"use strict";var n=e("./invariant"),r={reinitializeTransaction:function(){this.transactionWrappers=this.getTransactionWrappers(),this.wrapperInitData?this.wrapperInitData.length=0:this.wrapperInitData=[],this._isInTransaction=!1},_isInTransaction:!1,getTransactionWrappers:null,isInTransaction:function(){return!!this._isInTransaction},perform:function(e,t,r,o,i,a,s,u){n(!this.isInTransaction());var c,l;try{this._isInTransaction=!0,c=!0,this.initializeAll(0),l=e.call(t,r,o,i,a,s,u),c=!1}finally{try{if(c)try{this.closeAll(0)}catch(p){}else this.closeAll(0)}finally{this._isInTransaction=!1}}return l},initializeAll:function(e){for(var t=this.transactionWrappers,n=e;n<t.length;n++){var r=t[n];try{this.wrapperInitData[n]=o.OBSERVED_ERROR,this.wrapperInitData[n]=r.initialize?r.initialize.call(this):null}finally{if(this.wrapperInitData[n]===o.OBSERVED_ERROR)try{this.initializeAll(n+1)}catch(i){}}}},closeAll:function(e){n(this.isInTransaction());for(var t=this.transactionWrappers,r=e;r<t.length;r++){var i,a=t[r],s=this.wrapperInitData[r];try{i=!0,s!==o.OBSERVED_ERROR&&a.close&&a.close.call(this,s),i=!1}finally{if(i)try{this.closeAll(r+1)}catch(u){}}}this.wrapperInitData.length=0}},o={Mixin:r,OBSERVED_ERROR:{}};t.exports=o},{"./invariant":118}],91:[function(e,t){"use strict";var n=e("./getUnboundedScrollPosition"),r={currentScrollLeft:0,currentScrollTop:0,refreshScrollValues:function(){var e=n(window);r.currentScrollLeft=e.x,r.currentScrollTop=e.y}};t.exports=r},{"./getUnboundedScrollPosition":114}],92:[function(e,t){"use strict";function n(e,t){if(r(null!=t),null==e)return t;var n=Array.isArray(e),o=Array.isArray(t);return n?e.concat(t):o?[e].concat(t):[e,t]}var r=e("./invariant");t.exports=n},{"./invariant":118}],93:[function(e,t){"use strict";function n(e){for(var t=1,n=0,o=0;o<e.length;o++)t=(t+e.charCodeAt(o))%r,n=(n+t)%r;return t|n<<16}var r=65521;t.exports=n},{}],94:[function(e,t){function n(e,t){return e&&t?e===t?!0:r(e)?!1:r(t)?n(e,t.parentNode):e.contains?e.contains(t):e.compareDocumentPosition?!!(16&e.compareDocumentPosition(t)):!1:!1}var r=e("./isTextNode");t.exports=n},{"./isTextNode":122}],95:[function(e,t){function n(e,t,n,r,o,i){e=e||{};for(var a,s=[t,n,r,o,i],u=0;s[u];){a=s[u++];for(var c in a)e[c]=a[c];a.hasOwnProperty&&a.hasOwnProperty("toString")&&"undefined"!=typeof a.toString&&e.toString!==a.toString&&(e.toString=a.toString)}return e}t.exports=n},{}],96:[function(e,t){function n(e){return!!e&&("object"==typeof e||"function"==typeof e)&&"length"in e&&!("setInterval"in e)&&"number"!=typeof e.nodeType&&(Array.isArray(e)||"callee"in e||"item"in e)}function r(e){return n(e)?Array.isArray(e)?e.slice():o(e):[e]}var o=e("./toArray");t.exports=r},{"./toArray":137}],97:[function(e,t){"use strict";function n(e){var t=r.createClass({displayName:"ReactFullPageComponent"+(e.type.displayName||""),componentWillUnmount:function(){o(!1)},render:function(){return this.transferPropsTo(e(null,this.props.children))}});return t}var r=e("./ReactCompositeComponent"),o=e("./invariant");t.exports=n},{"./ReactCompositeComponent":33,"./invariant":118}],98:[function(e,t){function n(e){var t=e.match(c);return t&&t[1].toLowerCase()}function r(e,t){var r=u;s(!!u);var o=n(e),c=o&&a(o);if(c){r.innerHTML=c[1]+e+c[2];for(var l=c[0];l--;)r=r.lastChild}else r.innerHTML=e;var p=r.getElementsByTagName("script");p.length&&(s(t),i(p).forEach(t));for(var d=i(r.childNodes);r.lastChild;)r.removeChild(r.lastChild);return d}var o=e("./ExecutionEnvironment"),i=e("./createArrayFrom"),a=e("./getMarkupWrap"),s=e("./invariant"),u=o.canUseDOM?document.createElement("div"):null,c=/^\s*<(\w+)/;t.exports=r},{"./ExecutionEnvironment":21,"./createArrayFrom":96,"./getMarkupWrap":110,"./invariant":118}],99:[function(e,t){"use strict";function n(e,t){var n=null==t||"boolean"==typeof t||""===t;if(n)return"";var r=isNaN(t);return r||0===t||o.hasOwnProperty(e)&&o[e]?""+t:("string"==typeof t&&(t=t.trim()),t+"px")}var r=e("./CSSProperty"),o=r.isUnitlessNumber;t.exports=n},{"./CSSProperty":3}],100:[function(e,t){function n(e){return function(){return e}}function r(){}var o=e("./copyProperties");o(r,{thatReturns:n,thatReturnsFalse:n(!1),thatReturnsTrue:n(!0),thatReturnsNull:n(null),thatReturnsThis:function(){return this},thatReturnsArgument:function(e){return e}}),t.exports=r},{"./copyProperties":95}],101:[function(e,t){"use strict";var n={};t.exports=n},{}],102:[function(e,t){"use strict";function n(e){return o[e]}function r(e){return(""+e).replace(i,n)}var o={"&":"&amp;",">":"&gt;","<":"&lt;",'"':"&quot;","'":"&#x27;"},i=/[&><"']/g;t.exports=r},{}],103:[function(e,t){"use strict";function n(e,t,n){var r=e,o=!r.hasOwnProperty(n);o&&null!=t&&(r[n]=t)}function r(e){if(null==e)return e;var t={};return o(e,n,t),t}{var o=e("./traverseAllChildren");e("./warning")}t.exports=r},{"./traverseAllChildren":138,"./warning":139}],104:[function(e,t){"use strict";function n(e){e.disabled||e.focus()}t.exports=n},{}],105:[function(e,t){"use strict";var n=function(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)};t.exports=n},{}],106:[function(e,t){function n(){try{return document.activeElement||document.body}catch(e){return document.body}}t.exports=n},{}],107:[function(e,t){"use strict";function n(e){if(e.key){var t=o[e.key]||e.key;if("Unidentified"!==t)return t}if("keypress"===e.type){var n="charCode"in e?e.charCode:e.keyCode;return 13===n?"Enter":String.fromCharCode(n)}return"keydown"===e.type||"keyup"===e.type?i[e.keyCode]||"Unidentified":void r(!1)}var r=e("./invariant"),o={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},i={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"};t.exports=n},{"./invariant":118}],108:[function(e,t){"use strict";function n(e){var t=this,n=t.nativeEvent;if(n.getModifierState)return n.getModifierState(e);var r=o[e];return r?!!n[r]:!1}function r(){return n}var o={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};t.exports=r},{}],109:[function(e,t){"use strict";function n(e){var t=e.target||e.srcElement||window;return 3===t.nodeType?t.parentNode:t}t.exports=n},{}],110:[function(e,t){function n(e){return o(!!i),p.hasOwnProperty(e)||(e="*"),a.hasOwnProperty(e)||(i.innerHTML="*"===e?"<link />":"<"+e+"></"+e+">",a[e]=!i.firstChild),a[e]?p[e]:null}var r=e("./ExecutionEnvironment"),o=e("./invariant"),i=r.canUseDOM?document.createElement("div"):null,a={circle:!0,defs:!0,ellipse:!0,g:!0,line:!0,linearGradient:!0,path:!0,polygon:!0,polyline:!0,radialGradient:!0,rect:!0,stop:!0,text:!0},s=[1,'<select multiple="true">',"</select>"],u=[1,"<table>","</table>"],c=[3,"<table><tbody><tr>","</tr></tbody></table>"],l=[1,"<svg>","</svg>"],p={"*":[1,"?<div>","</div>"],area:[1,"<map>","</map>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],legend:[1,"<fieldset>","</fieldset>"],param:[1,"<object>","</object>"],tr:[2,"<table><tbody>","</tbody></table>"],optgroup:s,option:s,caption:u,colgroup:u,tbody:u,tfoot:u,thead:u,td:c,th:c,circle:l,defs:l,ellipse:l,g:l,line:l,linearGradient:l,path:l,polygon:l,polyline:l,radialGradient:l,rect:l,stop:l,text:l};t.exports=n},{"./ExecutionEnvironment":21,"./invariant":118}],111:[function(e,t){"use strict";function n(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function r(e){for(;e;){if(e.nextSibling)return e.nextSibling;e=e.parentNode}}function o(e,t){for(var o=n(e),i=0,a=0;o;){if(3==o.nodeType){if(a=i+o.textContent.length,t>=i&&a>=t)return{node:o,offset:t-i};i=a}o=n(r(o))}}t.exports=o},{}],112:[function(e,t){"use strict";function n(e){return e?e.nodeType===r?e.documentElement:e.firstChild:null}var r=9;t.exports=n},{}],113:[function(e,t){"use strict";function n(){return!o&&r.canUseDOM&&(o="textContent"in document.documentElement?"textContent":"innerText"),o}var r=e("./ExecutionEnvironment"),o=null;t.exports=n},{"./ExecutionEnvironment":21}],114:[function(e,t){"use strict";function n(e){return e===window?{x:window.pageXOffset||document.documentElement.scrollLeft,y:window.pageYOffset||document.documentElement.scrollTop}:{x:e.scrollLeft,y:e.scrollTop}}t.exports=n},{}],115:[function(e,t){function n(e){return e.replace(r,"-$1").toLowerCase()}var r=/([A-Z])/g;t.exports=n},{}],116:[function(e,t){"use strict";function n(e){return r(e).replace(o,"-ms-")}var r=e("./hyphenate"),o=/^ms-/;t.exports=n},{"./hyphenate":115}],117:[function(e,t){"use strict";function n(e){return e&&"function"==typeof e.type&&"function"==typeof e.type.prototype.mountComponent&&"function"==typeof e.type.prototype.receiveComponent}function r(e){return o(n(e)),new e.type(e)}var o=e("./invariant");t.exports=r},{"./invariant":118}],118:[function(e,t){"use strict";var n=function(e,t,n,r,o,i,a,s){if(!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,i,a,s],l=0;u=new Error("Invariant Violation: "+t.replace(/%s/g,function(){return c[l++]}))}throw u.framesToPop=1,u}};t.exports=n},{}],119:[function(e,t){"use strict";function n(e,t){if(!o.canUseDOM||t&&!("addEventListener"in document))return!1;var n="on"+e,i=n in document;if(!i){var a=document.createElement("div");a.setAttribute(n,"return;"),i="function"==typeof a[n]}return!i&&r&&"wheel"===e&&(i=document.implementation.hasFeature("Events.wheel","3.0")),i}var r,o=e("./ExecutionEnvironment");o.canUseDOM&&(r=document.implementation&&document.implementation.hasFeature&&document.implementation.hasFeature("","")!==!0),t.exports=n},{"./ExecutionEnvironment":21}],120:[function(e,t){function n(e){return!(!e||!("function"==typeof Node?e instanceof Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}t.exports=n},{}],121:[function(e,t){"use strict";function n(e){return e&&("INPUT"===e.nodeName&&r[e.type]||"TEXTAREA"===e.nodeName)}var r={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};t.exports=n},{}],122:[function(e,t){function n(e){return r(e)&&3==e.nodeType}var r=e("./isNode");t.exports=n},{"./isNode":120}],123:[function(e,t){"use strict";function n(e){e||(e="");var t,n=arguments.length;if(n>1)for(var r=1;n>r;r++)t=arguments[r],t&&(e+=" "+t);return e}t.exports=n},{}],124:[function(e,t){"use strict";var n=e("./invariant"),r=function(e){var t,r={};n(e instanceof Object&&!Array.isArray(e));for(t in e)e.hasOwnProperty(t)&&(r[t]=t);return r};t.exports=r},{"./invariant":118}],125:[function(e,t){var n=function(e){var t;for(t in e)if(e.hasOwnProperty(t))return t;return null};t.exports=n},{}],126:[function(e,t){"use strict";function n(e,t,n){if(!e)return null;var r=0,o={};for(var i in e)e.hasOwnProperty(i)&&(o[i]=t.call(n,e[i],i,r++));return o}t.exports=n},{}],127:[function(e,t){"use strict";function n(e){var t={};return function(n){return t.hasOwnProperty(n)?t[n]:t[n]=e.call(this,n)}}t.exports=n},{}],128:[function(e,t){"use strict";var n=e("./mergeInto"),r=function(e,t){var r={};return n(r,e),n(r,t),r};t.exports=r},{"./mergeInto":130}],129:[function(e,t){"use strict";var n=e("./invariant"),r=e("./keyMirror"),o=36,i=function(e){return"object"!=typeof e||null===e},a={MAX_MERGE_DEPTH:o,isTerminal:i,normalizeMergeArg:function(e){return void 0===e||null===e?{}:e},checkMergeArrayArgs:function(e,t){n(Array.isArray(e)&&Array.isArray(t))},checkMergeObjectArgs:function(e,t){a.checkMergeObjectArg(e),a.checkMergeObjectArg(t)},checkMergeObjectArg:function(e){n(!i(e)&&!Array.isArray(e))},checkMergeIntoObjectArg:function(e){n(!(i(e)&&"function"!=typeof e||Array.isArray(e)))},checkMergeLevel:function(e){n(o>e)},checkArrayStrategy:function(e){n(void 0===e||e in a.ArrayStrategies)},ArrayStrategies:r({Clobber:!0,IndexByIndex:!0})};t.exports=a},{"./invariant":118,"./keyMirror":124}],130:[function(e,t){"use strict";function n(e,t){if(i(e),null!=t){o(t);for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])}}var r=e("./mergeHelpers"),o=r.checkMergeObjectArg,i=r.checkMergeIntoObjectArg;t.exports=n},{"./mergeHelpers":129}],131:[function(e,t){"use strict";var n=function(e,t){var n;for(n in t)t.hasOwnProperty(n)&&(e.prototype[n]=t[n])};t.exports=n},{}],132:[function(e,t){"use strict";function n(e){r(e&&!/[^a-z0-9_]/.test(e))}var r=e("./invariant");t.exports=n},{"./invariant":118}],133:[function(e,t){"use strict";function n(e){return o(r.isValidDescriptor(e)),e}var r=e("./ReactDescriptor"),o=e("./invariant");t.exports=n},{"./ReactDescriptor":49,"./invariant":118}],134:[function(e,t){"use strict";var n=e("./ExecutionEnvironment"),r=function(e,t){e.innerHTML=t};if(n.canUseDOM){var o=document.createElement("div");o.innerHTML=" ",""===o.innerHTML&&(r=function(e,t){if(e.parentNode&&e.parentNode.replaceChild(e,e),t.match(/^[ \r\n\t\f]/)||"<"===t[0]&&(-1!==t.indexOf("<noscript")||-1!==t.indexOf("<script")||-1!==t.indexOf("<style")||-1!==t.indexOf("<meta")||-1!==t.indexOf("<link"))){e.innerHTML=""+t;var n=e.firstChild;1===n.data.length?e.removeChild(n):n.deleteData(0,1)}else e.innerHTML=t})}t.exports=r},{"./ExecutionEnvironment":21}],135:[function(e,t){"use strict";function n(e,t){if(e===t)return!0;var n;for(n in e)if(e.hasOwnProperty(n)&&(!t.hasOwnProperty(n)||e[n]!==t[n]))return!1;for(n in t)if(t.hasOwnProperty(n)&&!e.hasOwnProperty(n))return!1;return!0}t.exports=n},{}],136:[function(e,t){"use strict";function n(e,t){return e&&t&&e.type===t.type&&(e.props&&e.props.key)===(t.props&&t.props.key)&&e._owner===t._owner?!0:!1}t.exports=n},{}],137:[function(e,t){function n(e){var t=e.length;if(r(!Array.isArray(e)&&("object"==typeof e||"function"==typeof e)),r("number"==typeof t),r(0===t||t-1 in e),e.hasOwnProperty)try{return Array.prototype.slice.call(e)}catch(n){}for(var o=Array(t),i=0;t>i;i++)o[i]=e[i];return o}var r=e("./invariant");t.exports=n},{"./invariant":118}],138:[function(e,t){"use strict";function n(e){return d[e]}function r(e,t){return e&&e.props&&null!=e.props.key?i(e.props.key):t.toString(36)}function o(e){return(""+e).replace(f,n)}function i(e){return"$"+o(e)}function a(e,t,n){return null==e?0:h(e,"",0,t,n)}var s=e("./ReactInstanceHandles"),u=e("./ReactTextComponent"),c=e("./invariant"),l=s.SEPARATOR,p=":",d={"=":"=0",".":"=1",":":"=2"},f=/[=.:]/g,h=function(e,t,n,o,a){var s=0;if(Array.isArray(e))for(var d=0;d<e.length;d++){var f=e[d],v=t+(t?p:l)+r(f,d),m=n+s;s+=h(f,v,m,o,a)}else{var g=typeof e,y=""===t,C=y?l+r(e,0):t;if(null==e||"boolean"===g)o(a,null,C,n),s=1;else if(e.type&&e.type.prototype&&e.type.prototype.mountComponentIntoNode)o(a,e,C,n),s=1;else if("object"===g){c(!e||1!==e.nodeType);for(var E in e)e.hasOwnProperty(E)&&(s+=h(e[E],t+(t?p:l)+i(E)+p+r(e[E],0),n+s,o,a))}else if("string"===g){var R=u(e);o(a,R,C,n),s+=1}else if("number"===g){var M=u(""+e);o(a,M,C,n),s+=1}}return s};t.exports=a},{"./ReactInstanceHandles":57,"./ReactTextComponent":73,"./invariant":118}],139:[function(e,t){"use strict";var n=e("./emptyFunction"),r=n;t.exports=r},{"./emptyFunction":100}]},{},[27])(27)});if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}

var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return!!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
    if (superClass && superClass.prototype && superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    var wrappedCtr = function() {
      var instance = ctr.apply(this, arguments) || this;
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return/^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return/^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2371";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__23811__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__23811 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__23811__delegate.call(this, args);
    };
    G__23811.cljs$lang$maxFixedArity = 0;
    G__23811.cljs$lang$applyTo = function(arglist__23812) {
      var args = cljs.core.seq(arglist__23812);
      return G__23811__delegate(args);
    };
    G__23811.cljs$core$IFn$_invoke$arity$variadic = G__23811__delegate;
    return G__23811;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.some_QMARK_ = function some_QMARK_(x) {
  return!(x == null);
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3665__auto__ = ty;
    if (cljs.core.truth_(and__3665__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3665__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4220__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4220__auto__)) {
    var s = temp__4220__auto__;
    return s;
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ty);
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4547__auto___23813 = len;
  var i_23814 = 0;
  while (true) {
    if (i_23814 < n__4547__auto___23813) {
      new_arr[i_23814] = arr[i_23814];
      var G__23815 = i_23814 + 1;
      i_23814 = G__23815;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__23816__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__23816 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__23816__delegate.call(this, array, i, idxs);
    };
    G__23816.cljs$lang$maxFixedArity = 2;
    G__23816.cljs$lang$applyTo = function(arglist__23817) {
      var array = cljs.core.first(arglist__23817);
      arglist__23817 = cljs.core.next(arglist__23817);
      var i = cljs.core.first(arglist__23817);
      var idxs = cljs.core.rest(arglist__23817);
      return G__23816__delegate(array, i, idxs);
    };
    G__23816.cljs$core$IFn$_invoke$arity$variadic = G__23816__delegate;
    return G__23816;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__23818__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__23818 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__23818__delegate.call(this, array, idx, idx2, idxv);
    };
    G__23818.cljs$lang$maxFixedArity = 3;
    G__23818.cljs$lang$applyTo = function(arglist__23819) {
      var array = cljs.core.first(arglist__23819);
      arglist__23819 = cljs.core.next(arglist__23819);
      var idx = cljs.core.first(arglist__23819);
      arglist__23819 = cljs.core.next(arglist__23819);
      var idx2 = cljs.core.first(arglist__23819);
      var idxv = cljs.core.rest(arglist__23819);
      return G__23818__delegate(array, idx, idx2, idxv);
    };
    G__23818.cljs$core$IFn$_invoke$arity$variadic = G__23818__delegate;
    return G__23818;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.Fn = function() {
  var obj23821 = {};
  return obj23821;
}();
cljs.core.IFn = function() {
  var obj23823 = {};
  return obj23823;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__3665__auto__ = this$;
      if (and__3665__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__3665__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4314__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3677__auto__ = cljs.core._invoke[goog.typeOf(x__4314__auto__)];
        if (or__3677__auto__) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = cljs.core._invoke["_"];
          if (or__3677__auto____$1) {
            return or__3677__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__3665__auto__ = this$;
      if (and__3665__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__3665__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4314__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3677__auto__ = cljs.core._invoke[goog.typeOf(x__4314__auto__)];
        if (or__3677__auto__) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = cljs.core._invoke["_"];
          if (or__3677__auto____$1) {
            return or__3677__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__3665__auto__ = this$;
      if (and__3665__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__3665__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4314__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3677__auto__ = cljs.core._invoke[goog.typeOf(x__4314__auto__)];
        if (or__3677__auto__) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = cljs.core._invoke["_"];
          if (or__3677__auto____$1) {
            return or__3677__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__3665__auto__ = this$;
      if (and__3665__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__3665__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4314__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3677__auto__ = cljs.core._invoke[goog.typeOf(x__4314__auto__)];
        if (or__3677__auto__) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = cljs.core._invoke["_"];
          if (or__3677__auto____$1) {
            return or__3677__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__3665__auto__ = this$;
      if (and__3665__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__3665__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4314__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3677__auto__ = cljs.core._invoke[goog.typeOf(x__4314__auto__)];
        if (or__3677__auto__) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = cljs.core._invoke["_"];
          if (or__3677__auto____$1) {
            return or__3677__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__3665__auto__ = this$;
      if (and__3665__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__3665__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4314__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3677__auto__ = cljs.core._invoke[goog.typeOf(x__4314__auto__)];
        if (or__3677__auto__) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = cljs.core._invoke["_"];
          if (or__3677__auto____$1) {
            return or__3677__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__3665__auto__ = this$;
      if (and__3665__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__3665__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4314__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3677__auto__ = cljs.core._invoke[goog.typeOf(x__4314__auto__)];
        if (or__3677__auto__) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = cljs.core._invoke["_"];
          if (or__3677__auto____$1) {
            return or__3677__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__3665__auto__ = this$;
      if (and__3665__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__3665__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4314__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3677__auto__ = cljs.core._invoke[goog.typeOf(x__4314__auto__)];
        if (or__3677__auto__) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = cljs.core._invoke["_"];
          if (or__3677__auto____$1) {
            return or__3677__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__3665__auto__ = this$;
      if (and__3665__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__3665__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4314__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3677__auto__ = cljs.core._invoke[goog.typeOf(x__4314__auto__)];
        if (or__3677__auto__) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = cljs.core._invoke["_"];
          if (or__3677__auto____$1) {
            return or__3677__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__3665__auto__ = this$;
      if (and__3665__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__3665__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4314__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3677__auto__ = cljs.core._invoke[goog.typeOf(x__4314__auto__)];
        if (or__3677__auto__) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = cljs.core._invoke["_"];
          if (or__3677__auto____$1) {
            return or__3677__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__3665__auto__ = this$;
      if (and__3665__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__3665__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4314__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3677__auto__ = cljs.core._invoke[goog.typeOf(x__4314__auto__)];
        if (or__3677__auto__) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = cljs.core._invoke["_"];
          if (or__3677__auto____$1) {
            return or__3677__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__3665__auto__ = this$;
      if (and__3665__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__3665__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4314__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3677__auto__ = cljs.core._invoke[goog.typeOf(x__4314__auto__)];
        if (or__3677__auto__) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = cljs.core._invoke["_"];
          if (or__3677__auto____$1) {
            return or__3677__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__3665__auto__ = this$;
      if (and__3665__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__3665__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4314__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3677__auto__ = cljs.core._invoke[goog.typeOf(x__4314__auto__)];
        if (or__3677__auto__) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = cljs.core._invoke["_"];
          if (or__3677__auto____$1) {
            return or__3677__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__3665__auto__ = this$;
      if (and__3665__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__3665__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4314__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3677__auto__ = cljs.core._invoke[goog.typeOf(x__4314__auto__)];
        if (or__3677__auto__) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = cljs.core._invoke["_"];
          if (or__3677__auto____$1) {
            return or__3677__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__3665__auto__ = this$;
      if (and__3665__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__3665__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4314__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3677__auto__ = cljs.core._invoke[goog.typeOf(x__4314__auto__)];
        if (or__3677__auto__) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = cljs.core._invoke["_"];
          if (or__3677__auto____$1) {
            return or__3677__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__3665__auto__ = this$;
      if (and__3665__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__3665__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4314__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3677__auto__ = cljs.core._invoke[goog.typeOf(x__4314__auto__)];
        if (or__3677__auto__) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = cljs.core._invoke["_"];
          if (or__3677__auto____$1) {
            return or__3677__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__3665__auto__ = this$;
      if (and__3665__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__3665__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4314__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3677__auto__ = cljs.core._invoke[goog.typeOf(x__4314__auto__)];
        if (or__3677__auto__) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = cljs.core._invoke["_"];
          if (or__3677__auto____$1) {
            return or__3677__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__3665__auto__ = this$;
      if (and__3665__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__3665__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4314__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3677__auto__ = cljs.core._invoke[goog.typeOf(x__4314__auto__)];
        if (or__3677__auto__) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = cljs.core._invoke["_"];
          if (or__3677__auto____$1) {
            return or__3677__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    if (function() {
      var and__3665__auto__ = this$;
      if (and__3665__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__3665__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    } else {
      var x__4314__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3677__auto__ = cljs.core._invoke[goog.typeOf(x__4314__auto__)];
        if (or__3677__auto__) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = cljs.core._invoke["_"];
          if (or__3677__auto____$1) {
            return or__3677__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    if (function() {
      var and__3665__auto__ = this$;
      if (and__3665__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__3665__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    } else {
      var x__4314__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3677__auto__ = cljs.core._invoke[goog.typeOf(x__4314__auto__)];
        if (or__3677__auto__) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = cljs.core._invoke["_"];
          if (or__3677__auto____$1) {
            return or__3677__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    if (function() {
      var and__3665__auto__ = this$;
      if (and__3665__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__3665__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    } else {
      var x__4314__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3677__auto__ = cljs.core._invoke[goog.typeOf(x__4314__auto__)];
        if (or__3677__auto__) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = cljs.core._invoke["_"];
          if (or__3677__auto____$1) {
            return or__3677__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    }
  };
  var _invoke__22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    if (function() {
      var and__3665__auto__ = this$;
      if (and__3665__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$22;
      } else {
        return and__3665__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    } else {
      var x__4314__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3677__auto__ = cljs.core._invoke[goog.typeOf(x__4314__auto__)];
        if (or__3677__auto__) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = cljs.core._invoke["_"];
          if (or__3677__auto____$1) {
            return or__3677__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return _invoke__22.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  _invoke.cljs$core$IFn$_invoke$arity$22 = _invoke__22;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj23825 = {};
  return obj23825;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__3665__auto__ = value;
    if (and__3665__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4314__auto__ = value == null ? null : value;
    return function() {
      var or__3677__auto__ = cljs.core._clone[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._clone["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj23827 = {};
  return obj23827;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__3665__auto__ = coll;
    if (and__3665__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4314__auto__ = coll == null ? null : coll;
    return function() {
      var or__3677__auto__ = cljs.core._count[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._count["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj23829 = {};
  return obj23829;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__3665__auto__ = coll;
    if (and__3665__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4314__auto__ = coll == null ? null : coll;
    return function() {
      var or__3677__auto__ = cljs.core._empty[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._empty["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj23831 = {};
  return obj23831;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__3665__auto__ = coll;
    if (and__3665__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4314__auto__ = coll == null ? null : coll;
    return function() {
      var or__3677__auto__ = cljs.core._conj[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._conj["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj23833 = {};
  return obj23833;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__3665__auto__ = coll;
      if (and__3665__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__3665__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4314__auto__ = coll == null ? null : coll;
      return function() {
        var or__3677__auto__ = cljs.core._nth[goog.typeOf(x__4314__auto__)];
        if (or__3677__auto__) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = cljs.core._nth["_"];
          if (or__3677__auto____$1) {
            return or__3677__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__3665__auto__ = coll;
      if (and__3665__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__3665__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4314__auto__ = coll == null ? null : coll;
      return function() {
        var or__3677__auto__ = cljs.core._nth[goog.typeOf(x__4314__auto__)];
        if (or__3677__auto__) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = cljs.core._nth["_"];
          if (or__3677__auto____$1) {
            return or__3677__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj23835 = {};
  return obj23835;
}();
cljs.core.ISeq = function() {
  var obj23837 = {};
  return obj23837;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__3665__auto__ = coll;
    if (and__3665__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4314__auto__ = coll == null ? null : coll;
    return function() {
      var or__3677__auto__ = cljs.core._first[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._first["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__3665__auto__ = coll;
    if (and__3665__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4314__auto__ = coll == null ? null : coll;
    return function() {
      var or__3677__auto__ = cljs.core._rest[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._rest["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj23839 = {};
  return obj23839;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__3665__auto__ = coll;
    if (and__3665__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4314__auto__ = coll == null ? null : coll;
    return function() {
      var or__3677__auto__ = cljs.core._next[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._next["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj23841 = {};
  return obj23841;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__3665__auto__ = o;
      if (and__3665__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__3665__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4314__auto__ = o == null ? null : o;
      return function() {
        var or__3677__auto__ = cljs.core._lookup[goog.typeOf(x__4314__auto__)];
        if (or__3677__auto__) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = cljs.core._lookup["_"];
          if (or__3677__auto____$1) {
            return or__3677__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__3665__auto__ = o;
      if (and__3665__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__3665__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4314__auto__ = o == null ? null : o;
      return function() {
        var or__3677__auto__ = cljs.core._lookup[goog.typeOf(x__4314__auto__)];
        if (or__3677__auto__) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = cljs.core._lookup["_"];
          if (or__3677__auto____$1) {
            return or__3677__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj23843 = {};
  return obj23843;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__3665__auto__ = coll;
    if (and__3665__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4314__auto__ = coll == null ? null : coll;
    return function() {
      var or__3677__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__3665__auto__ = coll;
    if (and__3665__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4314__auto__ = coll == null ? null : coll;
    return function() {
      var or__3677__auto__ = cljs.core._assoc[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._assoc["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj23845 = {};
  return obj23845;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__3665__auto__ = coll;
    if (and__3665__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4314__auto__ = coll == null ? null : coll;
    return function() {
      var or__3677__auto__ = cljs.core._dissoc[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._dissoc["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj23847 = {};
  return obj23847;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__3665__auto__ = coll;
    if (and__3665__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4314__auto__ = coll == null ? null : coll;
    return function() {
      var or__3677__auto__ = cljs.core._key[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._key["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__3665__auto__ = coll;
    if (and__3665__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4314__auto__ = coll == null ? null : coll;
    return function() {
      var or__3677__auto__ = cljs.core._val[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._val["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj23849 = {};
  return obj23849;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__3665__auto__ = coll;
    if (and__3665__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4314__auto__ = coll == null ? null : coll;
    return function() {
      var or__3677__auto__ = cljs.core._disjoin[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._disjoin["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj23851 = {};
  return obj23851;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__3665__auto__ = coll;
    if (and__3665__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4314__auto__ = coll == null ? null : coll;
    return function() {
      var or__3677__auto__ = cljs.core._peek[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._peek["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__3665__auto__ = coll;
    if (and__3665__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4314__auto__ = coll == null ? null : coll;
    return function() {
      var or__3677__auto__ = cljs.core._pop[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._pop["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj23853 = {};
  return obj23853;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__3665__auto__ = coll;
    if (and__3665__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4314__auto__ = coll == null ? null : coll;
    return function() {
      var or__3677__auto__ = cljs.core._assoc_n[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._assoc_n["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj23855 = {};
  return obj23855;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__3665__auto__ = o;
    if (and__3665__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4314__auto__ = o == null ? null : o;
    return function() {
      var or__3677__auto__ = cljs.core._deref[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._deref["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj23857 = {};
  return obj23857;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__3665__auto__ = o;
    if (and__3665__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4314__auto__ = o == null ? null : o;
    return function() {
      var or__3677__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj23859 = {};
  return obj23859;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__3665__auto__ = o;
    if (and__3665__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4314__auto__ = o == null ? null : o;
    return function() {
      var or__3677__auto__ = cljs.core._meta[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._meta["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj23861 = {};
  return obj23861;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__3665__auto__ = o;
    if (and__3665__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4314__auto__ = o == null ? null : o;
    return function() {
      var or__3677__auto__ = cljs.core._with_meta[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._with_meta["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj23863 = {};
  return obj23863;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__3665__auto__ = coll;
      if (and__3665__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__3665__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4314__auto__ = coll == null ? null : coll;
      return function() {
        var or__3677__auto__ = cljs.core._reduce[goog.typeOf(x__4314__auto__)];
        if (or__3677__auto__) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = cljs.core._reduce["_"];
          if (or__3677__auto____$1) {
            return or__3677__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__3665__auto__ = coll;
      if (and__3665__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__3665__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4314__auto__ = coll == null ? null : coll;
      return function() {
        var or__3677__auto__ = cljs.core._reduce[goog.typeOf(x__4314__auto__)];
        if (or__3677__auto__) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = cljs.core._reduce["_"];
          if (or__3677__auto____$1) {
            return or__3677__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj23865 = {};
  return obj23865;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__3665__auto__ = coll;
    if (and__3665__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4314__auto__ = coll == null ? null : coll;
    return function() {
      var or__3677__auto__ = cljs.core._kv_reduce[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj23867 = {};
  return obj23867;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__3665__auto__ = o;
    if (and__3665__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4314__auto__ = o == null ? null : o;
    return function() {
      var or__3677__auto__ = cljs.core._equiv[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._equiv["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj23869 = {};
  return obj23869;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__3665__auto__ = o;
    if (and__3665__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4314__auto__ = o == null ? null : o;
    return function() {
      var or__3677__auto__ = cljs.core._hash[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._hash["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj23871 = {};
  return obj23871;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__3665__auto__ = o;
    if (and__3665__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4314__auto__ = o == null ? null : o;
    return function() {
      var or__3677__auto__ = cljs.core._seq[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._seq["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj23873 = {};
  return obj23873;
}();
cljs.core.IList = function() {
  var obj23875 = {};
  return obj23875;
}();
cljs.core.IRecord = function() {
  var obj23877 = {};
  return obj23877;
}();
cljs.core.IReversible = function() {
  var obj23879 = {};
  return obj23879;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__3665__auto__ = coll;
    if (and__3665__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4314__auto__ = coll == null ? null : coll;
    return function() {
      var or__3677__auto__ = cljs.core._rseq[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._rseq["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj23881 = {};
  return obj23881;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__3665__auto__ = coll;
    if (and__3665__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4314__auto__ = coll == null ? null : coll;
    return function() {
      var or__3677__auto__ = cljs.core._sorted_seq[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__3665__auto__ = coll;
    if (and__3665__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4314__auto__ = coll == null ? null : coll;
    return function() {
      var or__3677__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__3665__auto__ = coll;
    if (and__3665__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4314__auto__ = coll == null ? null : coll;
    return function() {
      var or__3677__auto__ = cljs.core._entry_key[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._entry_key["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__3665__auto__ = coll;
    if (and__3665__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4314__auto__ = coll == null ? null : coll;
    return function() {
      var or__3677__auto__ = cljs.core._comparator[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._comparator["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj23883 = {};
  return obj23883;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__3665__auto__ = writer;
    if (and__3665__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4314__auto__ = writer == null ? null : writer;
    return function() {
      var or__3677__auto__ = cljs.core._write[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._write["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__3665__auto__ = writer;
    if (and__3665__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4314__auto__ = writer == null ? null : writer;
    return function() {
      var or__3677__auto__ = cljs.core._flush[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._flush["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj23885 = {};
  return obj23885;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__3665__auto__ = o;
    if (and__3665__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4314__auto__ = o == null ? null : o;
    return function() {
      var or__3677__auto__ = cljs.core._pr_writer[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._pr_writer["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj23887 = {};
  return obj23887;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__3665__auto__ = d;
    if (and__3665__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4314__auto__ = d == null ? null : d;
    return function() {
      var or__3677__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj23889 = {};
  return obj23889;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__3665__auto__ = this$;
    if (and__3665__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4314__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3677__auto__ = cljs.core._notify_watches[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._notify_watches["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__3665__auto__ = this$;
    if (and__3665__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4314__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3677__auto__ = cljs.core._add_watch[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._add_watch["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__3665__auto__ = this$;
    if (and__3665__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4314__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3677__auto__ = cljs.core._remove_watch[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._remove_watch["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj23891 = {};
  return obj23891;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__3665__auto__ = coll;
    if (and__3665__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4314__auto__ = coll == null ? null : coll;
    return function() {
      var or__3677__auto__ = cljs.core._as_transient[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._as_transient["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj23893 = {};
  return obj23893;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__3665__auto__ = tcoll;
    if (and__3665__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4314__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3677__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__3665__auto__ = tcoll;
    if (and__3665__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4314__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3677__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj23895 = {};
  return obj23895;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__3665__auto__ = tcoll;
    if (and__3665__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4314__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3677__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj23897 = {};
  return obj23897;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__3665__auto__ = tcoll;
    if (and__3665__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4314__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3677__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj23899 = {};
  return obj23899;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__3665__auto__ = tcoll;
    if (and__3665__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4314__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3677__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__3665__auto__ = tcoll;
    if (and__3665__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4314__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3677__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj23901 = {};
  return obj23901;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__3665__auto__ = tcoll;
    if (and__3665__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4314__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3677__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj23903 = {};
  return obj23903;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__3665__auto__ = x;
    if (and__3665__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4314__auto__ = x == null ? null : x;
    return function() {
      var or__3677__auto__ = cljs.core._compare[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._compare["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj23905 = {};
  return obj23905;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__3665__auto__ = coll;
    if (and__3665__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4314__auto__ = coll == null ? null : coll;
    return function() {
      var or__3677__auto__ = cljs.core._drop_first[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._drop_first["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj23907 = {};
  return obj23907;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__3665__auto__ = coll;
    if (and__3665__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4314__auto__ = coll == null ? null : coll;
    return function() {
      var or__3677__auto__ = cljs.core._chunked_first[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._chunked_first["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__3665__auto__ = coll;
    if (and__3665__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4314__auto__ = coll == null ? null : coll;
    return function() {
      var or__3677__auto__ = cljs.core._chunked_rest[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj23909 = {};
  return obj23909;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__3665__auto__ = coll;
    if (and__3665__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4314__auto__ = coll == null ? null : coll;
    return function() {
      var or__3677__auto__ = cljs.core._chunked_next[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._chunked_next["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj23911 = {};
  return obj23911;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__3665__auto__ = x;
    if (and__3665__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4314__auto__ = x == null ? null : x;
    return function() {
      var or__3677__auto__ = cljs.core._name[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._name["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__3665__auto__ = x;
    if (and__3665__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4314__auto__ = x == null ? null : x;
    return function() {
      var or__3677__auto__ = cljs.core._namespace[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._namespace["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.IAtom = function() {
  var obj23913 = {};
  return obj23913;
}();
cljs.core.IReset = function() {
  var obj23915 = {};
  return obj23915;
}();
cljs.core._reset_BANG_ = function _reset_BANG_(o, new_value) {
  if (function() {
    var and__3665__auto__ = o;
    if (and__3665__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4314__auto__ = o == null ? null : o;
    return function() {
      var or__3677__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj23917 = {};
  return obj23917;
}();
cljs.core._swap_BANG_ = function() {
  var _swap_BANG_ = null;
  var _swap_BANG___2 = function(o, f) {
    if (function() {
      var and__3665__auto__ = o;
      if (and__3665__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__3665__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__4314__auto__ = o == null ? null : o;
      return function() {
        var or__3677__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4314__auto__)];
        if (or__3677__auto__) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3677__auto____$1) {
            return or__3677__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var _swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__3665__auto__ = o;
      if (and__3665__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__3665__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__4314__auto__ = o == null ? null : o;
      return function() {
        var or__3677__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4314__auto__)];
        if (or__3677__auto__) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3677__auto____$1) {
            return or__3677__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var _swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__3665__auto__ = o;
      if (and__3665__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__3665__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__4314__auto__ = o == null ? null : o;
      return function() {
        var or__3677__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4314__auto__)];
        if (or__3677__auto__) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3677__auto____$1) {
            return or__3677__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var _swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__3665__auto__ = o;
      if (and__3665__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__3665__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__4314__auto__ = o == null ? null : o;
      return function() {
        var or__3677__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4314__auto__)];
        if (or__3677__auto__) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3677__auto____$1) {
            return or__3677__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  _swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return _swap_BANG___2.call(this, o, f);
      case 3:
        return _swap_BANG___3.call(this, o, f, a);
      case 4:
        return _swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return _swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _swap_BANG_.cljs$core$IFn$_invoke$arity$2 = _swap_BANG___2;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$3 = _swap_BANG___3;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$4 = _swap_BANG___4;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$5 = _swap_BANG___5;
  return _swap_BANG_;
}();
cljs.core.IIterable = function() {
  var obj23919 = {};
  return obj23919;
}();
cljs.core._iterator = function _iterator(coll) {
  if (function() {
    var and__3665__auto__ = coll;
    if (and__3665__auto__) {
      return coll.cljs$core$IIterable$_iterator$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__4314__auto__ = coll == null ? null : coll;
    return function() {
      var or__3677__auto__ = cljs.core._iterator[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._iterator["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IIterable.-iterator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
};
cljs.core.int_rotate_left = function int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(Math.imul.call(null, 4294967295, 5) === 0)) {
  cljs.core.imul = function imul(a, b) {
    return Math.imul.call(null, a, b);
  };
} else {
  cljs.core.imul = function imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353;
cljs.core.m3_C2 = 461845907;
cljs.core.m3_mix_K1 = function m3_mix_K1(k1) {
  return cljs.core.imul.call(null, cljs.core.int_rotate_left.call(null, cljs.core.imul.call(null, k1, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function m3_mix_H1(h1, k1) {
  return cljs.core.imul.call(null, cljs.core.int_rotate_left.call(null, h1 ^ k1, 13), 5) + 3864292196;
};
cljs.core.m3_fmix = function m3_fmix(h1, len) {
  var h1__$1 = h1;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul.call(null, h1__$3, 2246822507);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul.call(null, h1__$5, 3266489909);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1.call(null, in$);
    var h1 = cljs.core.m3_mix_H1.call(null, cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix.call(null, h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__23920 = i + 2;
        var G__23921 = cljs.core.m3_mix_H1.call(null, h1, cljs.core.m3_mix_K1.call(null, in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__23920;
        h1 = G__23921;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1.call(null, in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix.call(null, h1__$1, cljs.core.imul.call(null, 2, in$.length));
};
cljs.core.string_hash_cache = function() {
  var obj23923 = {};
  return obj23923;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__23924 = i + 1;
          var G__23925 = cljs.core.imul.call(null, 31, hash) + s.charCodeAt(i);
          i = G__23924;
          hash = G__23925;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_.call(null, k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj23929 = {};
      return obj23929;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__23931 = o;
    if (G__23931) {
      var bit__4334__auto__ = G__23931.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4334__auto__ || G__23931.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor.call(null, o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int.call(null, cljs.core.hash_string.call(null, o));
          } else {
            if (o == null) {
              return 0;
            } else {
              return cljs.core._hash.call(null, o);
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.m3_hash_unencoded_chars.call(null, sym.name), cljs.core.hash_string.call(null, sym.ns));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3665__auto__ = cljs.core.not.call(null, a.ns);
      if (and__3665__auto__) {
        return b.ns;
      } else {
        return and__3665__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        return cljs.core.compare.call(null, a.name, b.name);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/Symbol");
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__4088__auto__ = self__._hash;
  if (!(h__4088__auto__ == null)) {
    return h__4088__auto__;
  } else {
    var h__4088__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__4088__auto____$1;
    return h__4088__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__23933 = null;
  var G__23933__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__23933__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__23933 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__23933__2.call(this, self__, coll);
      case 3:
        return G__23933__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__23933.cljs$core$IFn$_invoke$arity$2 = G__23933__2;
  G__23933.cljs$core$IFn$_invoke$arity$3 = G__23933__3;
  return G__23933;
}();
cljs.core.Symbol.prototype.apply = function(self__, args23932) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args23932)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns) + "/" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.iterable_QMARK_ = function iterable_QMARK_(x) {
  var G__23935 = x;
  if (G__23935) {
    var bit__4341__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3677__auto__ = bit__4341__auto__;
      if (cljs.core.truth_(or__3677__auto__)) {
        return or__3677__auto__;
      } else {
        return G__23935.cljs$core$IIterable$;
      }
    }())) {
      return true;
    } else {
      if (!G__23935.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIterable, G__23935);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIterable, G__23935);
  }
};
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.cloneable_QMARK_ = function cloneable_QMARK_(value) {
  var G__23937 = value;
  if (G__23937) {
    var bit__4341__auto__ = G__23937.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4341__auto__ || G__23937.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__23937.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__23937);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__23937);
  }
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__23939 = coll;
      if (G__23939) {
        var bit__4334__auto__ = G__23939.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4334__auto__ || G__23939.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            throw new Error("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll) + " is not ISeqable");
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__23941 = coll;
      if (G__23941) {
        var bit__4334__auto__ = G__23941.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4334__auto__ || G__23941.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__23943 = coll;
      if (G__23943) {
        var bit__4334__auto__ = G__23943.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4334__auto__ || G__23943.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__23945 = coll;
      if (G__23945) {
        var bit__4334__auto__ = G__23945.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4334__auto__ || G__23945.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__23946__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__23947 = y;
            var G__23948 = cljs.core.first.call(null, more);
            var G__23949 = cljs.core.next.call(null, more);
            x = G__23947;
            y = G__23948;
            more = G__23949;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__23946 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__23946__delegate.call(this, x, y, more);
    };
    G__23946.cljs$lang$maxFixedArity = 2;
    G__23946.cljs$lang$applyTo = function(arglist__23950) {
      var x = cljs.core.first(arglist__23950);
      arglist__23950 = cljs.core.next(arglist__23950);
      var y = cljs.core.first(arglist__23950);
      var more = cljs.core.rest(arglist__23950);
      return G__23946__delegate(x, y, more);
    };
    G__23946.cljs$core$IFn$_invoke$arity$variadic = G__23946__delegate;
    return G__23946;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.mix_collection_hash = function mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1.call(null, hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1.call(null, h1, k1);
  return cljs.core.m3_fmix.call(null, h1__$1, count);
};
cljs.core.hash_ordered_coll = function hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__23951 = n + 1;
      var G__23952 = cljs.core.imul.call(null, 31, hash_code) + cljs.core.hash.call(null, cljs.core.first.call(null, coll__$1)) | 0;
      var G__23953 = cljs.core.next.call(null, coll__$1);
      n = G__23951;
      hash_code = G__23952;
      coll__$1 = G__23953;
      continue;
    } else {
      return cljs.core.mix_collection_hash.call(null, hash_code, n);
    }
    break;
  }
};
cljs.core.hash_unordered_coll = function hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__23954 = n + 1;
      var G__23955 = hash_code + cljs.core.hash.call(null, cljs.core.first.call(null, coll__$1)) | 0;
      var G__23956 = cljs.core.next.call(null, coll__$1);
      n = G__23954;
      hash_code = G__23955;
      coll__$1 = G__23956;
      continue;
    } else {
      return cljs.core.mix_collection_hash.call(null, hash_code, n);
    }
    break;
  }
};
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/Reduced");
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__23957 = nval;
            var G__23958 = n + 1;
            val = G__23957;
            n = G__23958;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__23959 = nval;
          var G__23960 = n + 1;
          val__$1 = G__23959;
          n = G__23960;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__23961 = nval;
          var G__23962 = n + 1;
          val__$1 = G__23961;
          n = G__23962;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__23963 = nval;
            var G__23964 = n + 1;
            val = G__23963;
            n = G__23964;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__23965 = nval;
          var G__23966 = n + 1;
          val__$1 = G__23965;
          n = G__23966;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__23967 = nval;
          var G__23968 = n + 1;
          val__$1 = G__23967;
          n = G__23968;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__23970 = x;
  if (G__23970) {
    var bit__4341__auto__ = G__23970.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4341__auto__ || G__23970.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__23970.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__23970);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__23970);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__23972 = x;
  if (G__23972) {
    var bit__4341__auto__ = G__23972.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4341__auto__ || G__23972.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__23972.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__23972);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__23972);
  }
};
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.__GT_IndexedSeqIterator = function __GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/IndexedSeq");
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/RSeq");
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__23973 = sn;
      s = G__23973;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__0 = function() {
    return cljs.core.PersistentVector.EMPTY;
  };
  var conj__1 = function(coll) {
    return coll;
  };
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__23974__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__23975 = conj.call(null, coll, x);
          var G__23976 = cljs.core.first.call(null, xs);
          var G__23977 = cljs.core.next.call(null, xs);
          coll = G__23975;
          x = G__23976;
          xs = G__23977;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__23974 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__23974__delegate.call(this, coll, x, xs);
    };
    G__23974.cljs$lang$maxFixedArity = 2;
    G__23974.cljs$lang$applyTo = function(arglist__23978) {
      var coll = cljs.core.first(arglist__23978);
      arglist__23978 = cljs.core.next(arglist__23978);
      var x = cljs.core.first(arglist__23978);
      var xs = cljs.core.rest(arglist__23978);
      return G__23974__delegate(coll, x, xs);
    };
    G__23974.cljs$core$IFn$_invoke$arity$variadic = G__23974__delegate;
    return G__23974;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 0:
        return conj__0.call(this);
      case 1:
        return conj__1.call(this, coll);
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$0 = conj__0;
  conj.cljs$core$IFn$_invoke$arity$1 = conj__1;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__23979 = cljs.core.next.call(null, s);
      var G__23980 = acc + 1;
      s = G__23979;
      acc = G__23980;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__23982 = coll;
      if (G__23982) {
        var bit__4334__auto__ = G__23982.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4334__auto__ || G__23982.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            return cljs.core.accumulating_seq_count.call(null, coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__23983 = cljs.core.next.call(null, coll);
              var G__23984 = n - 1;
              coll = G__23983;
              n = G__23984;
              continue;
            } else {
              throw new Error("Index out of bounds");
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__23985 = cljs.core.next.call(null, coll);
              var G__23986 = n - 1;
              var G__23987 = not_found;
              coll = G__23985;
              n = G__23986;
              not_found = G__23987;
              continue;
            } else {
              return not_found;
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number");
    } else {
      if (coll == null) {
        return coll;
      } else {
        if (function() {
          var G__23992 = coll;
          if (G__23992) {
            var bit__4334__auto__ = G__23992.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4334__auto__ || G__23992.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return null;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__23993 = coll;
                  if (G__23993) {
                    var bit__4341__auto__ = G__23993.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4341__auto__ || G__23993.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__23993.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__23993);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__23993);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  throw new Error("nth not supported on this type " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll))));
                }
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number.");
    } else {
      if (coll == null) {
        return not_found;
      } else {
        if (function() {
          var G__23994 = coll;
          if (G__23994) {
            var bit__4334__auto__ = G__23994.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4334__auto__ || G__23994.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n, not_found);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return not_found;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__23995 = coll;
                  if (G__23995) {
                    var bit__4341__auto__ = G__23995.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4341__auto__ || G__23995.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__23995.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__23995);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__23995);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  throw new Error("nth not supported on this type " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll))));
                }
              }
            }
          }
        }
      }
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__23998 = o;
        if (G__23998) {
          var bit__4334__auto__ = G__23998.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4334__auto__ || G__23998.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__23999 = o;
        if (G__23999) {
          var bit__4334__auto__ = G__23999.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4334__auto__ || G__23999.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              return not_found;
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays([k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__24000__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__24001 = ret;
          var G__24002 = cljs.core.first.call(null, kvs);
          var G__24003 = cljs.core.second.call(null, kvs);
          var G__24004 = cljs.core.nnext.call(null, kvs);
          coll = G__24001;
          k = G__24002;
          v = G__24003;
          kvs = G__24004;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__24000 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__24000__delegate.call(this, coll, k, v, kvs);
    };
    G__24000.cljs$lang$maxFixedArity = 3;
    G__24000.cljs$lang$applyTo = function(arglist__24005) {
      var coll = cljs.core.first(arglist__24005);
      arglist__24005 = cljs.core.next(arglist__24005);
      var k = cljs.core.first(arglist__24005);
      arglist__24005 = cljs.core.next(arglist__24005);
      var v = cljs.core.first(arglist__24005);
      var kvs = cljs.core.rest(arglist__24005);
      return G__24000__delegate(coll, k, v, kvs);
    };
    G__24000.cljs$core$IFn$_invoke$arity$variadic = G__24000__delegate;
    return G__24000;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__24006__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__24007 = ret;
            var G__24008 = cljs.core.first.call(null, ks);
            var G__24009 = cljs.core.next.call(null, ks);
            coll = G__24007;
            k = G__24008;
            ks = G__24009;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__24006 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24006__delegate.call(this, coll, k, ks);
    };
    G__24006.cljs$lang$maxFixedArity = 2;
    G__24006.cljs$lang$applyTo = function(arglist__24010) {
      var coll = cljs.core.first(arglist__24010);
      arglist__24010 = cljs.core.next(arglist__24010);
      var k = cljs.core.first(arglist__24010);
      var ks = cljs.core.rest(arglist__24010);
      return G__24006__delegate(coll, k, ks);
    };
    G__24006.cljs$core$IFn$_invoke$arity$variadic = G__24006__delegate;
    return G__24006;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3677__auto__ = goog.isFunction(f);
  if (or__3677__auto__) {
    return or__3677__auto__;
  } else {
    var G__24014 = f;
    if (G__24014) {
      var bit__4341__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3677__auto____$1 = bit__4341__auto__;
        if (cljs.core.truth_(or__3677__auto____$1)) {
          return or__3677__auto____$1;
        } else {
          return G__24014.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__24014.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__24014);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__24014);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/MetaFn");
};
cljs.core.MetaFn.prototype.call = function() {
  var G__24016 = null;
  var G__24016__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null);
  };
  var G__24016__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a);
  };
  var G__24016__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b);
  };
  var G__24016__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c);
  };
  var G__24016__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d);
  };
  var G__24016__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e);
  };
  var G__24016__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f);
  };
  var G__24016__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g);
  };
  var G__24016__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__24016__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__24016__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__24016__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__24016__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__24016__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__24016__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__24016__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__24016__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__24016__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__24016__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__24016__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__24016__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__24016__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__24016 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__24016__1.call(this, self__);
      case 2:
        return G__24016__2.call(this, self__, a);
      case 3:
        return G__24016__3.call(this, self__, a, b);
      case 4:
        return G__24016__4.call(this, self__, a, b, c);
      case 5:
        return G__24016__5.call(this, self__, a, b, c, d);
      case 6:
        return G__24016__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__24016__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__24016__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__24016__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__24016__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__24016__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__24016__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__24016__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__24016__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__24016__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__24016__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__24016__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__24016__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__24016__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__24016__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__24016__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__24016__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__24016.cljs$core$IFn$_invoke$arity$1 = G__24016__1;
  G__24016.cljs$core$IFn$_invoke$arity$2 = G__24016__2;
  G__24016.cljs$core$IFn$_invoke$arity$3 = G__24016__3;
  G__24016.cljs$core$IFn$_invoke$arity$4 = G__24016__4;
  G__24016.cljs$core$IFn$_invoke$arity$5 = G__24016__5;
  G__24016.cljs$core$IFn$_invoke$arity$6 = G__24016__6;
  G__24016.cljs$core$IFn$_invoke$arity$7 = G__24016__7;
  G__24016.cljs$core$IFn$_invoke$arity$8 = G__24016__8;
  G__24016.cljs$core$IFn$_invoke$arity$9 = G__24016__9;
  G__24016.cljs$core$IFn$_invoke$arity$10 = G__24016__10;
  G__24016.cljs$core$IFn$_invoke$arity$11 = G__24016__11;
  G__24016.cljs$core$IFn$_invoke$arity$12 = G__24016__12;
  G__24016.cljs$core$IFn$_invoke$arity$13 = G__24016__13;
  G__24016.cljs$core$IFn$_invoke$arity$14 = G__24016__14;
  G__24016.cljs$core$IFn$_invoke$arity$15 = G__24016__15;
  G__24016.cljs$core$IFn$_invoke$arity$16 = G__24016__16;
  G__24016.cljs$core$IFn$_invoke$arity$17 = G__24016__17;
  G__24016.cljs$core$IFn$_invoke$arity$18 = G__24016__18;
  G__24016.cljs$core$IFn$_invoke$arity$19 = G__24016__19;
  G__24016.cljs$core$IFn$_invoke$arity$20 = G__24016__20;
  G__24016.cljs$core$IFn$_invoke$arity$21 = G__24016__21;
  G__24016.cljs$core$IFn$_invoke$arity$22 = G__24016__22;
  return G__24016;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args24015) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args24015)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  return cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.__GT_MetaFn = function __GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__24020 = o;
    if (G__24020) {
      var bit__4341__auto__ = G__24020.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4341__auto__ || G__24020.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__24020.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__24020);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__24020);
    }
  }()) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__3665__auto__ = !(o == null);
    if (and__3665__auto__) {
      var G__24024 = o;
      if (G__24024) {
        var bit__4341__auto__ = G__24024.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4341__auto__ || G__24024.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__24024.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__24024);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__24024);
      }
    } else {
      return and__3665__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__24025__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__24026 = ret;
            var G__24027 = cljs.core.first.call(null, ks);
            var G__24028 = cljs.core.next.call(null, ks);
            coll = G__24026;
            k = G__24027;
            ks = G__24028;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__24025 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24025__delegate.call(this, coll, k, ks);
    };
    G__24025.cljs$lang$maxFixedArity = 2;
    G__24025.cljs$lang$applyTo = function(arglist__24029) {
      var coll = cljs.core.first(arglist__24029);
      arglist__24029 = cljs.core.next(arglist__24029);
      var k = cljs.core.first(arglist__24029);
      var ks = cljs.core.rest(arglist__24029);
      return G__24025__delegate(coll, k, ks);
    };
    G__24025.cljs$core$IFn$_invoke$arity$variadic = G__24025__delegate;
    return G__24025;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__24031 = x;
    if (G__24031) {
      var bit__4341__auto__ = G__24031.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4341__auto__ || G__24031.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__24031.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__24031);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__24031);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__24033 = x;
    if (G__24033) {
      var bit__4341__auto__ = G__24033.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4341__auto__ || G__24033.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__24033.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__24033);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__24033);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__24035 = x;
  if (G__24035) {
    var bit__4341__auto__ = G__24035.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4341__auto__ || G__24035.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__24035.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__24035);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__24035);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__24037 = x;
  if (G__24037) {
    var bit__4341__auto__ = G__24037.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4341__auto__ || G__24037.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__24037.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__24037);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__24037);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__24039 = x;
  if (G__24039) {
    var bit__4341__auto__ = G__24039.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4341__auto__ || G__24039.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__24039.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__24039);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__24039);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__24041 = x;
  if (G__24041) {
    var bit__4341__auto__ = G__24041.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4341__auto__ || G__24041.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__24041.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__24041);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__24041);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__24043 = x;
    if (G__24043) {
      var bit__4341__auto__ = G__24043.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4341__auto__ || G__24043.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__24043.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__24043);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__24043);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__24045 = x;
  if (G__24045) {
    var bit__4341__auto__ = G__24045.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4341__auto__ || G__24045.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__24045.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__24045);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__24045);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__24047 = x;
  if (G__24047) {
    var bit__4334__auto__ = G__24047.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4334__auto__ || G__24047.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj24051 = {};
    return obj24051;
  };
  var js_obj__1 = function() {
    var G__24052__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__24052 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__24052__delegate.call(this, keyvals);
    };
    G__24052.cljs$lang$maxFixedArity = 0;
    G__24052.cljs$lang$applyTo = function(arglist__24053) {
      var keyvals = cljs.core.seq(arglist__24053);
      return G__24052__delegate(keyvals);
    };
    G__24052.cljs$core$IFn$_invoke$arity$variadic = G__24052__delegate;
    return G__24052;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(keys));
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__24054 = i__$1 + 1;
      var G__24055 = j__$1 + 1;
      var G__24056 = len__$1 - 1;
      i__$1 = G__24054;
      j__$1 = G__24055;
      len__$1 = G__24056;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__24057 = i__$1 - 1;
      var G__24058 = j__$1 - 1;
      var G__24059 = len__$1 - 1;
      i__$1 = G__24057;
      j__$1 = G__24058;
      len__$1 = G__24059;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj24061 = {};
  return obj24061;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__24063 = s;
    if (G__24063) {
      var bit__4341__auto__ = G__24063.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4341__auto__ || G__24063.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__24063.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__24063);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__24063);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__24065 = s;
  if (G__24065) {
    var bit__4341__auto__ = G__24065.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4341__auto__ || G__24065.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__24065.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__24065);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__24065);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3677__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__3677__auto__) {
    return or__3677__auto__;
  } else {
    var G__24069 = f;
    if (G__24069) {
      var bit__4341__auto__ = G__24069.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4341__auto__ || G__24069.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__24069.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__24069);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__24069);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && !isNaN(n) && !(n === Infinity) && parseFloat(n) === parseInt(n, 10);
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__24070__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__24071 = cljs.core.conj.call(null, s, x__$1);
              var G__24072 = etc;
              s = G__24071;
              xs = G__24072;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__24070 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24070__delegate.call(this, x, y, more);
    };
    G__24070.cljs$lang$maxFixedArity = 2;
    G__24070.cljs$lang$applyTo = function(arglist__24073) {
      var x = cljs.core.first(arglist__24073);
      arglist__24073 = cljs.core.next(arglist__24073);
      var y = cljs.core.first(arglist__24073);
      var more = cljs.core.rest(arglist__24073);
      return G__24070__delegate(x, y, more);
    };
    G__24070.cljs$core$IFn$_invoke$arity$variadic = G__24070__delegate;
    return G__24070;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__3677__auto__ = cljs.core.seq.call(null, coll);
    if (or__3677__auto__) {
      return or__3677__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__24075 = x;
            if (G__24075) {
              var bit__4334__auto__ = G__24075.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4334__auto__ || G__24075.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          throw new Error("compare on non-nil objects of different types");
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        return compare_indexed.call(null, xs, ys, xl, 0);
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__24076 = xs;
        var G__24077 = ys;
        var G__24078 = len;
        var G__24079 = n + 1;
        xs = G__24076;
        ys = G__24077;
        len = G__24078;
        n = G__24079;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4220__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4220__auto__) {
      var s = temp__4220__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__24080 = nval;
          var G__24081 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__24080;
          coll__$1 = G__24081;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__24084 = coll;
      if (G__24084) {
        var bit__4334__auto__ = G__24084.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4334__auto__ || G__24084.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            return cljs.core.seq_reduce.call(null, f, coll);
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__24085 = coll;
      if (G__24085) {
        var bit__4334__auto__ = G__24085.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4334__auto__ || G__24085.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            return cljs.core.seq_reduce.call(null, f, val, coll);
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.completing = function() {
  var completing = null;
  var completing__1 = function(f) {
    return completing.call(null, f, cljs.core.identity);
  };
  var completing__2 = function(f, cf) {
    return function() {
      var G__24086 = null;
      var G__24086__0 = function() {
        return f.call(null);
      };
      var G__24086__1 = function(x) {
        return cf.call(null, x);
      };
      var G__24086__2 = function(x, y) {
        return f.call(null, x, y);
      };
      G__24086 = function(x, y) {
        switch(arguments.length) {
          case 0:
            return G__24086__0.call(this);
          case 1:
            return G__24086__1.call(this, x);
          case 2:
            return G__24086__2.call(this, x, y);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__24086.cljs$core$IFn$_invoke$arity$0 = G__24086__0;
      G__24086.cljs$core$IFn$_invoke$arity$1 = G__24086__1;
      G__24086.cljs$core$IFn$_invoke$arity$2 = G__24086__2;
      return G__24086;
    }();
  };
  completing = function(f, cf) {
    switch(arguments.length) {
      case 1:
        return completing__1.call(this, f);
      case 2:
        return completing__2.call(this, f, cf);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  completing.cljs$core$IFn$_invoke$arity$1 = completing__1;
  completing.cljs$core$IFn$_invoke$arity$2 = completing__2;
  return completing;
}();
cljs.core.transduce = function() {
  var transduce = null;
  var transduce__3 = function(xform, f, coll) {
    return transduce.call(null, xform, f, f.call(null), coll);
  };
  var transduce__4 = function(xform, f, init, coll) {
    var f__$1 = xform.call(null, f);
    var ret = cljs.core.reduce.call(null, f__$1, init, coll);
    return f__$1.call(null, ret);
  };
  transduce = function(xform, f, init, coll) {
    switch(arguments.length) {
      case 3:
        return transduce__3.call(this, xform, f, init);
      case 4:
        return transduce__4.call(this, xform, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transduce.cljs$core$IFn$_invoke$arity$3 = transduce__3;
  transduce.cljs$core$IFn$_invoke$arity$4 = transduce__4;
  return transduce;
}();
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__24087__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__24087 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24087__delegate.call(this, x, y, more);
    };
    G__24087.cljs$lang$maxFixedArity = 2;
    G__24087.cljs$lang$applyTo = function(arglist__24088) {
      var x = cljs.core.first(arglist__24088);
      arglist__24088 = cljs.core.next(arglist__24088);
      var y = cljs.core.first(arglist__24088);
      var more = cljs.core.rest(arglist__24088);
      return G__24087__delegate(x, y, more);
    };
    G__24087.cljs$core$IFn$_invoke$arity$variadic = G__24087__delegate;
    return G__24087;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__24089__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__24089 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24089__delegate.call(this, x, y, more);
    };
    G__24089.cljs$lang$maxFixedArity = 2;
    G__24089.cljs$lang$applyTo = function(arglist__24090) {
      var x = cljs.core.first(arglist__24090);
      arglist__24090 = cljs.core.next(arglist__24090);
      var y = cljs.core.first(arglist__24090);
      var more = cljs.core.rest(arglist__24090);
      return G__24089__delegate(x, y, more);
    };
    G__24089.cljs$core$IFn$_invoke$arity$variadic = G__24089__delegate;
    return G__24089;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__24091__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__24091 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24091__delegate.call(this, x, y, more);
    };
    G__24091.cljs$lang$maxFixedArity = 2;
    G__24091.cljs$lang$applyTo = function(arglist__24092) {
      var x = cljs.core.first(arglist__24092);
      arglist__24092 = cljs.core.next(arglist__24092);
      var y = cljs.core.first(arglist__24092);
      var more = cljs.core.rest(arglist__24092);
      return G__24091__delegate(x, y, more);
    };
    G__24091.cljs$core$IFn$_invoke$arity$variadic = G__24091__delegate;
    return G__24091;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__24093__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__24093 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24093__delegate.call(this, x, y, more);
    };
    G__24093.cljs$lang$maxFixedArity = 2;
    G__24093.cljs$lang$applyTo = function(arglist__24094) {
      var x = cljs.core.first(arglist__24094);
      arglist__24094 = cljs.core.next(arglist__24094);
      var y = cljs.core.first(arglist__24094);
      var more = cljs.core.rest(arglist__24094);
      return G__24093__delegate(x, y, more);
    };
    G__24093.cljs$core$IFn$_invoke$arity$variadic = G__24093__delegate;
    return G__24093;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__24095__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__24096 = y;
            var G__24097 = cljs.core.first.call(null, more);
            var G__24098 = cljs.core.next.call(null, more);
            x = G__24096;
            y = G__24097;
            more = G__24098;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__24095 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24095__delegate.call(this, x, y, more);
    };
    G__24095.cljs$lang$maxFixedArity = 2;
    G__24095.cljs$lang$applyTo = function(arglist__24099) {
      var x = cljs.core.first(arglist__24099);
      arglist__24099 = cljs.core.next(arglist__24099);
      var y = cljs.core.first(arglist__24099);
      var more = cljs.core.rest(arglist__24099);
      return G__24095__delegate(x, y, more);
    };
    G__24095.cljs$core$IFn$_invoke$arity$variadic = G__24095__delegate;
    return G__24095;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__24100__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__24101 = y;
            var G__24102 = cljs.core.first.call(null, more);
            var G__24103 = cljs.core.next.call(null, more);
            x = G__24101;
            y = G__24102;
            more = G__24103;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__24100 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24100__delegate.call(this, x, y, more);
    };
    G__24100.cljs$lang$maxFixedArity = 2;
    G__24100.cljs$lang$applyTo = function(arglist__24104) {
      var x = cljs.core.first(arglist__24104);
      arglist__24104 = cljs.core.next(arglist__24104);
      var y = cljs.core.first(arglist__24104);
      var more = cljs.core.rest(arglist__24104);
      return G__24100__delegate(x, y, more);
    };
    G__24100.cljs$core$IFn$_invoke$arity$variadic = G__24100__delegate;
    return G__24100;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__24105__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__24106 = y;
            var G__24107 = cljs.core.first.call(null, more);
            var G__24108 = cljs.core.next.call(null, more);
            x = G__24106;
            y = G__24107;
            more = G__24108;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__24105 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24105__delegate.call(this, x, y, more);
    };
    G__24105.cljs$lang$maxFixedArity = 2;
    G__24105.cljs$lang$applyTo = function(arglist__24109) {
      var x = cljs.core.first(arglist__24109);
      arglist__24109 = cljs.core.next(arglist__24109);
      var y = cljs.core.first(arglist__24109);
      var more = cljs.core.rest(arglist__24109);
      return G__24105__delegate(x, y, more);
    };
    G__24105.cljs$core$IFn$_invoke$arity$variadic = G__24105__delegate;
    return G__24105;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__24110__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__24111 = y;
            var G__24112 = cljs.core.first.call(null, more);
            var G__24113 = cljs.core.next.call(null, more);
            x = G__24111;
            y = G__24112;
            more = G__24113;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__24110 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24110__delegate.call(this, x, y, more);
    };
    G__24110.cljs$lang$maxFixedArity = 2;
    G__24110.cljs$lang$applyTo = function(arglist__24114) {
      var x = cljs.core.first(arglist__24114);
      arglist__24114 = cljs.core.next(arglist__24114);
      var y = cljs.core.first(arglist__24114);
      var more = cljs.core.rest(arglist__24114);
      return G__24110__delegate(x, y, more);
    };
    G__24110.cljs$core$IFn$_invoke$arity$variadic = G__24110__delegate;
    return G__24110;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__3984__auto__ = x;
    var y__3985__auto__ = y;
    return x__3984__auto__ > y__3985__auto__ ? x__3984__auto__ : y__3985__auto__;
  };
  var max__3 = function() {
    var G__24115__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__3984__auto__ = x;
        var y__3985__auto__ = y;
        return x__3984__auto__ > y__3985__auto__ ? x__3984__auto__ : y__3985__auto__;
      }(), more);
    };
    var G__24115 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24115__delegate.call(this, x, y, more);
    };
    G__24115.cljs$lang$maxFixedArity = 2;
    G__24115.cljs$lang$applyTo = function(arglist__24116) {
      var x = cljs.core.first(arglist__24116);
      arglist__24116 = cljs.core.next(arglist__24116);
      var y = cljs.core.first(arglist__24116);
      var more = cljs.core.rest(arglist__24116);
      return G__24115__delegate(x, y, more);
    };
    G__24115.cljs$core$IFn$_invoke$arity$variadic = G__24115__delegate;
    return G__24115;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__3991__auto__ = x;
    var y__3992__auto__ = y;
    return x__3991__auto__ < y__3992__auto__ ? x__3991__auto__ : y__3992__auto__;
  };
  var min__3 = function() {
    var G__24117__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__3991__auto__ = x;
        var y__3992__auto__ = y;
        return x__3991__auto__ < y__3992__auto__ ? x__3991__auto__ : y__3992__auto__;
      }(), more);
    };
    var G__24117 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24117__delegate.call(this, x, y, more);
    };
    G__24117.cljs$lang$maxFixedArity = 2;
    G__24117.cljs$lang$applyTo = function(arglist__24118) {
      var x = cljs.core.first(arglist__24118);
      arglist__24118 = cljs.core.next(arglist__24118);
      var y = cljs.core.first(arglist__24118);
      var more = cljs.core.rest(arglist__24118);
      return G__24117__delegate(x, y, more);
    };
    G__24117.cljs$core$IFn$_invoke$arity$variadic = G__24117__delegate;
    return G__24117;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__24119__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__24119 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24119__delegate.call(this, x, y, more);
    };
    G__24119.cljs$lang$maxFixedArity = 2;
    G__24119.cljs$lang$applyTo = function(arglist__24120) {
      var x = cljs.core.first(arglist__24120);
      arglist__24120 = cljs.core.next(arglist__24120);
      var y = cljs.core.first(arglist__24120);
      var more = cljs.core.rest(arglist__24120);
      return G__24119__delegate(x, y, more);
    };
    G__24119.cljs$core$IFn$_invoke$arity$variadic = G__24119__delegate;
    return G__24119;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__24121__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__24121 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24121__delegate.call(this, x, y, more);
    };
    G__24121.cljs$lang$maxFixedArity = 2;
    G__24121.cljs$lang$applyTo = function(arglist__24122) {
      var x = cljs.core.first(arglist__24122);
      arglist__24122 = cljs.core.next(arglist__24122);
      var y = cljs.core.first(arglist__24122);
      var more = cljs.core.rest(arglist__24122);
      return G__24121__delegate(x, y, more);
    };
    G__24121.cljs$core$IFn$_invoke$arity$variadic = G__24121__delegate;
    return G__24121;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__24123__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__24123 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24123__delegate.call(this, x, y, more);
    };
    G__24123.cljs$lang$maxFixedArity = 2;
    G__24123.cljs$lang$applyTo = function(arglist__24124) {
      var x = cljs.core.first(arglist__24124);
      arglist__24124 = cljs.core.next(arglist__24124);
      var y = cljs.core.first(arglist__24124);
      var more = cljs.core.rest(arglist__24124);
      return G__24123__delegate(x, y, more);
    };
    G__24123.cljs$core$IFn$_invoke$arity$variadic = G__24123__delegate;
    return G__24123;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__24125__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__24125 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24125__delegate.call(this, x, y, more);
    };
    G__24125.cljs$lang$maxFixedArity = 2;
    G__24125.cljs$lang$applyTo = function(arglist__24126) {
      var x = cljs.core.first(arglist__24126);
      arglist__24126 = cljs.core.next(arglist__24126);
      var y = cljs.core.first(arglist__24126);
      var more = cljs.core.rest(arglist__24126);
      return G__24125__delegate(x, y, more);
    };
    G__24125.cljs$core$IFn$_invoke$arity$variadic = G__24125__delegate;
    return G__24125;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__24127__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__24127 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24127__delegate.call(this, x, y, more);
    };
    G__24127.cljs$lang$maxFixedArity = 2;
    G__24127.cljs$lang$applyTo = function(arglist__24128) {
      var x = cljs.core.first(arglist__24128);
      arglist__24128 = cljs.core.next(arglist__24128);
      var y = cljs.core.first(arglist__24128);
      var more = cljs.core.rest(arglist__24128);
      return G__24127__delegate(x, y, more);
    };
    G__24127.cljs$core$IFn$_invoke$arity$variadic = G__24127__delegate;
    return G__24127;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_subtract = function() {
  var unchecked_subtract = null;
  var unchecked_subtract__1 = function(x) {
    return-x;
  };
  var unchecked_subtract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_subtract__3 = function() {
    var G__24129__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_subtract, x - y, more);
    };
    var G__24129 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24129__delegate.call(this, x, y, more);
    };
    G__24129.cljs$lang$maxFixedArity = 2;
    G__24129.cljs$lang$applyTo = function(arglist__24130) {
      var x = cljs.core.first(arglist__24130);
      arglist__24130 = cljs.core.next(arglist__24130);
      var y = cljs.core.first(arglist__24130);
      var more = cljs.core.rest(arglist__24130);
      return G__24129__delegate(x, y, more);
    };
    G__24129.cljs$core$IFn$_invoke$arity$variadic = G__24129__delegate;
    return G__24129;
  }();
  unchecked_subtract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_subtract__1.call(this, x);
      case 2:
        return unchecked_subtract__2.call(this, x, y);
      default:
        return unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_subtract.cljs$lang$maxFixedArity = 2;
  unchecked_subtract.cljs$lang$applyTo = unchecked_subtract__3.cljs$lang$applyTo;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = unchecked_subtract__1;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = unchecked_subtract__2;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_subtract;
}();
cljs.core.unchecked_subtract_int = function() {
  var unchecked_subtract_int = null;
  var unchecked_subtract_int__1 = function(x) {
    return-x;
  };
  var unchecked_subtract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_subtract_int__3 = function() {
    var G__24131__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_subtract_int, x - y, more);
    };
    var G__24131 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24131__delegate.call(this, x, y, more);
    };
    G__24131.cljs$lang$maxFixedArity = 2;
    G__24131.cljs$lang$applyTo = function(arglist__24132) {
      var x = cljs.core.first(arglist__24132);
      arglist__24132 = cljs.core.next(arglist__24132);
      var y = cljs.core.first(arglist__24132);
      var more = cljs.core.rest(arglist__24132);
      return G__24131__delegate(x, y, more);
    };
    G__24131.cljs$core$IFn$_invoke$arity$variadic = G__24131__delegate;
    return G__24131;
  }();
  unchecked_subtract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_subtract_int__1.call(this, x);
      case 2:
        return unchecked_subtract_int__2.call(this, x, y);
      default:
        return unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
  unchecked_subtract_int.cljs$lang$applyTo = unchecked_subtract_int__3.cljs$lang$applyTo;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_subtract_int__1;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_subtract_int__2;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_subtract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__24133__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__24134 = y;
            var G__24135 = cljs.core.first.call(null, more);
            var G__24136 = cljs.core.next.call(null, more);
            x = G__24134;
            y = G__24135;
            more = G__24136;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__24133 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24133__delegate.call(this, x, y, more);
    };
    G__24133.cljs$lang$maxFixedArity = 2;
    G__24133.cljs$lang$applyTo = function(arglist__24137) {
      var x = cljs.core.first(arglist__24137);
      arglist__24137 = cljs.core.next(arglist__24137);
      var y = cljs.core.first(arglist__24137);
      var more = cljs.core.rest(arglist__24137);
      return G__24133__delegate(x, y, more);
    };
    G__24133.cljs$core$IFn$_invoke$arity$variadic = G__24133__delegate;
    return G__24133;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__24138 = n__$1 - 1;
      var G__24139 = cljs.core.next.call(null, xs);
      n__$1 = G__24138;
      xs = G__24139;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return "" + x;
    }
  };
  var str__2 = function() {
    var G__24140__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__24141 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__24142 = cljs.core.next.call(null, more);
          sb = G__24141;
          more = G__24142;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__24140 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__24140__delegate.call(this, x, ys);
    };
    G__24140.cljs$lang$maxFixedArity = 1;
    G__24140.cljs$lang$applyTo = function(arglist__24143) {
      var x = cljs.core.first(arglist__24143);
      var ys = cljs.core.rest(arglist__24143);
      return G__24140__delegate(x, ys);
    };
    G__24140.cljs$core$IFn$_invoke$arity$variadic = G__24140__delegate;
    return G__24140;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? cljs.core.counted_QMARK_.call(null, x) && cljs.core.counted_QMARK_.call(null, y) && !(cljs.core.count.call(null, x) === cljs.core.count.call(null, y)) ? false : function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__24144 = cljs.core.next.call(null, xs);
            var G__24145 = cljs.core.next.call(null, ys);
            xs = G__24144;
            ys = G__24145;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__24146 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__24147 = cljs.core.next.call(null, s);
        res = G__24146;
        s = G__24147;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__24148 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__24149 = cljs.core.next.call(null, s);
      h = G__24148;
      s = G__24149;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__24150 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__24151 = cljs.core.next.call(null, s__$1);
      h = G__24150;
      s__$1 = G__24151;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__24158_24164 = cljs.core.seq.call(null, fn_map);
  var chunk__24159_24165 = null;
  var count__24160_24166 = 0;
  var i__24161_24167 = 0;
  while (true) {
    if (i__24161_24167 < count__24160_24166) {
      var vec__24162_24168 = cljs.core._nth.call(null, chunk__24159_24165, i__24161_24167);
      var key_name_24169 = cljs.core.nth.call(null, vec__24162_24168, 0, null);
      var f_24170 = cljs.core.nth.call(null, vec__24162_24168, 1, null);
      var str_name_24171 = cljs.core.name.call(null, key_name_24169);
      obj[str_name_24171] = f_24170;
      var G__24172 = seq__24158_24164;
      var G__24173 = chunk__24159_24165;
      var G__24174 = count__24160_24166;
      var G__24175 = i__24161_24167 + 1;
      seq__24158_24164 = G__24172;
      chunk__24159_24165 = G__24173;
      count__24160_24166 = G__24174;
      i__24161_24167 = G__24175;
      continue;
    } else {
      var temp__4222__auto___24176 = cljs.core.seq.call(null, seq__24158_24164);
      if (temp__4222__auto___24176) {
        var seq__24158_24177__$1 = temp__4222__auto___24176;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__24158_24177__$1)) {
          var c__4447__auto___24178 = cljs.core.chunk_first.call(null, seq__24158_24177__$1);
          var G__24179 = cljs.core.chunk_rest.call(null, seq__24158_24177__$1);
          var G__24180 = c__4447__auto___24178;
          var G__24181 = cljs.core.count.call(null, c__4447__auto___24178);
          var G__24182 = 0;
          seq__24158_24164 = G__24179;
          chunk__24159_24165 = G__24180;
          count__24160_24166 = G__24181;
          i__24161_24167 = G__24182;
          continue;
        } else {
          var vec__24163_24183 = cljs.core.first.call(null, seq__24158_24177__$1);
          var key_name_24184 = cljs.core.nth.call(null, vec__24163_24183, 0, null);
          var f_24185 = cljs.core.nth.call(null, vec__24163_24183, 1, null);
          var str_name_24186 = cljs.core.name.call(null, key_name_24184);
          obj[str_name_24186] = f_24185;
          var G__24187 = cljs.core.next.call(null, seq__24158_24177__$1);
          var G__24188 = null;
          var G__24189 = 0;
          var G__24190 = 0;
          seq__24158_24164 = G__24187;
          chunk__24159_24165 = G__24188;
          count__24160_24166 = G__24189;
          i__24161_24167 = G__24190;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/List");
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4088__auto__ = self__.__hash;
  if (!(h__4088__auto__ == null)) {
    return h__4088__auto__;
  } else {
    var h__4088__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4088__auto____$1;
    return h__4088__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/EmptyList");
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__24192 = coll;
  if (G__24192) {
    var bit__4341__auto__ = G__24192.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4341__auto__ || G__24192.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__24192.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__24192);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__24192);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__24193 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__24193;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__24194 = i - 1;
        var G__24195 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__24194;
        r = G__24195;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__24196) {
    var xs = cljs.core.seq(arglist__24196);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/Cons");
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4088__auto__ = self__.__hash;
  if (!(h__4088__auto__ == null)) {
    return h__4088__auto__;
  } else {
    var h__4088__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4088__auto____$1;
    return h__4088__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__3677__auto__ = coll == null;
    if (or__3677__auto__) {
      return or__3677__auto__;
    } else {
      var G__24200 = coll;
      if (G__24200) {
        var bit__4334__auto__ = G__24200.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4334__auto__ || G__24200.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__24202 = x;
  if (G__24202) {
    var bit__4341__auto__ = G__24202.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4341__auto__ || G__24202.cljs$core$IList$) {
      return true;
    } else {
      if (!G__24202.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__24202);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__24202);
  }
};
cljs.core.hash_keyword = function hash_keyword(k) {
  return cljs.core.hash_symbol.call(null, k) + 2654435769 | 0;
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/Keyword");
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__4088__auto__ = self__._hash;
  if (!(h__4088__auto__ == null)) {
    return h__4088__auto__;
  } else {
    var h__4088__auto____$1 = cljs.core.hash_keyword.call(null, this$__$1);
    self__._hash = h__4088__auto____$1;
    return h__4088__auto____$1;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__24204 = null;
  var G__24204__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__24204__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__24204 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__24204__2.call(this, self__, coll);
      case 3:
        return G__24204__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__24204.cljs$core$IFn$_invoke$arity$2 = G__24204__2;
  G__24204.cljs$core$IFn$_invoke$arity$3 = G__24204__3;
  return G__24204;
}();
cljs.core.Keyword.prototype.apply = function(self__, args24203) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args24203)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn);
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__24206 = x;
    if (G__24206) {
      var bit__4334__auto__ = G__24206.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4334__auto__ || G__24206.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error("Doesn't support namespace: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.truth_(ns) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns) + "/" : null) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/LazySeq");
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4088__auto__ = self__.__hash;
  if (!(h__4088__auto__ == null)) {
    return h__4088__auto__;
  } else {
    var h__4088__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4088__auto____$1;
    return h__4088__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__24207 = ls.sval();
        ls = G__24207;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/ArrayChunk");
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/ChunkedCons");
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4088__auto__ = self__.__hash;
  if (!(h__4088__auto__ == null)) {
    return h__4088__auto__;
  } else {
    var h__4088__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4088__auto____$1;
    return h__4088__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__24209 = s;
    if (G__24209) {
      var bit__4334__auto__ = G__24209.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4334__auto__ || G__24209.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__24210 = cljs.core.next.call(null, s__$1);
      s__$1 = G__24210;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_24211 = 0;
  var xs_24212 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_24212) {
      ret[i_24211] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_24212));
      var G__24213 = i_24211 + 1;
      var G__24214 = cljs.core.next.call(null, xs_24212);
      i_24211 = G__24213;
      xs_24212 = G__24214;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__24215 = i + 1;
          var G__24216 = cljs.core.next.call(null, s__$1);
          i = G__24215;
          s__$1 = G__24216;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4547__auto___24217 = size;
      var i_24218 = 0;
      while (true) {
        if (i_24218 < n__4547__auto___24217) {
          a[i_24218] = init_val_or_seq;
          var G__24219 = i_24218 + 1;
          i_24218 = G__24219;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__24220 = i + 1;
          var G__24221 = cljs.core.next.call(null, s__$1);
          i = G__24220;
          s__$1 = G__24221;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4547__auto___24222 = size;
      var i_24223 = 0;
      while (true) {
        if (i_24223 < n__4547__auto___24222) {
          a[i_24223] = init_val_or_seq;
          var G__24224 = i_24223 + 1;
          i_24223 = G__24224;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__24225 = i + 1;
          var G__24226 = cljs.core.next.call(null, s__$1);
          i = G__24225;
          s__$1 = G__24226;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4547__auto___24227 = size;
      var i_24228 = 0;
      while (true) {
        if (i_24228 < n__4547__auto___24227) {
          a[i_24228] = init_val_or_seq;
          var G__24229 = i_24228 + 1;
          i_24228 = G__24229;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__24230 = i + 1;
          var G__24231 = cljs.core.next.call(null, s__$1);
          i = G__24230;
          s__$1 = G__24231;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4547__auto___24232 = size;
      var i_24233 = 0;
      while (true) {
        if (i_24233 < n__4547__auto___24232) {
          a[i_24233] = init_val_or_seq;
          var G__24234 = i_24233 + 1;
          i_24233 = G__24234;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__24235 = cljs.core.next.call(null, s__$1);
        var G__24236 = i - 1;
        var G__24237 = sum + 1;
        s__$1 = G__24235;
        i = G__24236;
        sum = G__24237;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__24238__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__24238 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24238__delegate.call(this, x, y, zs);
    };
    G__24238.cljs$lang$maxFixedArity = 2;
    G__24238.cljs$lang$applyTo = function(arglist__24239) {
      var x = cljs.core.first(arglist__24239);
      arglist__24239 = cljs.core.next(arglist__24239);
      var y = cljs.core.first(arglist__24239);
      var zs = cljs.core.rest(arglist__24239);
      return G__24238__delegate(x, y, zs);
    };
    G__24238.cljs$core$IFn$_invoke$arity$variadic = G__24238__delegate;
    return G__24238;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__24240__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__24240 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__24240__delegate.call(this, a, b, c, d, more);
    };
    G__24240.cljs$lang$maxFixedArity = 4;
    G__24240.cljs$lang$applyTo = function(arglist__24241) {
      var a = cljs.core.first(arglist__24241);
      arglist__24241 = cljs.core.next(arglist__24241);
      var b = cljs.core.first(arglist__24241);
      arglist__24241 = cljs.core.next(arglist__24241);
      var c = cljs.core.first(arglist__24241);
      arglist__24241 = cljs.core.next(arglist__24241);
      var d = cljs.core.first(arglist__24241);
      var more = cljs.core.rest(arglist__24241);
      return G__24240__delegate(a, b, c, d, more);
    };
    G__24240.cljs$core$IFn$_invoke$arity$variadic = G__24240__delegate;
    return G__24240;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function() {
  var conj_BANG_ = null;
  var conj_BANG___0 = function() {
    return cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  };
  var conj_BANG___1 = function(coll) {
    return coll;
  };
  var conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_.call(null, tcoll, val);
  };
  var conj_BANG___3 = function() {
    var G__24242__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__24243 = ntcoll;
          var G__24244 = cljs.core.first.call(null, vals);
          var G__24245 = cljs.core.next.call(null, vals);
          tcoll = G__24243;
          val = G__24244;
          vals = G__24245;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__24242 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24242__delegate.call(this, tcoll, val, vals);
    };
    G__24242.cljs$lang$maxFixedArity = 2;
    G__24242.cljs$lang$applyTo = function(arglist__24246) {
      var tcoll = cljs.core.first(arglist__24246);
      arglist__24246 = cljs.core.next(arglist__24246);
      var val = cljs.core.first(arglist__24246);
      var vals = cljs.core.rest(arglist__24246);
      return G__24242__delegate(tcoll, val, vals);
    };
    G__24242.cljs$core$IFn$_invoke$arity$variadic = G__24242__delegate;
    return G__24242;
  }();
  conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 0:
        return conj_BANG___0.call(this);
      case 1:
        return conj_BANG___1.call(this, tcoll);
      case 2:
        return conj_BANG___2.call(this, tcoll, val);
      default:
        return conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_BANG_.cljs$lang$maxFixedArity = 2;
  conj_BANG_.cljs$lang$applyTo = conj_BANG___3.cljs$lang$applyTo;
  conj_BANG_.cljs$core$IFn$_invoke$arity$0 = conj_BANG___0;
  conj_BANG_.cljs$core$IFn$_invoke$arity$1 = conj_BANG___1;
  conj_BANG_.cljs$core$IFn$_invoke$arity$2 = conj_BANG___2;
  conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var assoc_BANG_ = null;
  var assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
  };
  var assoc_BANG___4 = function() {
    var G__24247__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_.call(null, tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__24248 = ntcoll;
          var G__24249 = cljs.core.first.call(null, kvs);
          var G__24250 = cljs.core.second.call(null, kvs);
          var G__24251 = cljs.core.nnext.call(null, kvs);
          tcoll = G__24248;
          key = G__24249;
          val = G__24250;
          kvs = G__24251;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__24247 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__24247__delegate.call(this, tcoll, key, val, kvs);
    };
    G__24247.cljs$lang$maxFixedArity = 3;
    G__24247.cljs$lang$applyTo = function(arglist__24252) {
      var tcoll = cljs.core.first(arglist__24252);
      arglist__24252 = cljs.core.next(arglist__24252);
      var key = cljs.core.first(arglist__24252);
      arglist__24252 = cljs.core.next(arglist__24252);
      var val = cljs.core.first(arglist__24252);
      var kvs = cljs.core.rest(arglist__24252);
      return G__24247__delegate(tcoll, key, val, kvs);
    };
    G__24247.cljs$core$IFn$_invoke$arity$variadic = G__24247__delegate;
    return G__24247;
  }();
  assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_BANG___3.call(this, tcoll, key, val);
      default:
        return assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_BANG_.cljs$lang$maxFixedArity = 3;
  assoc_BANG_.cljs$lang$applyTo = assoc_BANG___4.cljs$lang$applyTo;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = assoc_BANG___3;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var dissoc_BANG_ = null;
  var dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_.call(null, tcoll, key);
  };
  var dissoc_BANG___3 = function() {
    var G__24253__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_.call(null, tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__24254 = ntcoll;
          var G__24255 = cljs.core.first.call(null, ks);
          var G__24256 = cljs.core.next.call(null, ks);
          tcoll = G__24254;
          key = G__24255;
          ks = G__24256;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__24253 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24253__delegate.call(this, tcoll, key, ks);
    };
    G__24253.cljs$lang$maxFixedArity = 2;
    G__24253.cljs$lang$applyTo = function(arglist__24257) {
      var tcoll = cljs.core.first(arglist__24257);
      arglist__24257 = cljs.core.next(arglist__24257);
      var key = cljs.core.first(arglist__24257);
      var ks = cljs.core.rest(arglist__24257);
      return G__24253__delegate(tcoll, key, ks);
    };
    G__24253.cljs$core$IFn$_invoke$arity$variadic = G__24253__delegate;
    return G__24253;
  }();
  dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return dissoc_BANG___2.call(this, tcoll, key);
      default:
        return dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  dissoc_BANG_.cljs$lang$applyTo = dissoc_BANG___3.cljs$lang$applyTo;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = dissoc_BANG___2;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function() {
  var disj_BANG_ = null;
  var disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_.call(null, tcoll, val);
  };
  var disj_BANG___3 = function() {
    var G__24258__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__24259 = ntcoll;
          var G__24260 = cljs.core.first.call(null, vals);
          var G__24261 = cljs.core.next.call(null, vals);
          tcoll = G__24259;
          val = G__24260;
          vals = G__24261;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__24258 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24258__delegate.call(this, tcoll, val, vals);
    };
    G__24258.cljs$lang$maxFixedArity = 2;
    G__24258.cljs$lang$applyTo = function(arglist__24262) {
      var tcoll = cljs.core.first(arglist__24262);
      arglist__24262 = cljs.core.next(arglist__24262);
      var val = cljs.core.first(arglist__24262);
      var vals = cljs.core.rest(arglist__24262);
      return G__24258__delegate(tcoll, val, vals);
    };
    G__24258.cljs$core$IFn$_invoke$arity$variadic = G__24258__delegate;
    return G__24258;
  }();
  disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return disj_BANG___2.call(this, tcoll, val);
      default:
        return disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj_BANG_.cljs$lang$maxFixedArity = 2;
  disj_BANG_.cljs$lang$applyTo = disj_BANG___3.cljs$lang$applyTo;
  disj_BANG_.cljs$core$IFn$_invoke$arity$2 = disj_BANG___2;
  disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return disj_BANG_;
}();
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a4591 = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a4591);
      } else {
        return f.call(null, a4591);
      }
    } else {
      var b4592 = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a4591, b4592);
        } else {
          return f.call(null, a4591, b4592);
        }
      } else {
        var c4593 = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a4591, b4592, c4593);
          } else {
            return f.call(null, a4591, b4592, c4593);
          }
        } else {
          var d4594 = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a4591, b4592, c4593, d4594);
            } else {
              return f.call(null, a4591, b4592, c4593, d4594);
            }
          } else {
            var e4595 = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a4591, b4592, c4593, d4594, e4595);
              } else {
                return f.call(null, a4591, b4592, c4593, d4594, e4595);
              }
            } else {
              var f4596 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a4591, b4592, c4593, d4594, e4595, f4596);
                } else {
                  return f.call(null, a4591, b4592, c4593, d4594, e4595, f4596);
                }
              } else {
                var g4597 = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a4591, b4592, c4593, d4594, e4595, f4596, g4597);
                  } else {
                    return f.call(null, a4591, b4592, c4593, d4594, e4595, f4596, g4597);
                  }
                } else {
                  var h4598 = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a4591, b4592, c4593, d4594, e4595, f4596, g4597, h4598);
                    } else {
                      return f.call(null, a4591, b4592, c4593, d4594, e4595, f4596, g4597, h4598);
                    }
                  } else {
                    var i4599 = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a4591, b4592, c4593, d4594, e4595, f4596, g4597, h4598, i4599);
                      } else {
                        return f.call(null, a4591, b4592, c4593, d4594, e4595, f4596, g4597, h4598, i4599);
                      }
                    } else {
                      var j4600 = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a4591, b4592, c4593, d4594, e4595, f4596, g4597, h4598, i4599, j4600);
                        } else {
                          return f.call(null, a4591, b4592, c4593, d4594, e4595, f4596, g4597, h4598, i4599, j4600);
                        }
                      } else {
                        var k4601 = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a4591, b4592, c4593, d4594, e4595, f4596, g4597, h4598, i4599, j4600, k4601);
                          } else {
                            return f.call(null, a4591, b4592, c4593, d4594, e4595, f4596, g4597, h4598, i4599, j4600, k4601);
                          }
                        } else {
                          var l4602 = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a4591, b4592, c4593, d4594, e4595, f4596, g4597, h4598, i4599, j4600, k4601, l4602);
                            } else {
                              return f.call(null, a4591, b4592, c4593, d4594, e4595, f4596, g4597, h4598, i4599, j4600, k4601, l4602);
                            }
                          } else {
                            var m4603 = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a4591, b4592, c4593, d4594, e4595, f4596, g4597, h4598, i4599, j4600, k4601, l4602, m4603);
                              } else {
                                return f.call(null, a4591, b4592, c4593, d4594, e4595, f4596, g4597, h4598, i4599, j4600, k4601, l4602, m4603);
                              }
                            } else {
                              var n4604 = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a4591, b4592, c4593, d4594, e4595, f4596, g4597, h4598, i4599, j4600, k4601, l4602, m4603, n4604);
                                } else {
                                  return f.call(null, a4591, b4592, c4593, d4594, e4595, f4596, g4597, h4598, i4599, j4600, k4601, l4602, m4603, n4604);
                                }
                              } else {
                                var o4605 = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a4591, b4592, c4593, d4594, e4595, f4596, g4597, h4598, i4599, j4600, k4601, l4602, m4603, n4604, o4605);
                                  } else {
                                    return f.call(null, a4591, b4592, c4593, d4594, e4595, f4596, g4597, h4598, i4599, j4600, k4601, l4602, m4603, n4604, o4605);
                                  }
                                } else {
                                  var p4606 = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a4591, b4592, c4593, d4594, e4595, f4596, g4597, h4598, i4599, j4600, k4601, l4602, m4603, n4604, o4605, p4606);
                                    } else {
                                      return f.call(null, a4591, b4592, c4593, d4594, e4595, f4596, g4597, h4598, i4599, j4600, k4601, l4602, m4603, n4604, o4605, p4606);
                                    }
                                  } else {
                                    var q4607 = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a4591, b4592, c4593, d4594, e4595, f4596, g4597, h4598, i4599, j4600, k4601, l4602, m4603, n4604, o4605, p4606, q4607);
                                      } else {
                                        return f.call(null, a4591, b4592, c4593, d4594, e4595, f4596, g4597, h4598, i4599, j4600, k4601, l4602, m4603, n4604, o4605, p4606, q4607);
                                      }
                                    } else {
                                      var r4608 = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a4591, b4592, c4593, d4594, e4595, f4596, g4597, h4598, i4599, j4600, k4601, l4602, m4603, n4604, o4605, p4606, q4607, r4608);
                                        } else {
                                          return f.call(null, a4591, b4592, c4593, d4594, e4595, f4596, g4597, h4598, i4599, j4600, k4601, l4602, m4603, n4604, o4605, p4606, q4607, r4608);
                                        }
                                      } else {
                                        var s4609 = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a4591, b4592, c4593, d4594, e4595, f4596, g4597, h4598, i4599, j4600, k4601, l4602, m4603, n4604, o4605, p4606, q4607, r4608, s4609);
                                          } else {
                                            return f.call(null, a4591, b4592, c4593, d4594, e4595, f4596, g4597, h4598, i4599, j4600, k4601, l4602, m4603, n4604, o4605, p4606, q4607, r4608, s4609);
                                          }
                                        } else {
                                          var t4610 = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a4591, b4592, c4593, d4594, e4595, f4596, g4597, h4598, i4599, j4600, k4601, l4602, m4603, n4604, o4605, p4606, q4607, r4608, s4609, t4610);
                                            } else {
                                              return f.call(null, a4591, b4592, c4593, d4594, e4595, f4596, g4597, h4598, i4599, j4600, k4601, l4602, m4603, n4604, o4605, p4606, q4607, r4608, s4609, t4610);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__24263__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__24263 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__24263__delegate.call(this, f, a, b, c, d, args);
    };
    G__24263.cljs$lang$maxFixedArity = 5;
    G__24263.cljs$lang$applyTo = function(arglist__24264) {
      var f = cljs.core.first(arglist__24264);
      arglist__24264 = cljs.core.next(arglist__24264);
      var a = cljs.core.first(arglist__24264);
      arglist__24264 = cljs.core.next(arglist__24264);
      var b = cljs.core.first(arglist__24264);
      arglist__24264 = cljs.core.next(arglist__24264);
      var c = cljs.core.first(arglist__24264);
      arglist__24264 = cljs.core.next(arglist__24264);
      var d = cljs.core.first(arglist__24264);
      var args = cljs.core.rest(arglist__24264);
      return G__24263__delegate(f, a, b, c, d, args);
    };
    G__24263.cljs$core$IFn$_invoke$arity$variadic = G__24263__delegate;
    return G__24263;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__24265__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__24265 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__24265__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__24265.cljs$lang$maxFixedArity = 6;
    G__24265.cljs$lang$applyTo = function(arglist__24266) {
      var obj = cljs.core.first(arglist__24266);
      arglist__24266 = cljs.core.next(arglist__24266);
      var f = cljs.core.first(arglist__24266);
      arglist__24266 = cljs.core.next(arglist__24266);
      var a = cljs.core.first(arglist__24266);
      arglist__24266 = cljs.core.next(arglist__24266);
      var b = cljs.core.first(arglist__24266);
      arglist__24266 = cljs.core.next(arglist__24266);
      var c = cljs.core.first(arglist__24266);
      arglist__24266 = cljs.core.next(arglist__24266);
      var d = cljs.core.first(arglist__24266);
      var args = cljs.core.rest(arglist__24266);
      return G__24265__delegate(obj, f, a, b, c, d, args);
    };
    G__24265.cljs$core$IFn$_invoke$arity$variadic = G__24265__delegate;
    return G__24265;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__24267__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__24267 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24267__delegate.call(this, x, y, more);
    };
    G__24267.cljs$lang$maxFixedArity = 2;
    G__24267.cljs$lang$applyTo = function(arglist__24268) {
      var x = cljs.core.first(arglist__24268);
      arglist__24268 = cljs.core.next(arglist__24268);
      var y = cljs.core.first(arglist__24268);
      var more = cljs.core.rest(arglist__24268);
      return G__24267__delegate(x, y, more);
    };
    G__24267.cljs$core$IFn$_invoke$arity$variadic = G__24267__delegate;
    return G__24267;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function nil_iter() {
  if (typeof cljs.core.t24272 !== "undefined") {
  } else {
    cljs.core.t24272 = function(nil_iter, meta24273) {
      this.nil_iter = nil_iter;
      this.meta24273 = meta24273;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.t24272.cljs$lang$type = true;
    cljs.core.t24272.cljs$lang$ctorStr = "cljs.core/t24272";
    cljs.core.t24272.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
      return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/t24272");
    };
    cljs.core.t24272.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t24272.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t24272.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t24272.prototype.cljs$core$IMeta$_meta$arity$1 = function(_24274) {
      var self__ = this;
      var _24274__$1 = this;
      return self__.meta24273;
    };
    cljs.core.t24272.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_24274, meta24273__$1) {
      var self__ = this;
      var _24274__$1 = this;
      return new cljs.core.t24272(self__.nil_iter, meta24273__$1);
    };
    cljs.core.__GT_t24272 = function __GT_t24272(nil_iter__$1, meta24273) {
      return new cljs.core.t24272(nil_iter__$1, meta24273);
    };
  }
  return new cljs.core.t24272(nil_iter, null);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/StringIter");
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.__GT_StringIter = function __GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/ArrayIter");
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.__GT_ArrayIter = function __GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/SeqIter");
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq.call(null, self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next.call(null, self__._seq);
    } else {
    }
  }
  return!(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.not.call(null, this$.hasNext())) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first.call(null, self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.__GT_SeqIter = function __GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter.call(null);
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_iter.call(null, coll);
      } else {
        if (cljs.core.iterable_QMARK_.call(null, coll)) {
          return cljs.core._iterator.call(null, coll);
        } else {
          if (cljs.core.seqable_QMARK_.call(null, coll)) {
            return cljs.core.seq_iter.call(null, coll);
          } else {
            throw new Error("Cannot create iterator from " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll));
          }
        }
      }
    }
  }
};
cljs.core.lazy_transformer = function lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/Stepper");
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__3665__auto__ = !(lt.stepper == null);
      if (and__3665__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__3665__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_.call(null, self__.xform.call(null, lt, self__.iter.next()))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.call(null, lt);
  }
};
cljs.core.__GT_Stepper = function __GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function stepper(xform, iter) {
  var stepfn = function() {
    var stepfn = null;
    var stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_.call(null, result) ? cljs.core.deref.call(null, result) : result;
      lt.stepper = null;
      return result;
    };
    var stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer.call(null, lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return stepfn__1.call(this, result);
        case 2:
          return stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    stepfn.cljs$core$IFn$_invoke$arity$1 = stepfn__1;
    stepfn.cljs$core$IFn$_invoke$arity$2 = stepfn__2;
    return stepfn;
  }();
  return new cljs.core.Stepper(xform.call(null, stepfn), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/MultiStepper");
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq.call(null, self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first.call(null, iters__$1);
      if (cljs.core.not.call(null, iter.hasNext())) {
        return false;
      } else {
        var G__24275 = cljs.core.next.call(null, iters__$1);
        iters__$1 = G__24275;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__4547__auto___24276 = self__.iters.length;
  var i_24277 = 0;
  while (true) {
    if (i_24277 < n__4547__auto___24276) {
      self__.nexts[i_24277] = self__.iters[i_24277].next();
      var G__24278 = i_24277 + 1;
      i_24277 = G__24278;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.call(null, self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__3665__auto__ = !(lt.stepper == null);
      if (and__3665__auto__) {
        return this$.hasNext();
      } else {
        return and__3665__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_.call(null, cljs.core.apply.call(null, self__.xform, cljs.core.cons.call(null, lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.call(null, lt);
  }
};
cljs.core.__GT_MultiStepper = function __GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function() {
  var multi_stepper = null;
  var multi_stepper__2 = function(xform, iters) {
    return multi_stepper.call(null, xform, iters, new Array(iters.length));
  };
  var multi_stepper__3 = function(xform, iters, nexts) {
    var stepfn = function() {
      var stepfn = null;
      var stepfn__1 = function(result) {
        var lt = cljs.core.reduced_QMARK_.call(null, result) ? cljs.core.deref.call(null, result) : result;
        lt.stepper = null;
        return lt;
      };
      var stepfn__2 = function(result, input) {
        var lt = result;
        lt.first = input;
        lt.rest = cljs.core.lazy_transformer.call(null, lt.stepper);
        lt.stepper = null;
        return lt.rest;
      };
      stepfn = function(result, input) {
        switch(arguments.length) {
          case 1:
            return stepfn__1.call(this, result);
          case 2:
            return stepfn__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      stepfn.cljs$core$IFn$_invoke$arity$1 = stepfn__1;
      stepfn.cljs$core$IFn$_invoke$arity$2 = stepfn__2;
      return stepfn;
    }();
    return new cljs.core.MultiStepper(xform.call(null, stepfn), iters, nexts);
  };
  multi_stepper = function(xform, iters, nexts) {
    switch(arguments.length) {
      case 2:
        return multi_stepper__2.call(this, xform, iters);
      case 3:
        return multi_stepper__3.call(this, xform, iters, nexts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  multi_stepper.cljs$core$IFn$_invoke$arity$2 = multi_stepper__2;
  multi_stepper.cljs$core$IFn$_invoke$arity$3 = multi_stepper__3;
  return multi_stepper;
}();
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31719628;
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/LazyTransformer");
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq.call(null, this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq.call(null, self__.rest);
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq.call(null, this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq.call(null, this$__$1);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = cljs.core._seq.call(null, this$__$1);
  if (!(s == null)) {
    return cljs.core.equiv_sequential.call(null, this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_.call(null, other) && cljs.core.seq.call(null, other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, cljs.core._seq.call(null, this$__$1));
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.__GT_LazyTransformer = function __GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper.call(null, xform, cljs.core.iter.call(null, coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__24279_24283 = cljs.core.seq.call(null, colls);
  var chunk__24280_24284 = null;
  var count__24281_24285 = 0;
  var i__24282_24286 = 0;
  while (true) {
    if (i__24282_24286 < count__24281_24285) {
      var coll_24287 = cljs.core._nth.call(null, chunk__24280_24284, i__24282_24286);
      iters.push(cljs.core.iter.call(null, coll_24287));
      var G__24288 = seq__24279_24283;
      var G__24289 = chunk__24280_24284;
      var G__24290 = count__24281_24285;
      var G__24291 = i__24282_24286 + 1;
      seq__24279_24283 = G__24288;
      chunk__24280_24284 = G__24289;
      count__24281_24285 = G__24290;
      i__24282_24286 = G__24291;
      continue;
    } else {
      var temp__4222__auto___24292 = cljs.core.seq.call(null, seq__24279_24283);
      if (temp__4222__auto___24292) {
        var seq__24279_24293__$1 = temp__4222__auto___24292;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__24279_24293__$1)) {
          var c__4447__auto___24294 = cljs.core.chunk_first.call(null, seq__24279_24293__$1);
          var G__24295 = cljs.core.chunk_rest.call(null, seq__24279_24293__$1);
          var G__24296 = c__4447__auto___24294;
          var G__24297 = cljs.core.count.call(null, c__4447__auto___24294);
          var G__24298 = 0;
          seq__24279_24283 = G__24295;
          chunk__24280_24284 = G__24296;
          count__24281_24285 = G__24297;
          i__24282_24286 = G__24298;
          continue;
        } else {
          var coll_24299 = cljs.core.first.call(null, seq__24279_24293__$1);
          iters.push(cljs.core.iter.call(null, coll_24299));
          var G__24300 = cljs.core.next.call(null, seq__24279_24293__$1);
          var G__24301 = null;
          var G__24302 = 0;
          var G__24303 = 0;
          seq__24279_24283 = G__24300;
          chunk__24280_24284 = G__24301;
          count__24281_24285 = G__24302;
          i__24282_24286 = G__24303;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.call(null, xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function() {
  var sequence = null;
  var sequence__1 = function(coll) {
    if (cljs.core.seq_QMARK_.call(null, coll)) {
      return coll;
    } else {
      var or__3677__auto__ = cljs.core.seq.call(null, coll);
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  };
  var sequence__2 = function(xform, coll) {
    return cljs.core.LazyTransformer.create(xform, coll);
  };
  var sequence__3 = function() {
    var G__24304__delegate = function(xform, coll, colls) {
      return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array.call(null, cljs.core.cons.call(null, coll, colls)));
    };
    var G__24304 = function(xform, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24304__delegate.call(this, xform, coll, colls);
    };
    G__24304.cljs$lang$maxFixedArity = 2;
    G__24304.cljs$lang$applyTo = function(arglist__24305) {
      var xform = cljs.core.first(arglist__24305);
      arglist__24305 = cljs.core.next(arglist__24305);
      var coll = cljs.core.first(arglist__24305);
      var colls = cljs.core.rest(arglist__24305);
      return G__24304__delegate(xform, coll, colls);
    };
    G__24304.cljs$core$IFn$_invoke$arity$variadic = G__24304__delegate;
    return G__24304;
  }();
  sequence = function(xform, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return sequence__1.call(this, xform);
      case 2:
        return sequence__2.call(this, xform, coll);
      default:
        return sequence__3.cljs$core$IFn$_invoke$arity$variadic(xform, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sequence.cljs$lang$maxFixedArity = 2;
  sequence.cljs$lang$applyTo = sequence__3.cljs$lang$applyTo;
  sequence.cljs$core$IFn$_invoke$arity$1 = sequence__1;
  sequence.cljs$core$IFn$_invoke$arity$2 = sequence__2;
  sequence.cljs$core$IFn$_invoke$arity$variadic = sequence__3.cljs$core$IFn$_invoke$arity$variadic;
  return sequence;
}();
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__24306 = pred;
        var G__24307 = cljs.core.next.call(null, coll);
        pred = G__24306;
        coll = G__24307;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__3677__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__3677__auto__)) {
        return or__3677__auto__;
      } else {
        var G__24308 = pred;
        var G__24309 = cljs.core.next.call(null, coll);
        pred = G__24308;
        coll = G__24309;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error("Argument must be an integer: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__24310 = null;
    var G__24310__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__24310__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__24310__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__24310__3 = function() {
      var G__24311__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__24311 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__24311__delegate.call(this, x, y, zs);
      };
      G__24311.cljs$lang$maxFixedArity = 2;
      G__24311.cljs$lang$applyTo = function(arglist__24312) {
        var x = cljs.core.first(arglist__24312);
        arglist__24312 = cljs.core.next(arglist__24312);
        var y = cljs.core.first(arglist__24312);
        var zs = cljs.core.rest(arglist__24312);
        return G__24311__delegate(x, y, zs);
      };
      G__24311.cljs$core$IFn$_invoke$arity$variadic = G__24311__delegate;
      return G__24311;
    }();
    G__24310 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__24310__0.call(this);
        case 1:
          return G__24310__1.call(this, x);
        case 2:
          return G__24310__2.call(this, x, y);
        default:
          return G__24310__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__24310.cljs$lang$maxFixedArity = 2;
    G__24310.cljs$lang$applyTo = G__24310__3.cljs$lang$applyTo;
    G__24310.cljs$core$IFn$_invoke$arity$0 = G__24310__0;
    G__24310.cljs$core$IFn$_invoke$arity$1 = G__24310__1;
    G__24310.cljs$core$IFn$_invoke$arity$2 = G__24310__2;
    G__24310.cljs$core$IFn$_invoke$arity$variadic = G__24310__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__24310;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__24313__delegate = function(args) {
      return x;
    };
    var G__24313 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__24313__delegate.call(this, args);
    };
    G__24313.cljs$lang$maxFixedArity = 0;
    G__24313.cljs$lang$applyTo = function(arglist__24314) {
      var args = cljs.core.seq(arglist__24314);
      return G__24313__delegate(args);
    };
    G__24313.cljs$core$IFn$_invoke$arity$variadic = G__24313__delegate;
    return G__24313;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__24315 = null;
      var G__24315__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__24315__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__24315__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__24315__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__24315__4 = function() {
        var G__24316__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__24316 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__24316__delegate.call(this, x, y, z, args);
        };
        G__24316.cljs$lang$maxFixedArity = 3;
        G__24316.cljs$lang$applyTo = function(arglist__24317) {
          var x = cljs.core.first(arglist__24317);
          arglist__24317 = cljs.core.next(arglist__24317);
          var y = cljs.core.first(arglist__24317);
          arglist__24317 = cljs.core.next(arglist__24317);
          var z = cljs.core.first(arglist__24317);
          var args = cljs.core.rest(arglist__24317);
          return G__24316__delegate(x, y, z, args);
        };
        G__24316.cljs$core$IFn$_invoke$arity$variadic = G__24316__delegate;
        return G__24316;
      }();
      G__24315 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__24315__0.call(this);
          case 1:
            return G__24315__1.call(this, x);
          case 2:
            return G__24315__2.call(this, x, y);
          case 3:
            return G__24315__3.call(this, x, y, z);
          default:
            return G__24315__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__24315.cljs$lang$maxFixedArity = 3;
      G__24315.cljs$lang$applyTo = G__24315__4.cljs$lang$applyTo;
      G__24315.cljs$core$IFn$_invoke$arity$0 = G__24315__0;
      G__24315.cljs$core$IFn$_invoke$arity$1 = G__24315__1;
      G__24315.cljs$core$IFn$_invoke$arity$2 = G__24315__2;
      G__24315.cljs$core$IFn$_invoke$arity$3 = G__24315__3;
      G__24315.cljs$core$IFn$_invoke$arity$variadic = G__24315__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__24315;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__24318 = null;
      var G__24318__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__24318__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__24318__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__24318__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__24318__4 = function() {
        var G__24319__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__24319 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__24319__delegate.call(this, x, y, z, args);
        };
        G__24319.cljs$lang$maxFixedArity = 3;
        G__24319.cljs$lang$applyTo = function(arglist__24320) {
          var x = cljs.core.first(arglist__24320);
          arglist__24320 = cljs.core.next(arglist__24320);
          var y = cljs.core.first(arglist__24320);
          arglist__24320 = cljs.core.next(arglist__24320);
          var z = cljs.core.first(arglist__24320);
          var args = cljs.core.rest(arglist__24320);
          return G__24319__delegate(x, y, z, args);
        };
        G__24319.cljs$core$IFn$_invoke$arity$variadic = G__24319__delegate;
        return G__24319;
      }();
      G__24318 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__24318__0.call(this);
          case 1:
            return G__24318__1.call(this, x);
          case 2:
            return G__24318__2.call(this, x, y);
          case 3:
            return G__24318__3.call(this, x, y, z);
          default:
            return G__24318__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__24318.cljs$lang$maxFixedArity = 3;
      G__24318.cljs$lang$applyTo = G__24318__4.cljs$lang$applyTo;
      G__24318.cljs$core$IFn$_invoke$arity$0 = G__24318__0;
      G__24318.cljs$core$IFn$_invoke$arity$1 = G__24318__1;
      G__24318.cljs$core$IFn$_invoke$arity$2 = G__24318__2;
      G__24318.cljs$core$IFn$_invoke$arity$3 = G__24318__3;
      G__24318.cljs$core$IFn$_invoke$arity$variadic = G__24318__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__24318;
    }();
  };
  var comp__4 = function() {
    var G__24321__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function(fs__$1) {
        return function() {
          var G__24322__delegate = function(args) {
            var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
            var fs__$2 = cljs.core.next.call(null, fs__$1);
            while (true) {
              if (fs__$2) {
                var G__24323 = cljs.core.first.call(null, fs__$2).call(null, ret);
                var G__24324 = cljs.core.next.call(null, fs__$2);
                ret = G__24323;
                fs__$2 = G__24324;
                continue;
              } else {
                return ret;
              }
              break;
            }
          };
          var G__24322 = function(var_args) {
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__24322__delegate.call(this, args);
          };
          G__24322.cljs$lang$maxFixedArity = 0;
          G__24322.cljs$lang$applyTo = function(arglist__24325) {
            var args = cljs.core.seq(arglist__24325);
            return G__24322__delegate(args);
          };
          G__24322.cljs$core$IFn$_invoke$arity$variadic = G__24322__delegate;
          return G__24322;
        }();
      }(fs__$1);
    };
    var G__24321 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__24321__delegate.call(this, f1, f2, f3, fs);
    };
    G__24321.cljs$lang$maxFixedArity = 3;
    G__24321.cljs$lang$applyTo = function(arglist__24326) {
      var f1 = cljs.core.first(arglist__24326);
      arglist__24326 = cljs.core.next(arglist__24326);
      var f2 = cljs.core.first(arglist__24326);
      arglist__24326 = cljs.core.next(arglist__24326);
      var f3 = cljs.core.first(arglist__24326);
      var fs = cljs.core.rest(arglist__24326);
      return G__24321__delegate(f1, f2, f3, fs);
    };
    G__24321.cljs$core$IFn$_invoke$arity$variadic = G__24321__delegate;
    return G__24321;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__24327__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__24327 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__24327__delegate.call(this, args);
      };
      G__24327.cljs$lang$maxFixedArity = 0;
      G__24327.cljs$lang$applyTo = function(arglist__24328) {
        var args = cljs.core.seq(arglist__24328);
        return G__24327__delegate(args);
      };
      G__24327.cljs$core$IFn$_invoke$arity$variadic = G__24327__delegate;
      return G__24327;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__24329__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__24329 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__24329__delegate.call(this, args);
      };
      G__24329.cljs$lang$maxFixedArity = 0;
      G__24329.cljs$lang$applyTo = function(arglist__24330) {
        var args = cljs.core.seq(arglist__24330);
        return G__24329__delegate(args);
      };
      G__24329.cljs$core$IFn$_invoke$arity$variadic = G__24329__delegate;
      return G__24329;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__24331__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__24331 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__24331__delegate.call(this, args);
      };
      G__24331.cljs$lang$maxFixedArity = 0;
      G__24331.cljs$lang$applyTo = function(arglist__24332) {
        var args = cljs.core.seq(arglist__24332);
        return G__24331__delegate(args);
      };
      G__24331.cljs$core$IFn$_invoke$arity$variadic = G__24331__delegate;
      return G__24331;
    }();
  };
  var partial__5 = function() {
    var G__24333__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__24334__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__24334 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__24334__delegate.call(this, args);
        };
        G__24334.cljs$lang$maxFixedArity = 0;
        G__24334.cljs$lang$applyTo = function(arglist__24335) {
          var args = cljs.core.seq(arglist__24335);
          return G__24334__delegate(args);
        };
        G__24334.cljs$core$IFn$_invoke$arity$variadic = G__24334__delegate;
        return G__24334;
      }();
    };
    var G__24333 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__24333__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__24333.cljs$lang$maxFixedArity = 4;
    G__24333.cljs$lang$applyTo = function(arglist__24336) {
      var f = cljs.core.first(arglist__24336);
      arglist__24336 = cljs.core.next(arglist__24336);
      var arg1 = cljs.core.first(arglist__24336);
      arglist__24336 = cljs.core.next(arglist__24336);
      var arg2 = cljs.core.first(arglist__24336);
      arglist__24336 = cljs.core.next(arglist__24336);
      var arg3 = cljs.core.first(arglist__24336);
      var more = cljs.core.rest(arglist__24336);
      return G__24333__delegate(f, arg1, arg2, arg3, more);
    };
    G__24333.cljs$core$IFn$_invoke$arity$variadic = G__24333__delegate;
    return G__24333;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__24337 = null;
      var G__24337__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__24337__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__24337__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__24337__4 = function() {
        var G__24338__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__24338 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__24338__delegate.call(this, a, b, c, ds);
        };
        G__24338.cljs$lang$maxFixedArity = 3;
        G__24338.cljs$lang$applyTo = function(arglist__24339) {
          var a = cljs.core.first(arglist__24339);
          arglist__24339 = cljs.core.next(arglist__24339);
          var b = cljs.core.first(arglist__24339);
          arglist__24339 = cljs.core.next(arglist__24339);
          var c = cljs.core.first(arglist__24339);
          var ds = cljs.core.rest(arglist__24339);
          return G__24338__delegate(a, b, c, ds);
        };
        G__24338.cljs$core$IFn$_invoke$arity$variadic = G__24338__delegate;
        return G__24338;
      }();
      G__24337 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__24337__1.call(this, a);
          case 2:
            return G__24337__2.call(this, a, b);
          case 3:
            return G__24337__3.call(this, a, b, c);
          default:
            return G__24337__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__24337.cljs$lang$maxFixedArity = 3;
      G__24337.cljs$lang$applyTo = G__24337__4.cljs$lang$applyTo;
      G__24337.cljs$core$IFn$_invoke$arity$1 = G__24337__1;
      G__24337.cljs$core$IFn$_invoke$arity$2 = G__24337__2;
      G__24337.cljs$core$IFn$_invoke$arity$3 = G__24337__3;
      G__24337.cljs$core$IFn$_invoke$arity$variadic = G__24337__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__24337;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__24340 = null;
      var G__24340__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__24340__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__24340__4 = function() {
        var G__24341__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__24341 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__24341__delegate.call(this, a, b, c, ds);
        };
        G__24341.cljs$lang$maxFixedArity = 3;
        G__24341.cljs$lang$applyTo = function(arglist__24342) {
          var a = cljs.core.first(arglist__24342);
          arglist__24342 = cljs.core.next(arglist__24342);
          var b = cljs.core.first(arglist__24342);
          arglist__24342 = cljs.core.next(arglist__24342);
          var c = cljs.core.first(arglist__24342);
          var ds = cljs.core.rest(arglist__24342);
          return G__24341__delegate(a, b, c, ds);
        };
        G__24341.cljs$core$IFn$_invoke$arity$variadic = G__24341__delegate;
        return G__24341;
      }();
      G__24340 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__24340__2.call(this, a, b);
          case 3:
            return G__24340__3.call(this, a, b, c);
          default:
            return G__24340__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__24340.cljs$lang$maxFixedArity = 3;
      G__24340.cljs$lang$applyTo = G__24340__4.cljs$lang$applyTo;
      G__24340.cljs$core$IFn$_invoke$arity$2 = G__24340__2;
      G__24340.cljs$core$IFn$_invoke$arity$3 = G__24340__3;
      G__24340.cljs$core$IFn$_invoke$arity$variadic = G__24340__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__24340;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__24343 = null;
      var G__24343__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__24343__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__24343__4 = function() {
        var G__24344__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__24344 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__24344__delegate.call(this, a, b, c, ds);
        };
        G__24344.cljs$lang$maxFixedArity = 3;
        G__24344.cljs$lang$applyTo = function(arglist__24345) {
          var a = cljs.core.first(arglist__24345);
          arglist__24345 = cljs.core.next(arglist__24345);
          var b = cljs.core.first(arglist__24345);
          arglist__24345 = cljs.core.next(arglist__24345);
          var c = cljs.core.first(arglist__24345);
          var ds = cljs.core.rest(arglist__24345);
          return G__24344__delegate(a, b, c, ds);
        };
        G__24344.cljs$core$IFn$_invoke$arity$variadic = G__24344__delegate;
        return G__24344;
      }();
      G__24343 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__24343__2.call(this, a, b);
          case 3:
            return G__24343__3.call(this, a, b, c);
          default:
            return G__24343__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__24343.cljs$lang$maxFixedArity = 3;
      G__24343.cljs$lang$applyTo = G__24343__4.cljs$lang$applyTo;
      G__24343.cljs$core$IFn$_invoke$arity$2 = G__24343__2;
      G__24343.cljs$core$IFn$_invoke$arity$3 = G__24343__3;
      G__24343.cljs$core$IFn$_invoke$arity$variadic = G__24343__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__24343;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4222__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4222__auto__) {
        var s = temp__4222__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4547__auto___24346 = size;
          var i_24347 = 0;
          while (true) {
            if (i_24347 < n__4547__auto___24346) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_24347, cljs.core._nth.call(null, c, i_24347)));
              var G__24348 = i_24347 + 1;
              i_24347 = G__24348;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function() {
  var keep = null;
  var keep__1 = function(f) {
    return function(rf) {
      return function() {
        var G__24349 = null;
        var G__24349__0 = function() {
          return rf.call(null);
        };
        var G__24349__1 = function(result) {
          return rf.call(null, result);
        };
        var G__24349__2 = function(result, input) {
          var v = f.call(null, input);
          if (v == null) {
            return result;
          } else {
            return rf.call(null, result, v);
          }
        };
        G__24349 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__24349__0.call(this);
            case 1:
              return G__24349__1.call(this, result);
            case 2:
              return G__24349__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__24349.cljs$core$IFn$_invoke$arity$0 = G__24349__0;
        G__24349.cljs$core$IFn$_invoke$arity$1 = G__24349__1;
        G__24349.cljs$core$IFn$_invoke$arity$2 = G__24349__2;
        return G__24349;
      }();
    };
  };
  var keep__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4222__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4222__auto__) {
        var s = temp__4222__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4547__auto___24350 = size;
          var i_24351 = 0;
          while (true) {
            if (i_24351 < n__4547__auto___24350) {
              var x_24352 = f.call(null, cljs.core._nth.call(null, c, i_24351));
              if (x_24352 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_24352);
              }
              var G__24353 = i_24351 + 1;
              i_24351 = G__24353;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, cljs.core.first.call(null, s));
          if (x == null) {
            return keep.call(null, f, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  keep = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return keep__1.call(this, f);
      case 2:
        return keep__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keep.cljs$core$IFn$_invoke$arity$1 = keep__1;
  keep.cljs$core$IFn$_invoke$arity$2 = keep__2;
  return keep;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/Atom");
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__24354 = cljs.core.seq.call(null, self__.watches);
  var chunk__24355 = null;
  var count__24356 = 0;
  var i__24357 = 0;
  while (true) {
    if (i__24357 < count__24356) {
      var vec__24358 = cljs.core._nth.call(null, chunk__24355, i__24357);
      var key = cljs.core.nth.call(null, vec__24358, 0, null);
      var f = cljs.core.nth.call(null, vec__24358, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__24360 = seq__24354;
      var G__24361 = chunk__24355;
      var G__24362 = count__24356;
      var G__24363 = i__24357 + 1;
      seq__24354 = G__24360;
      chunk__24355 = G__24361;
      count__24356 = G__24362;
      i__24357 = G__24363;
      continue;
    } else {
      var temp__4222__auto__ = cljs.core.seq.call(null, seq__24354);
      if (temp__4222__auto__) {
        var seq__24354__$1 = temp__4222__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__24354__$1)) {
          var c__4447__auto__ = cljs.core.chunk_first.call(null, seq__24354__$1);
          var G__24364 = cljs.core.chunk_rest.call(null, seq__24354__$1);
          var G__24365 = c__4447__auto__;
          var G__24366 = cljs.core.count.call(null, c__4447__auto__);
          var G__24367 = 0;
          seq__24354 = G__24364;
          chunk__24355 = G__24365;
          count__24356 = G__24366;
          i__24357 = G__24367;
          continue;
        } else {
          var vec__24359 = cljs.core.first.call(null, seq__24354__$1);
          var key = cljs.core.nth.call(null, vec__24359, 0, null);
          var f = cljs.core.nth.call(null, vec__24359, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__24368 = cljs.core.next.call(null, seq__24354__$1);
          var G__24369 = null;
          var G__24370 = 0;
          var G__24371 = 0;
          seq__24354 = G__24368;
          chunk__24355 = G__24369;
          count__24356 = G__24370;
          i__24357 = G__24371;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__24375__delegate = function(x, p__24372) {
      var map__24374 = p__24372;
      var map__24374__$1 = cljs.core.seq_QMARK_.call(null, map__24374) ? cljs.core.apply.call(null, cljs.core.hash_map, map__24374) : map__24374;
      var validator = cljs.core.get.call(null, map__24374__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
      var meta = cljs.core.get.call(null, map__24374__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__24375 = function(x, var_args) {
      var p__24372 = null;
      if (arguments.length > 1) {
        p__24372 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__24375__delegate.call(this, x, p__24372);
    };
    G__24375.cljs$lang$maxFixedArity = 1;
    G__24375.cljs$lang$applyTo = function(arglist__24376) {
      var x = cljs.core.first(arglist__24376);
      var p__24372 = cljs.core.rest(arglist__24376);
      return G__24375__delegate(x, p__24372);
    };
    G__24375.cljs$core$IFn$_invoke$arity$variadic = G__24375__delegate;
    return G__24375;
  }();
  atom = function(x, var_args) {
    var p__24372 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.call(null, new_value))) {
      } else {
        throw new Error("Assert failed: Validator rejected reference state\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null)))));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches.call(null, a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_.call(null, a, new_value);
  }
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f);
    }
  };
  var swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x);
    }
  };
  var swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x, y);
    }
  };
  var swap_BANG___5 = function() {
    var G__24377__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.call(null, a, f, x, y, more);
      }
    };
    var G__24377 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__24377__delegate.call(this, a, f, x, y, more);
    };
    G__24377.cljs$lang$maxFixedArity = 4;
    G__24377.cljs$lang$applyTo = function(arglist__24378) {
      var a = cljs.core.first(arglist__24378);
      arglist__24378 = cljs.core.next(arglist__24378);
      var f = cljs.core.first(arglist__24378);
      arglist__24378 = cljs.core.next(arglist__24378);
      var x = cljs.core.first(arglist__24378);
      arglist__24378 = cljs.core.next(arglist__24378);
      var y = cljs.core.first(arglist__24378);
      var more = cljs.core.rest(arglist__24378);
      return G__24377__delegate(a, f, x, y, more);
    };
    G__24377.cljs$core$IFn$_invoke$arity$variadic = G__24377__delegate;
    return G__24377;
  }();
  swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      default:
        return swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 4;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___5.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.keep_indexed = function() {
  var keep_indexed = null;
  var keep_indexed__1 = function(f) {
    return function(rf) {
      var ia = cljs.core.atom.call(null, -1);
      return function(ia) {
        return function() {
          var G__24379 = null;
          var G__24379__0 = function() {
            return rf.call(null);
          };
          var G__24379__1 = function(result) {
            return rf.call(null, result);
          };
          var G__24379__2 = function(result, input) {
            var i = cljs.core.swap_BANG_.call(null, ia, cljs.core.inc);
            var v = f.call(null, i, input);
            if (v == null) {
              return result;
            } else {
              return rf.call(null, result, v);
            }
          };
          G__24379 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__24379__0.call(this);
              case 1:
                return G__24379__1.call(this, result);
              case 2:
                return G__24379__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__24379.cljs$core$IFn$_invoke$arity$0 = G__24379__0;
          G__24379.cljs$core$IFn$_invoke$arity$1 = G__24379__1;
          G__24379.cljs$core$IFn$_invoke$arity$2 = G__24379__2;
          return G__24379;
        }();
      }(ia);
    };
  };
  var keep_indexed__2 = function(f, coll) {
    var keepi = function keepi(idx, coll__$1) {
      return new cljs.core.LazySeq(null, function() {
        var temp__4222__auto__ = cljs.core.seq.call(null, coll__$1);
        if (temp__4222__auto__) {
          var s = temp__4222__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
            var c = cljs.core.chunk_first.call(null, s);
            var size = cljs.core.count.call(null, c);
            var b = cljs.core.chunk_buffer.call(null, size);
            var n__4547__auto___24380 = size;
            var i_24381 = 0;
            while (true) {
              if (i_24381 < n__4547__auto___24380) {
                var x_24382 = f.call(null, idx + i_24381, cljs.core._nth.call(null, c, i_24381));
                if (x_24382 == null) {
                } else {
                  cljs.core.chunk_append.call(null, b, x_24382);
                }
                var G__24383 = i_24381 + 1;
                i_24381 = G__24383;
                continue;
              } else {
              }
              break;
            }
            return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
          } else {
            var x = f.call(null, idx, cljs.core.first.call(null, s));
            if (x == null) {
              return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
            } else {
              return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
            }
          }
        } else {
          return null;
        }
      }, null, null);
    };
    return keepi.call(null, 0, coll);
  };
  keep_indexed = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return keep_indexed__1.call(this, f);
      case 2:
        return keep_indexed__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keep_indexed.cljs$core$IFn$_invoke$arity$1 = keep_indexed__1;
  keep_indexed.cljs$core$IFn$_invoke$arity$2 = keep_indexed__2;
  return keep_indexed;
}();
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3665__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3665__auto__)) {
            return p.call(null, y);
          } else {
            return and__3665__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3665__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3665__auto__)) {
            var and__3665__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__3665__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__3665__auto____$1;
            }
          } else {
            return and__3665__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__24390__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__24390 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__24390__delegate.call(this, x, y, z, args);
        };
        G__24390.cljs$lang$maxFixedArity = 3;
        G__24390.cljs$lang$applyTo = function(arglist__24391) {
          var x = cljs.core.first(arglist__24391);
          arglist__24391 = cljs.core.next(arglist__24391);
          var y = cljs.core.first(arglist__24391);
          arglist__24391 = cljs.core.next(arglist__24391);
          var z = cljs.core.first(arglist__24391);
          var args = cljs.core.rest(arglist__24391);
          return G__24390__delegate(x, y, z, args);
        };
        G__24390.cljs$core$IFn$_invoke$arity$variadic = G__24390__delegate;
        return G__24390;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3665__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3665__auto__)) {
            return p2.call(null, x);
          } else {
            return and__3665__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3665__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3665__auto__)) {
            var and__3665__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3665__auto____$1)) {
              var and__3665__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__3665__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__3665__auto____$2;
              }
            } else {
              return and__3665__auto____$1;
            }
          } else {
            return and__3665__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3665__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3665__auto__)) {
            var and__3665__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3665__auto____$1)) {
              var and__3665__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__3665__auto____$2)) {
                var and__3665__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__3665__auto____$3)) {
                  var and__3665__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3665__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__3665__auto____$4;
                  }
                } else {
                  return and__3665__auto____$3;
                }
              } else {
                return and__3665__auto____$2;
              }
            } else {
              return and__3665__auto____$1;
            }
          } else {
            return and__3665__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__24392__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__24384_SHARP_) {
            var and__3665__auto__ = p1.call(null, p1__24384_SHARP_);
            if (cljs.core.truth_(and__3665__auto__)) {
              return p2.call(null, p1__24384_SHARP_);
            } else {
              return and__3665__auto__;
            }
          }, args));
        };
        var G__24392 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__24392__delegate.call(this, x, y, z, args);
        };
        G__24392.cljs$lang$maxFixedArity = 3;
        G__24392.cljs$lang$applyTo = function(arglist__24393) {
          var x = cljs.core.first(arglist__24393);
          arglist__24393 = cljs.core.next(arglist__24393);
          var y = cljs.core.first(arglist__24393);
          arglist__24393 = cljs.core.next(arglist__24393);
          var z = cljs.core.first(arglist__24393);
          var args = cljs.core.rest(arglist__24393);
          return G__24392__delegate(x, y, z, args);
        };
        G__24392.cljs$core$IFn$_invoke$arity$variadic = G__24392__delegate;
        return G__24392;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3665__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3665__auto__)) {
            var and__3665__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3665__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__3665__auto____$1;
            }
          } else {
            return and__3665__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3665__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3665__auto__)) {
            var and__3665__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3665__auto____$1)) {
              var and__3665__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3665__auto____$2)) {
                var and__3665__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3665__auto____$3)) {
                  var and__3665__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3665__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__3665__auto____$4;
                  }
                } else {
                  return and__3665__auto____$3;
                }
              } else {
                return and__3665__auto____$2;
              }
            } else {
              return and__3665__auto____$1;
            }
          } else {
            return and__3665__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3665__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3665__auto__)) {
            var and__3665__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3665__auto____$1)) {
              var and__3665__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3665__auto____$2)) {
                var and__3665__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3665__auto____$3)) {
                  var and__3665__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3665__auto____$4)) {
                    var and__3665__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__3665__auto____$5)) {
                      var and__3665__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__3665__auto____$6)) {
                        var and__3665__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__3665__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__3665__auto____$7;
                        }
                      } else {
                        return and__3665__auto____$6;
                      }
                    } else {
                      return and__3665__auto____$5;
                    }
                  } else {
                    return and__3665__auto____$4;
                  }
                } else {
                  return and__3665__auto____$3;
                }
              } else {
                return and__3665__auto____$2;
              }
            } else {
              return and__3665__auto____$1;
            }
          } else {
            return and__3665__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__24394__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__24385_SHARP_) {
            var and__3665__auto__ = p1.call(null, p1__24385_SHARP_);
            if (cljs.core.truth_(and__3665__auto__)) {
              var and__3665__auto____$1 = p2.call(null, p1__24385_SHARP_);
              if (cljs.core.truth_(and__3665__auto____$1)) {
                return p3.call(null, p1__24385_SHARP_);
              } else {
                return and__3665__auto____$1;
              }
            } else {
              return and__3665__auto__;
            }
          }, args));
        };
        var G__24394 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__24394__delegate.call(this, x, y, z, args);
        };
        G__24394.cljs$lang$maxFixedArity = 3;
        G__24394.cljs$lang$applyTo = function(arglist__24395) {
          var x = cljs.core.first(arglist__24395);
          arglist__24395 = cljs.core.next(arglist__24395);
          var y = cljs.core.first(arglist__24395);
          arglist__24395 = cljs.core.next(arglist__24395);
          var z = cljs.core.first(arglist__24395);
          var args = cljs.core.rest(arglist__24395);
          return G__24394__delegate(x, y, z, args);
        };
        G__24394.cljs$core$IFn$_invoke$arity$variadic = G__24394__delegate;
        return G__24394;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__24396__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var epn = null;
          var epn__0 = function() {
            return true;
          };
          var epn__1 = function(x) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__24386_SHARP_) {
                return p1__24386_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var epn__2 = function(x, y) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__24387_SHARP_) {
                var and__3665__auto__ = p1__24387_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3665__auto__)) {
                  return p1__24387_SHARP_.call(null, y);
                } else {
                  return and__3665__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__3 = function(x, y, z) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__24388_SHARP_) {
                var and__3665__auto__ = p1__24388_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3665__auto__)) {
                  var and__3665__auto____$1 = p1__24388_SHARP_.call(null, y);
                  if (cljs.core.truth_(and__3665__auto____$1)) {
                    return p1__24388_SHARP_.call(null, z);
                  } else {
                    return and__3665__auto____$1;
                  }
                } else {
                  return and__3665__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__4 = function() {
            var G__24397__delegate = function(x, y, z, args) {
              return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(ps__$1) {
                return function(p1__24389_SHARP_) {
                  return cljs.core.every_QMARK_.call(null, p1__24389_SHARP_, args);
                };
              }(ps__$1), ps__$1));
            };
            var G__24397 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__24397__delegate.call(this, x, y, z, args);
            };
            G__24397.cljs$lang$maxFixedArity = 3;
            G__24397.cljs$lang$applyTo = function(arglist__24398) {
              var x = cljs.core.first(arglist__24398);
              arglist__24398 = cljs.core.next(arglist__24398);
              var y = cljs.core.first(arglist__24398);
              arglist__24398 = cljs.core.next(arglist__24398);
              var z = cljs.core.first(arglist__24398);
              var args = cljs.core.rest(arglist__24398);
              return G__24397__delegate(x, y, z, args);
            };
            G__24397.cljs$core$IFn$_invoke$arity$variadic = G__24397__delegate;
            return G__24397;
          }();
          epn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return epn__0.call(this);
              case 1:
                return epn__1.call(this, x);
              case 2:
                return epn__2.call(this, x, y);
              case 3:
                return epn__3.call(this, x, y, z);
              default:
                return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          epn.cljs$lang$maxFixedArity = 3;
          epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
          epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
          epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
          epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
          epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
          epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
          return epn;
        }();
      }(ps__$1);
    };
    var G__24396 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__24396__delegate.call(this, p1, p2, p3, ps);
    };
    G__24396.cljs$lang$maxFixedArity = 3;
    G__24396.cljs$lang$applyTo = function(arglist__24399) {
      var p1 = cljs.core.first(arglist__24399);
      arglist__24399 = cljs.core.next(arglist__24399);
      var p2 = cljs.core.first(arglist__24399);
      arglist__24399 = cljs.core.next(arglist__24399);
      var p3 = cljs.core.first(arglist__24399);
      var ps = cljs.core.rest(arglist__24399);
      return G__24396__delegate(p1, p2, p3, ps);
    };
    G__24396.cljs$core$IFn$_invoke$arity$variadic = G__24396__delegate;
    return G__24396;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__3677__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3677__auto__)) {
          return or__3677__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3677__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3677__auto__)) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__3677__auto____$1)) {
            return or__3677__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__24406__delegate = function(x, y, z, args) {
          var or__3677__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__3677__auto__)) {
            return or__3677__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__24406 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__24406__delegate.call(this, x, y, z, args);
        };
        G__24406.cljs$lang$maxFixedArity = 3;
        G__24406.cljs$lang$applyTo = function(arglist__24407) {
          var x = cljs.core.first(arglist__24407);
          arglist__24407 = cljs.core.next(arglist__24407);
          var y = cljs.core.first(arglist__24407);
          arglist__24407 = cljs.core.next(arglist__24407);
          var z = cljs.core.first(arglist__24407);
          var args = cljs.core.rest(arglist__24407);
          return G__24406__delegate(x, y, z, args);
        };
        G__24406.cljs$core$IFn$_invoke$arity$variadic = G__24406__delegate;
        return G__24406;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__3677__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3677__auto__)) {
          return or__3677__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__3677__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3677__auto__)) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3677__auto____$1)) {
            return or__3677__auto____$1;
          } else {
            var or__3677__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__3677__auto____$2)) {
              return or__3677__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3677__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3677__auto__)) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3677__auto____$1)) {
            return or__3677__auto____$1;
          } else {
            var or__3677__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__3677__auto____$2)) {
              return or__3677__auto____$2;
            } else {
              var or__3677__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__3677__auto____$3)) {
                return or__3677__auto____$3;
              } else {
                var or__3677__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3677__auto____$4)) {
                  return or__3677__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__24408__delegate = function(x, y, z, args) {
          var or__3677__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__3677__auto__)) {
            return or__3677__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3677__auto__) {
              return function(p1__24400_SHARP_) {
                var or__3677__auto____$1 = p1.call(null, p1__24400_SHARP_);
                if (cljs.core.truth_(or__3677__auto____$1)) {
                  return or__3677__auto____$1;
                } else {
                  return p2.call(null, p1__24400_SHARP_);
                }
              };
            }(or__3677__auto__), args);
          }
        };
        var G__24408 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__24408__delegate.call(this, x, y, z, args);
        };
        G__24408.cljs$lang$maxFixedArity = 3;
        G__24408.cljs$lang$applyTo = function(arglist__24409) {
          var x = cljs.core.first(arglist__24409);
          arglist__24409 = cljs.core.next(arglist__24409);
          var y = cljs.core.first(arglist__24409);
          arglist__24409 = cljs.core.next(arglist__24409);
          var z = cljs.core.first(arglist__24409);
          var args = cljs.core.rest(arglist__24409);
          return G__24408__delegate(x, y, z, args);
        };
        G__24408.cljs$core$IFn$_invoke$arity$variadic = G__24408__delegate;
        return G__24408;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__3677__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3677__auto__)) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3677__auto____$1)) {
            return or__3677__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3677__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3677__auto__)) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3677__auto____$1)) {
            return or__3677__auto____$1;
          } else {
            var or__3677__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3677__auto____$2)) {
              return or__3677__auto____$2;
            } else {
              var or__3677__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3677__auto____$3)) {
                return or__3677__auto____$3;
              } else {
                var or__3677__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3677__auto____$4)) {
                  return or__3677__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3677__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3677__auto__)) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3677__auto____$1)) {
            return or__3677__auto____$1;
          } else {
            var or__3677__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3677__auto____$2)) {
              return or__3677__auto____$2;
            } else {
              var or__3677__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3677__auto____$3)) {
                return or__3677__auto____$3;
              } else {
                var or__3677__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3677__auto____$4)) {
                  return or__3677__auto____$4;
                } else {
                  var or__3677__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__3677__auto____$5)) {
                    return or__3677__auto____$5;
                  } else {
                    var or__3677__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__3677__auto____$6)) {
                      return or__3677__auto____$6;
                    } else {
                      var or__3677__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__3677__auto____$7)) {
                        return or__3677__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__24410__delegate = function(x, y, z, args) {
          var or__3677__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__3677__auto__)) {
            return or__3677__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3677__auto__) {
              return function(p1__24401_SHARP_) {
                var or__3677__auto____$1 = p1.call(null, p1__24401_SHARP_);
                if (cljs.core.truth_(or__3677__auto____$1)) {
                  return or__3677__auto____$1;
                } else {
                  var or__3677__auto____$2 = p2.call(null, p1__24401_SHARP_);
                  if (cljs.core.truth_(or__3677__auto____$2)) {
                    return or__3677__auto____$2;
                  } else {
                    return p3.call(null, p1__24401_SHARP_);
                  }
                }
              };
            }(or__3677__auto__), args);
          }
        };
        var G__24410 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__24410__delegate.call(this, x, y, z, args);
        };
        G__24410.cljs$lang$maxFixedArity = 3;
        G__24410.cljs$lang$applyTo = function(arglist__24411) {
          var x = cljs.core.first(arglist__24411);
          arglist__24411 = cljs.core.next(arglist__24411);
          var y = cljs.core.first(arglist__24411);
          arglist__24411 = cljs.core.next(arglist__24411);
          var z = cljs.core.first(arglist__24411);
          var args = cljs.core.rest(arglist__24411);
          return G__24410__delegate(x, y, z, args);
        };
        G__24410.cljs$core$IFn$_invoke$arity$variadic = G__24410__delegate;
        return G__24410;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__24412__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var spn = null;
          var spn__0 = function() {
            return null;
          };
          var spn__1 = function(x) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__24402_SHARP_) {
                return p1__24402_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var spn__2 = function(x, y) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__24403_SHARP_) {
                var or__3677__auto__ = p1__24403_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3677__auto__)) {
                  return or__3677__auto__;
                } else {
                  return p1__24403_SHARP_.call(null, y);
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__3 = function(x, y, z) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__24404_SHARP_) {
                var or__3677__auto__ = p1__24404_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3677__auto__)) {
                  return or__3677__auto__;
                } else {
                  var or__3677__auto____$1 = p1__24404_SHARP_.call(null, y);
                  if (cljs.core.truth_(or__3677__auto____$1)) {
                    return or__3677__auto____$1;
                  } else {
                    return p1__24404_SHARP_.call(null, z);
                  }
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__4 = function() {
            var G__24413__delegate = function(x, y, z, args) {
              var or__3677__auto__ = spn.call(null, x, y, z);
              if (cljs.core.truth_(or__3677__auto__)) {
                return or__3677__auto__;
              } else {
                return cljs.core.some.call(null, function(or__3677__auto__, ps__$1) {
                  return function(p1__24405_SHARP_) {
                    return cljs.core.some.call(null, p1__24405_SHARP_, args);
                  };
                }(or__3677__auto__, ps__$1), ps__$1);
              }
            };
            var G__24413 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__24413__delegate.call(this, x, y, z, args);
            };
            G__24413.cljs$lang$maxFixedArity = 3;
            G__24413.cljs$lang$applyTo = function(arglist__24414) {
              var x = cljs.core.first(arglist__24414);
              arglist__24414 = cljs.core.next(arglist__24414);
              var y = cljs.core.first(arglist__24414);
              arglist__24414 = cljs.core.next(arglist__24414);
              var z = cljs.core.first(arglist__24414);
              var args = cljs.core.rest(arglist__24414);
              return G__24413__delegate(x, y, z, args);
            };
            G__24413.cljs$core$IFn$_invoke$arity$variadic = G__24413__delegate;
            return G__24413;
          }();
          spn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return spn__0.call(this);
              case 1:
                return spn__1.call(this, x);
              case 2:
                return spn__2.call(this, x, y);
              case 3:
                return spn__3.call(this, x, y, z);
              default:
                return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          spn.cljs$lang$maxFixedArity = 3;
          spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
          spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
          spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
          spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
          spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
          spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
          return spn;
        }();
      }(ps__$1);
    };
    var G__24412 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__24412__delegate.call(this, p1, p2, p3, ps);
    };
    G__24412.cljs$lang$maxFixedArity = 3;
    G__24412.cljs$lang$applyTo = function(arglist__24415) {
      var p1 = cljs.core.first(arglist__24415);
      arglist__24415 = cljs.core.next(arglist__24415);
      var p2 = cljs.core.first(arglist__24415);
      arglist__24415 = cljs.core.next(arglist__24415);
      var p3 = cljs.core.first(arglist__24415);
      var ps = cljs.core.rest(arglist__24415);
      return G__24412__delegate(p1, p2, p3, ps);
    };
    G__24412.cljs$core$IFn$_invoke$arity$variadic = G__24412__delegate;
    return G__24412;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__1 = function(f) {
    return function(rf) {
      return function() {
        var G__24417 = null;
        var G__24417__0 = function() {
          return rf.call(null);
        };
        var G__24417__1 = function(result) {
          return rf.call(null, result);
        };
        var G__24417__2 = function(result, input) {
          return rf.call(null, result, f.call(null, input));
        };
        var G__24417__3 = function() {
          var G__24418__delegate = function(result, input, inputs) {
            return rf.call(null, result, cljs.core.apply.call(null, f, input, inputs));
          };
          var G__24418 = function(result, input, var_args) {
            var inputs = null;
            if (arguments.length > 2) {
              inputs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
            }
            return G__24418__delegate.call(this, result, input, inputs);
          };
          G__24418.cljs$lang$maxFixedArity = 2;
          G__24418.cljs$lang$applyTo = function(arglist__24419) {
            var result = cljs.core.first(arglist__24419);
            arglist__24419 = cljs.core.next(arglist__24419);
            var input = cljs.core.first(arglist__24419);
            var inputs = cljs.core.rest(arglist__24419);
            return G__24418__delegate(result, input, inputs);
          };
          G__24418.cljs$core$IFn$_invoke$arity$variadic = G__24418__delegate;
          return G__24418;
        }();
        G__24417 = function(result, input, var_args) {
          var inputs = var_args;
          switch(arguments.length) {
            case 0:
              return G__24417__0.call(this);
            case 1:
              return G__24417__1.call(this, result);
            case 2:
              return G__24417__2.call(this, result, input);
            default:
              return G__24417__3.cljs$core$IFn$_invoke$arity$variadic(result, input, cljs.core.array_seq(arguments, 2));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__24417.cljs$lang$maxFixedArity = 2;
        G__24417.cljs$lang$applyTo = G__24417__3.cljs$lang$applyTo;
        G__24417.cljs$core$IFn$_invoke$arity$0 = G__24417__0;
        G__24417.cljs$core$IFn$_invoke$arity$1 = G__24417__1;
        G__24417.cljs$core$IFn$_invoke$arity$2 = G__24417__2;
        G__24417.cljs$core$IFn$_invoke$arity$variadic = G__24417__3.cljs$core$IFn$_invoke$arity$variadic;
        return G__24417;
      }();
    };
  };
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4222__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4222__auto__) {
        var s = temp__4222__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4547__auto___24420 = size;
          var i_24421 = 0;
          while (true) {
            if (i_24421 < n__4547__auto___24420) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_24421)));
              var G__24422 = i_24421 + 1;
              i_24421 = G__24422;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && s2 && s3) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__24423__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(step) {
        return function(p1__24416_SHARP_) {
          return cljs.core.apply.call(null, f, p1__24416_SHARP_);
        };
      }(step), step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__24423 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__24423__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__24423.cljs$lang$maxFixedArity = 4;
    G__24423.cljs$lang$applyTo = function(arglist__24424) {
      var f = cljs.core.first(arglist__24424);
      arglist__24424 = cljs.core.next(arglist__24424);
      var c1 = cljs.core.first(arglist__24424);
      arglist__24424 = cljs.core.next(arglist__24424);
      var c2 = cljs.core.first(arglist__24424);
      arglist__24424 = cljs.core.next(arglist__24424);
      var c3 = cljs.core.first(arglist__24424);
      var colls = cljs.core.rest(arglist__24424);
      return G__24423__delegate(f, c1, c2, c3, colls);
    };
    G__24423.cljs$core$IFn$_invoke$arity$variadic = G__24423__delegate;
    return G__24423;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return map__1.call(this, f);
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$1 = map__1;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function() {
  var take = null;
  var take__1 = function(n) {
    return function(rf) {
      var na = cljs.core.atom.call(null, n);
      return function(na) {
        return function() {
          var G__24425 = null;
          var G__24425__0 = function() {
            return rf.call(null);
          };
          var G__24425__1 = function(result) {
            return rf.call(null, result);
          };
          var G__24425__2 = function(result, input) {
            var n__$1 = cljs.core.deref.call(null, na);
            var nn = cljs.core.swap_BANG_.call(null, na, cljs.core.dec);
            var result__$1 = n__$1 > 0 ? rf.call(null, result, input) : result;
            if (!(nn > 0)) {
              return cljs.core.reduced.call(null, result__$1);
            } else {
              return result__$1;
            }
          };
          G__24425 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__24425__0.call(this);
              case 1:
                return G__24425__1.call(this, result);
              case 2:
                return G__24425__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__24425.cljs$core$IFn$_invoke$arity$0 = G__24425__0;
          G__24425.cljs$core$IFn$_invoke$arity$1 = G__24425__1;
          G__24425.cljs$core$IFn$_invoke$arity$2 = G__24425__2;
          return G__24425;
        }();
      }(na);
    };
  };
  var take__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      if (n > 0) {
        var temp__4222__auto__ = cljs.core.seq.call(null, coll);
        if (temp__4222__auto__) {
          var s = temp__4222__auto__;
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  take = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return take__1.call(this, n);
      case 2:
        return take__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take.cljs$core$IFn$_invoke$arity$1 = take__1;
  take.cljs$core$IFn$_invoke$arity$2 = take__2;
  return take;
}();
cljs.core.drop = function() {
  var drop = null;
  var drop__1 = function(n) {
    return function(rf) {
      var na = cljs.core.atom.call(null, n);
      return function(na) {
        return function() {
          var G__24426 = null;
          var G__24426__0 = function() {
            return rf.call(null);
          };
          var G__24426__1 = function(result) {
            return rf.call(null, result);
          };
          var G__24426__2 = function(result, input) {
            var n__$1 = cljs.core.deref.call(null, na);
            cljs.core.swap_BANG_.call(null, na, cljs.core.dec);
            if (n__$1 > 0) {
              return result;
            } else {
              return rf.call(null, result, input);
            }
          };
          G__24426 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__24426__0.call(this);
              case 1:
                return G__24426__1.call(this, result);
              case 2:
                return G__24426__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__24426.cljs$core$IFn$_invoke$arity$0 = G__24426__0;
          G__24426.cljs$core$IFn$_invoke$arity$1 = G__24426__1;
          G__24426.cljs$core$IFn$_invoke$arity$2 = G__24426__2;
          return G__24426;
        }();
      }(na);
    };
  };
  var drop__2 = function(n, coll) {
    var step = function(n__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq.call(null, coll__$1);
        if (n__$1 > 0 && s) {
          var G__24427 = n__$1 - 1;
          var G__24428 = cljs.core.rest.call(null, s);
          n__$1 = G__24427;
          coll__$1 = G__24428;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step.call(null, n, coll);
      };
    }(step), null, null);
  };
  drop = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return drop__1.call(this, n);
      case 2:
        return drop__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop.cljs$core$IFn$_invoke$arity$1 = drop__1;
  drop.cljs$core$IFn$_invoke$arity$2 = drop__2;
  return drop;
}();
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__24429 = cljs.core.next.call(null, s);
      var G__24430 = cljs.core.next.call(null, lead);
      s = G__24429;
      lead = G__24430;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function() {
  var drop_while = null;
  var drop_while__1 = function(pred) {
    return function(rf) {
      var da = cljs.core.atom.call(null, true);
      return function(da) {
        return function() {
          var G__24431 = null;
          var G__24431__0 = function() {
            return rf.call(null);
          };
          var G__24431__1 = function(result) {
            return rf.call(null, result);
          };
          var G__24431__2 = function(result, input) {
            var drop_QMARK_ = cljs.core.deref.call(null, da);
            if (cljs.core.truth_(function() {
              var and__3665__auto__ = drop_QMARK_;
              if (cljs.core.truth_(and__3665__auto__)) {
                return pred.call(null, input);
              } else {
                return and__3665__auto__;
              }
            }())) {
              return result;
            } else {
              cljs.core.reset_BANG_.call(null, da, null);
              return rf.call(null, result, input);
            }
          };
          G__24431 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__24431__0.call(this);
              case 1:
                return G__24431__1.call(this, result);
              case 2:
                return G__24431__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__24431.cljs$core$IFn$_invoke$arity$0 = G__24431__0;
          G__24431.cljs$core$IFn$_invoke$arity$1 = G__24431__1;
          G__24431.cljs$core$IFn$_invoke$arity$2 = G__24431__2;
          return G__24431;
        }();
      }(da);
    };
  };
  var drop_while__2 = function(pred, coll) {
    var step = function(pred__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq.call(null, coll__$1);
        if (cljs.core.truth_(function() {
          var and__3665__auto__ = s;
          if (and__3665__auto__) {
            return pred__$1.call(null, cljs.core.first.call(null, s));
          } else {
            return and__3665__auto__;
          }
        }())) {
          var G__24432 = pred__$1;
          var G__24433 = cljs.core.rest.call(null, s);
          pred__$1 = G__24432;
          coll__$1 = G__24433;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step.call(null, pred, coll);
      };
    }(step), null, null);
  };
  drop_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return drop_while__1.call(this, pred);
      case 2:
        return drop_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_while.cljs$core$IFn$_invoke$arity$1 = drop_while__1;
  drop_while.cljs$core$IFn$_invoke$arity$2 = drop_while__2;
  return drop_while;
}();
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4222__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4222__auto__) {
      var s = temp__4222__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__24434__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__24434 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__24434__delegate.call(this, c1, c2, colls);
    };
    G__24434.cljs$lang$maxFixedArity = 2;
    G__24434.cljs$lang$applyTo = function(arglist__24435) {
      var c1 = cljs.core.first(arglist__24435);
      arglist__24435 = cljs.core.next(arglist__24435);
      var c2 = cljs.core.first(arglist__24435);
      var colls = cljs.core.rest(arglist__24435);
      return G__24434__delegate(c1, c2, colls);
    };
    G__24434.cljs$core$IFn$_invoke$arity$variadic = G__24434__delegate;
    return G__24434;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4220__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4220__auto__) {
        var coll__$1 = temp__4220__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__1 = function(f) {
    return cljs.core.comp.call(null, cljs.core.map.call(null, f), cljs.core.cat);
  };
  var mapcat__2 = function() {
    var G__24436__delegate = function(f, colls) {
      return cljs.core.apply.call(null, cljs.core.concat, cljs.core.apply.call(null, cljs.core.map, f, colls));
    };
    var G__24436 = function(f, var_args) {
      var colls = null;
      if (arguments.length > 1) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__24436__delegate.call(this, f, colls);
    };
    G__24436.cljs$lang$maxFixedArity = 1;
    G__24436.cljs$lang$applyTo = function(arglist__24437) {
      var f = cljs.core.first(arglist__24437);
      var colls = cljs.core.rest(arglist__24437);
      return G__24436__delegate(f, colls);
    };
    G__24436.cljs$core$IFn$_invoke$arity$variadic = G__24436__delegate;
    return G__24436;
  }();
  mapcat = function(f, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return mapcat__1.call(this, f);
      default:
        return mapcat__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 1;
  mapcat.cljs$lang$applyTo = mapcat__2.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$1 = mapcat__1;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__2.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function() {
  var filter = null;
  var filter__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__24438 = null;
        var G__24438__0 = function() {
          return rf.call(null);
        };
        var G__24438__1 = function(result) {
          return rf.call(null, result);
        };
        var G__24438__2 = function(result, input) {
          if (cljs.core.truth_(pred.call(null, input))) {
            return rf.call(null, result, input);
          } else {
            return result;
          }
        };
        G__24438 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__24438__0.call(this);
            case 1:
              return G__24438__1.call(this, result);
            case 2:
              return G__24438__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__24438.cljs$core$IFn$_invoke$arity$0 = G__24438__0;
        G__24438.cljs$core$IFn$_invoke$arity$1 = G__24438__1;
        G__24438.cljs$core$IFn$_invoke$arity$2 = G__24438__2;
        return G__24438;
      }();
    };
  };
  var filter__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4222__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4222__auto__) {
        var s = temp__4222__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4547__auto___24439 = size;
          var i_24440 = 0;
          while (true) {
            if (i_24440 < n__4547__auto___24439) {
              if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_24440)))) {
                cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_24440));
              } else {
              }
              var G__24441 = i_24440 + 1;
              i_24440 = G__24441;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
        } else {
          var f = cljs.core.first.call(null, s);
          var r = cljs.core.rest.call(null, s);
          if (cljs.core.truth_(pred.call(null, f))) {
            return cljs.core.cons.call(null, f, filter.call(null, pred, r));
          } else {
            return filter.call(null, pred, r);
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  filter = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return filter__1.call(this, pred);
      case 2:
        return filter__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter.cljs$core$IFn$_invoke$arity$1 = filter__1;
  filter.cljs$core$IFn$_invoke$arity$2 = filter__2;
  return filter;
}();
cljs.core.remove = function() {
  var remove = null;
  var remove__1 = function(pred) {
    return cljs.core.filter.call(null, cljs.core.complement.call(null, pred));
  };
  var remove__2 = function(pred, coll) {
    return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
  };
  remove = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return remove__1.call(this, pred);
      case 2:
        return remove__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove.cljs$core$IFn$_invoke$arity$1 = remove__1;
  remove.cljs$core$IFn$_invoke$arity$2 = remove__2;
  return remove;
}();
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__24442_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__24442_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function() {
  var into = null;
  var into__2 = function(to, from) {
    if (!(to == null)) {
      if (function() {
        var G__24445 = to;
        if (G__24445) {
          var bit__4334__auto__ = G__24445.cljs$lang$protocol_mask$partition1$ & 4;
          if (bit__4334__auto__ || G__24445.cljs$core$IEditableCollection$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from)), cljs.core.meta.call(null, to));
      } else {
        return cljs.core.reduce.call(null, cljs.core._conj, to, from);
      }
    } else {
      return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
    }
  };
  var into__3 = function(to, xform, from) {
    if (function() {
      var G__24446 = to;
      if (G__24446) {
        var bit__4334__auto__ = G__24446.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4334__auto__ || G__24446.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.transduce.call(null, xform, cljs.core.conj_BANG_, cljs.core.transient$.call(null, to), from)), cljs.core.meta.call(null, to));
    } else {
      return cljs.core.transduce.call(null, xform, cljs.core.conj, to, from);
    }
  };
  into = function(to, xform, from) {
    switch(arguments.length) {
      case 2:
        return into__2.call(this, to, xform);
      case 3:
        return into__3.call(this, to, xform, from);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into.cljs$core$IFn$_invoke$arity$2 = into__2;
  into.cljs$core$IFn$_invoke$arity$3 = into__3;
  return into;
}();
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__24447__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__24447 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__24447__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__24447.cljs$lang$maxFixedArity = 4;
    G__24447.cljs$lang$applyTo = function(arglist__24448) {
      var f = cljs.core.first(arglist__24448);
      arglist__24448 = cljs.core.next(arglist__24448);
      var c1 = cljs.core.first(arglist__24448);
      arglist__24448 = cljs.core.next(arglist__24448);
      var c2 = cljs.core.first(arglist__24448);
      arglist__24448 = cljs.core.next(arglist__24448);
      var c3 = cljs.core.first(arglist__24448);
      var colls = cljs.core.rest(arglist__24448);
      return G__24447__delegate(f, c1, c2, c3, colls);
    };
    G__24447.cljs$core$IFn$_invoke$arity$variadic = G__24447__delegate;
    return G__24447;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4222__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4222__auto__) {
        var s = temp__4222__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4222__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4222__auto__) {
        var s = temp__4222__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__24450 = m__$1;
          if (G__24450) {
            var bit__4341__auto__ = G__24450.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4341__auto__ || G__24450.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__24450.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__24450);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__24450);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__24451 = sentinel;
            var G__24452 = m__$2;
            var G__24453 = cljs.core.next.call(null, ks__$1);
            sentinel = G__24451;
            m__$1 = G__24452;
            ks__$1 = G__24453;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__24454, v) {
  var vec__24456 = p__24454;
  var k = cljs.core.nth.call(null, vec__24456, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__24456, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__24457, f) {
    var vec__24467 = p__24457;
    var k = cljs.core.nth.call(null, vec__24467, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__24467, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__24458, f, a) {
    var vec__24468 = p__24458;
    var k = cljs.core.nth.call(null, vec__24468, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__24468, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__24459, f, a, b) {
    var vec__24469 = p__24459;
    var k = cljs.core.nth.call(null, vec__24469, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__24469, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__24460, f, a, b, c) {
    var vec__24470 = p__24460;
    var k = cljs.core.nth.call(null, vec__24470, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__24470, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__24472__delegate = function(m, p__24461, f, a, b, c, args) {
      var vec__24471 = p__24461;
      var k = cljs.core.nth.call(null, vec__24471, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__24471, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__24472 = function(m, p__24461, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__24472__delegate.call(this, m, p__24461, f, a, b, c, args);
    };
    G__24472.cljs$lang$maxFixedArity = 6;
    G__24472.cljs$lang$applyTo = function(arglist__24473) {
      var m = cljs.core.first(arglist__24473);
      arglist__24473 = cljs.core.next(arglist__24473);
      var p__24461 = cljs.core.first(arglist__24473);
      arglist__24473 = cljs.core.next(arglist__24473);
      var f = cljs.core.first(arglist__24473);
      arglist__24473 = cljs.core.next(arglist__24473);
      var a = cljs.core.first(arglist__24473);
      arglist__24473 = cljs.core.next(arglist__24473);
      var b = cljs.core.first(arglist__24473);
      arglist__24473 = cljs.core.next(arglist__24473);
      var c = cljs.core.first(arglist__24473);
      var args = cljs.core.rest(arglist__24473);
      return G__24472__delegate(m, p__24461, f, a, b, c, args);
    };
    G__24472.cljs$core$IFn$_invoke$arity$variadic = G__24472__delegate;
    return G__24472;
  }();
  update_in = function(m, p__24461, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__24461, f);
      case 4:
        return update_in__4.call(this, m, p__24461, f, a);
      case 5:
        return update_in__5.call(this, m, p__24461, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__24461, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__24461, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4257__auto__, writer__4258__auto__, opts__4259__auto__) {
  return cljs.core._write.call(null, writer__4258__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__24474 = ll - 5;
      var G__24475 = r;
      ll = G__24474;
      ret = G__24475;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error("No item " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(i) + " in vector of length " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cnt));
};
cljs.core.first_array_for_longvec = function first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__24476 = cljs.core.pv_aget.call(null, node, 0);
      var G__24477 = level - 5;
      node = G__24476;
      level = G__24477;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off.call(null, pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__24478 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
        var G__24479 = level - 5;
        node = G__24478;
        level = G__24479;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for.call(null, pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/RangedIterator");
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for.call(null, self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.__GT_RangedIterator = function __GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count.call(null, v) ? cljs.core.unchecked_array_for.call(null, v, i) : null, v, start, end);
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/PersistentVector");
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = f.call(null, init__$2, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
              return init__$3;
            } else {
              var G__24481 = j + 1;
              var G__24482 = init__$3;
              j = G__24481;
              init__$2 = G__24482;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__24483 = i + len;
        var G__24484 = init__$2;
        i = G__24483;
        init__$1 = G__24484;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for.call(null, coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= n) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, val);
    } else {
      throw new Error("Index " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + " out of bounds  [0," + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt) + "]");
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator.call(null, this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for.call(null, coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4088__auto__ = self__.__hash;
  if (!(h__4088__auto__ == null)) {
    return h__4088__auto__;
  } else {
    var h__4088__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4088__auto____$1;
    return h__4088__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count.call(null, other)) {
      var me_iter = cljs.core._iterator.call(null, coll__$1);
      var you_iter = cljs.core._iterator.call(null, other);
      while (true) {
        if (cljs.core.truth_(me_iter.hasNext())) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.call(null, x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential.call(null, coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = f.call(null, init__$2, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
              return init__$3;
            } else {
              var G__24485 = j + 1;
              var G__24486 = init__$3;
              j = G__24485;
              init__$2 = G__24486;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__24487 = i + len;
        var G__24488 = init__$2;
        i = G__24487;
        init__$1 = G__24488;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      return cljs.core.chunked_seq.call(null, coll__$1, cljs.core.first_array_for_longvec.call(null, coll__$1), 0, 0);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4547__auto___24489 = len;
    var i_24490 = 0;
    while (true) {
      if (i_24490 < n__4547__auto___24489) {
        new_tail[i_24490] = self__.tail[i_24490];
        var G__24491 = i_24490 + 1;
        i_24490 = G__24491;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__24492 = null;
  var G__24492__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__24492__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__24492 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__24492__2.call(this, self__, k);
      case 3:
        return G__24492__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__24492.cljs$core$IFn$_invoke$arity$2 = G__24492__2;
  G__24492.cljs$core$IFn$_invoke$arity$3 = G__24492__3;
  return G__24492;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args24480) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args24480)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__24493 = i + 1;
        var G__24494 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__24493;
        out = G__24494;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray(args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__24495) {
    var args = cljs.core.seq(arglist__24495);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4088__auto__ = self__.__hash;
  if (!(h__4088__auto__ == null)) {
    return h__4088__auto__;
  } else {
    var h__4088__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4088__auto____$1;
    return h__4088__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return null;
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 166617887;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/Subvec");
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__3984__auto__ = self__.end;
    var y__3985__auto__ = v_pos + 1;
    return x__3984__auto__ > y__3985__auto__ ? x__3984__auto__ : y__3985__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4088__auto__ = self__.__hash;
  if (!(h__4088__auto__ == null)) {
    return h__4088__auto__;
  } else {
    var h__4088__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4088__auto____$1;
    return h__4088__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return subvec_seq.call(null, i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.call = function() {
  var G__24497 = null;
  var G__24497__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__24497__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__24497 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__24497__2.call(this, self__, k);
      case 3:
        return G__24497__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__24497.cljs$core$IFn$_invoke$arity$2 = G__24497__2;
  G__24497.cljs$core$IFn$_invoke$arity$3 = G__24497__3;
  return G__24497;
}();
cljs.core.Subvec.prototype.apply = function(self__, args24496) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args24496)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__24498 = meta;
      var G__24499 = v.v;
      var G__24500 = v.start + start;
      var G__24501 = v.start + end;
      var G__24502 = __hash;
      meta = G__24498;
      v = G__24499;
      start = G__24500;
      end = G__24501;
      __hash = G__24502;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj24506 = {};
    return obj24506;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off.call(null, tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__24507 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
        var G__24508 = level - 5;
        node = G__24507;
        level = G__24508;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/TransientVector");
};
cljs.core.TransientVector.prototype.call = function() {
  var G__24510 = null;
  var G__24510__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__24510__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__24510 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__24510__2.call(this, self__, k);
      case 3:
        return G__24510__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__24510.cljs$core$IFn$_invoke$arity$2 = G__24510__2;
  G__24510.cljs$core$IFn$_invoke$arity$3 = G__24510__3;
  return G__24510;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args24509) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args24509)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset.call(null, node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        throw new Error("Index " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + " out of bounds for TransientVector of length" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4088__auto__ = self__.__hash;
  if (!(h__4088__auto__ == null)) {
    return h__4088__auto__;
  } else {
    var h__4088__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4088__auto____$1;
    return h__4088__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4220__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4220__auto__) {
    var f1 = temp__4220__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/PersistentQueue");
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4220__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4220__auto__) {
      var f1 = temp__4220__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4088__auto__ = self__.__hash;
  if (!(h__4088__auto__ == null)) {
    return h__4088__auto__;
  } else {
    var h__4088__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4088__auto____$1;
    return h__4088__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__3677__auto__ = self__.front;
    if (cljs.core.truth_(or__3677__auto__)) {
      return or__3677__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3677__auto__ = self__.rear;
      if (cljs.core.truth_(or__3677__auto__)) {
        return or__3677__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/NeverEquiv");
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__24511 = i + incr;
        i = G__24511;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__24512 = i + 1;
      var G__24513 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__24512;
      out = G__24513;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj24517 = {};
    return obj24517;
  }();
  var l = ks.length;
  var i_24518 = 0;
  while (true) {
    if (i_24518 < l) {
      var k_24519 = ks[i_24518];
      new_obj[k_24519] = obj[k_24519];
      var G__24520 = i_24518 + 1;
      i_24518 = G__24520;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/ObjMap");
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__24523 = cljs.core.rest.call(null, keys__$1);
        var G__24524 = init__$2;
        keys__$1 = G__24523;
        init__$1 = G__24524;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4088__auto__ = self__.__hash;
  if (!(h__4088__auto__ == null)) {
    return h__4088__auto__;
  } else {
    var h__4088__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4088__auto____$1;
    return h__4088__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(coll__$1) {
      return function(p1__24521_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__24521_SHARP_, self__.strobj[p1__24521_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__24525 = null;
  var G__24525__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__24525__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__24525 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__24525__2.call(this, self__, k);
      case 3:
        return G__24525__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__24525.cljs$core$IFn$_invoke$arity$2 = G__24525__2;
  G__24525.cljs$core$IFn$_invoke$arity$3 = G__24525__3;
  return G__24525;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args24522) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args24522)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj24527 = {};
  return obj24527;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/ES6Iterator");
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first.call(null, self__.s);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":x};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_ES6Iterator = function __GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq.call(null, coll));
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__24528 = cljs.core.first.call(null, self__.s);
    var k = cljs.core.nth.call(null, vec__24528, 0, null);
    var v = cljs.core.nth.call(null, vec__24528, 1, null);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":[k, v]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_ES6EntriesIterator = function __GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq.call(null, coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first.call(null, self__.s);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":[x, x]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_ES6SetEntriesIterator = function __GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq.call(null, coll));
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__24529 = i + 2;
        i = G__24529;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        var G__24530 = i + 2;
        i = G__24530;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        var G__24531 = i + 2;
        i = G__24531;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__24532 = i + 2;
        i = G__24532;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        var G__24533 = i + 2;
        i = G__24533;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_24534 = 0;
  while (true) {
    if (i_24534 < l) {
      narr[i_24534] = arr[i_24534];
      var G__24535 = i_24534 + 1;
      i_24534 = G__24535;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.__GT_PersistentArrayMapIterator = function __GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__24537 = cljs.core.seq.call(null, coll);
  var chunk__24538 = null;
  var count__24539 = 0;
  var i__24540 = 0;
  while (true) {
    if (i__24540 < count__24539) {
      var vec__24541 = cljs.core._nth.call(null, chunk__24538, i__24540);
      var k = cljs.core.nth.call(null, vec__24541, 0, null);
      var v = cljs.core.nth.call(null, vec__24541, 1, null);
      f.call(null, v, k);
      var G__24547 = seq__24537;
      var G__24548 = chunk__24538;
      var G__24549 = count__24539;
      var G__24550 = i__24540 + 1;
      seq__24537 = G__24547;
      chunk__24538 = G__24548;
      count__24539 = G__24549;
      i__24540 = G__24550;
      continue;
    } else {
      var temp__4222__auto__ = cljs.core.seq.call(null, seq__24537);
      if (temp__4222__auto__) {
        var seq__24537__$1 = temp__4222__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__24537__$1)) {
          var c__4447__auto__ = cljs.core.chunk_first.call(null, seq__24537__$1);
          var G__24551 = cljs.core.chunk_rest.call(null, seq__24537__$1);
          var G__24552 = c__4447__auto__;
          var G__24553 = cljs.core.count.call(null, c__4447__auto__);
          var G__24554 = 0;
          seq__24537 = G__24551;
          chunk__24538 = G__24552;
          count__24539 = G__24553;
          i__24540 = G__24554;
          continue;
        } else {
          var vec__24542 = cljs.core.first.call(null, seq__24537__$1);
          var k = cljs.core.nth.call(null, vec__24542, 0, null);
          var v = cljs.core.nth.call(null, vec__24542, 1, null);
          f.call(null, v, k);
          var G__24555 = cljs.core.next.call(null, seq__24537__$1);
          var G__24556 = null;
          var G__24557 = 0;
          var G__24558 = 0;
          seq__24537 = G__24555;
          chunk__24538 = G__24556;
          count__24539 = G__24557;
          i__24540 = G__24558;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__24559 = i + 2;
        var G__24560 = init__$2;
        i = G__24559;
        init__$1 = G__24560;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4088__auto__ = self__.__hash;
  if (!(h__4088__auto__ == null)) {
    return h__4088__auto__;
  } else {
    var h__4088__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4088__auto____$1;
    return h__4088__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (function() {
    var G__24543 = other;
    if (G__24543) {
      var bit__4334__auto__ = G__24543.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4334__auto__ || G__24543.cljs$core$IMap$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === cljs.core._count.call(null, other__$1)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = cljs.core._lookup.call(null, other__$1, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.call(null, self__.arr[i + 1], v)) {
              var G__24561 = i + 2;
              i = G__24561;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_map.call(null, coll__$1, other);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj24545 = {};
    return obj24545;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__24562 = s + 2;
            var G__24563 = d;
            s = G__24562;
            d = G__24563;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__24564 = s + 2;
            var G__24565 = d + 2;
            s = G__24564;
            d = G__24565;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__24546 = cljs.core.aclone.call(null, self__.arr);
        G__24546[idx + 1] = v;
        return G__24546;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__24566 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__24567 = cljs.core.next.call(null, es);
          ret = G__24566;
          es = G__24567;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__24568 = null;
  var G__24568__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__24568__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__24568 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__24568__2.call(this, self__, k);
      case 3:
        return G__24568__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__24568.cljs$core$IFn$_invoke$arity$2 = G__24568__2;
  G__24568.cljs$core$IFn$_invoke$arity$3 = G__24568__3;
  return G__24568;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args24536) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args24536)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__24569 = i + 2;
        var G__24570 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__24569;
        ret = G__24570;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__24571_24573 = self__.arr;
      G__24571_24573.pop();
      G__24571_24573.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__24572 = o;
      if (G__24572) {
        var bit__4341__auto__ = G__24572.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4341__auto__ || G__24572.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__24572.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__24572);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__24572);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4220__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4220__auto__)) {
          var e = temp__4220__auto__;
          var G__24574 = cljs.core.next.call(null, es);
          var G__24575 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__24574;
          tcoll__$2 = G__24575;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__24576 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__24577 = i + 2;
      out = G__24576;
      i = G__24577;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4257__auto__, writer__4258__auto__, opts__4259__auto__) {
  return cljs.core._write.call(null, writer__4258__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.call(null, key, other);
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__24580 = cljs.core.aclone.call(null, arr);
    G__24580[i] = a;
    return G__24580;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__24581 = cljs.core.aclone.call(null, arr);
    G__24581[i] = a;
    G__24581[j] = b;
    return G__24581;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__24582 = i + 2;
        var G__24583 = init__$2;
        i = G__24582;
        init__$1 = G__24583;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_24584 = 0;
        var j_24585 = 0;
        while (true) {
          if (i_24584 < 32) {
            if ((self__.bitmap >>> i_24584 & 1) === 0) {
              var G__24586 = i_24584 + 1;
              var G__24587 = j_24585;
              i_24584 = G__24586;
              j_24585 = G__24587;
              continue;
            } else {
              nodes[i_24584] = !(self__.arr[j_24585] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_24585]), self__.arr[j_24585], self__.arr[j_24585 + 1], added_leaf_QMARK_) : self__.arr[j_24585 + 1];
              var G__24588 = i_24584 + 1;
              var G__24589 = j_24585 + 2;
              i_24584 = G__24588;
              j_24585 = G__24589;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_24590 = 0;
      var j_24591 = 0;
      while (true) {
        if (i_24590 < 32) {
          if ((self__.bitmap >>> i_24590 & 1) === 0) {
            var G__24592 = i_24590 + 1;
            var G__24593 = j_24591;
            i_24590 = G__24592;
            j_24591 = G__24593;
            continue;
          } else {
            nodes[i_24590] = !(self__.arr[j_24591] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_24591]), self__.arr[j_24591], self__.arr[j_24591 + 1], added_leaf_QMARK_) : self__.arr[j_24591 + 1];
            var G__24594 = i_24590 + 1;
            var G__24595 = j_24591 + 2;
            i_24590 = G__24594;
            j_24591 = G__24595;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__24596 = i + 1;
        var G__24597 = j + 2;
        var G__24598 = bitmap | 1 << i;
        i = G__24596;
        j = G__24597;
        bitmap = G__24598;
        continue;
      } else {
        var G__24599 = i + 1;
        var G__24600 = j;
        var G__24601 = bitmap;
        i = G__24599;
        j = G__24600;
        bitmap = G__24601;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/ArrayNode");
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__24602 = i + 1;
          var G__24603 = init__$2;
          i = G__24602;
          init__$1 = G__24603;
          continue;
        }
      } else {
        var G__24604 = i + 1;
        var G__24605 = init__$1;
        i = G__24604;
        init__$1 = G__24605;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__24606 = i + 2;
        i = G__24606;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
    }
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/NodeSeq");
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4088__auto__ = self__.__hash;
  if (!(h__4088__auto__ == null)) {
    return h__4088__auto__;
  } else {
    var h__4088__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4088__auto____$1;
    return h__4088__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4220__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4220__auto__)) {
              var node = temp__4220__auto__;
              var temp__4220__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4220__auto____$1)) {
                var node_seq = temp__4220__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__24607 = j + 2;
                j = G__24607;
                continue;
              }
            } else {
              var G__24608 = j + 2;
              j = G__24608;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4088__auto__ = self__.__hash;
  if (!(h__4088__auto__ == null)) {
    return h__4088__auto__;
  } else {
    var h__4088__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4088__auto____$1;
    return h__4088__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4220__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4220__auto__)) {
            var nj = temp__4220__auto__;
            var temp__4220__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4220__auto____$1)) {
              var ns = temp__4220__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__24609 = j + 1;
              j = G__24609;
              continue;
            }
          } else {
            var G__24610 = j + 1;
            j = G__24610;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__24612 = cljs.core.seq.call(null, coll);
  var chunk__24613 = null;
  var count__24614 = 0;
  var i__24615 = 0;
  while (true) {
    if (i__24615 < count__24614) {
      var vec__24616 = cljs.core._nth.call(null, chunk__24613, i__24615);
      var k = cljs.core.nth.call(null, vec__24616, 0, null);
      var v = cljs.core.nth.call(null, vec__24616, 1, null);
      f.call(null, v, k);
      var G__24620 = seq__24612;
      var G__24621 = chunk__24613;
      var G__24622 = count__24614;
      var G__24623 = i__24615 + 1;
      seq__24612 = G__24620;
      chunk__24613 = G__24621;
      count__24614 = G__24622;
      i__24615 = G__24623;
      continue;
    } else {
      var temp__4222__auto__ = cljs.core.seq.call(null, seq__24612);
      if (temp__4222__auto__) {
        var seq__24612__$1 = temp__4222__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__24612__$1)) {
          var c__4447__auto__ = cljs.core.chunk_first.call(null, seq__24612__$1);
          var G__24624 = cljs.core.chunk_rest.call(null, seq__24612__$1);
          var G__24625 = c__4447__auto__;
          var G__24626 = cljs.core.count.call(null, c__4447__auto__);
          var G__24627 = 0;
          seq__24612 = G__24624;
          chunk__24613 = G__24625;
          count__24614 = G__24626;
          i__24615 = G__24627;
          continue;
        } else {
          var vec__24617 = cljs.core.first.call(null, seq__24612__$1);
          var k = cljs.core.nth.call(null, vec__24617, 0, null);
          var v = cljs.core.nth.call(null, vec__24617, 1, null);
          f.call(null, v, k);
          var G__24628 = cljs.core.next.call(null, seq__24612__$1);
          var G__24629 = null;
          var G__24630 = 0;
          var G__24631 = 0;
          seq__24612 = G__24628;
          chunk__24613 = G__24629;
          count__24614 = G__24630;
          i__24615 = G__24631;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4088__auto__ = self__.__hash;
  if (!(h__4088__auto__ == null)) {
    return h__4088__auto__;
  } else {
    var h__4088__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4088__auto____$1;
    return h__4088__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj24619 = {};
    return obj24619;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__24632 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__24633 = cljs.core.next.call(null, es);
          ret = G__24632;
          es = G__24633;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__24634 = null;
  var G__24634__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__24634__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__24634 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__24634__2.call(this, self__, k);
      case 3:
        return G__24634__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__24634.cljs$core$IFn$_invoke$arity$2 = G__24634__2;
  G__24634.cljs$core$IFn$_invoke$arity$3 = G__24634__3;
  return G__24634;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args24611) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args24611)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__24635 = i + 1;
      var G__24636 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__24635;
      out = G__24636;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/TransientHashMap");
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__24637 = o;
      if (G__24637) {
        var bit__4341__auto__ = G__24637.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4341__auto__ || G__24637.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__24637.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__24637);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__24637);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4220__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4220__auto__)) {
          var e = temp__4220__auto__;
          var G__24638 = cljs.core.next.call(null, es);
          var G__24639 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__24638;
          tcoll__$1 = G__24639;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__24640 = ascending_QMARK_ ? t.left : t.right;
      var G__24641 = cljs.core.conj.call(null, stack__$1, t);
      t = G__24640;
      stack__$1 = G__24641;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4088__auto__ = self__.__hash;
  if (!(h__4088__auto__ == null)) {
    return h__4088__auto__;
  } else {
    var h__4088__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4088__auto____$1;
    return h__4088__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/BlackNode");
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4088__auto__ = self__.__hash;
  if (!(h__4088__auto__ == null)) {
    return h__4088__auto__;
  } else {
    var h__4088__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4088__auto____$1;
    return h__4088__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__24643 = null;
  var G__24643__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__24643__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__24643 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__24643__2.call(this, self__, k);
      case 3:
        return G__24643__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__24643.cljs$core$IFn$_invoke$arity$2 = G__24643__2;
  G__24643.cljs$core$IFn$_invoke$arity$3 = G__24643__3;
  return G__24643;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args24642) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args24642)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/RedNode");
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4088__auto__ = self__.__hash;
  if (!(h__4088__auto__ == null)) {
    return h__4088__auto__;
  } else {
    var h__4088__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4088__auto____$1;
    return h__4088__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__24645 = null;
  var G__24645__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__24645__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__24645 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__24645__2.call(this, self__, k);
      case 3:
        return G__24645__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__24645.cljs$core$IFn$_invoke$arity$2 = G__24645__2;
  G__24645.cljs$core$IFn$_invoke$arity$3 = G__24645__3;
  return G__24645;
}();
cljs.core.RedNode.prototype.apply = function(self__, args24644) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args24644)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = tree_map_remove.call(null, comp, tree.right, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__24647 = cljs.core.seq.call(null, coll);
  var chunk__24648 = null;
  var count__24649 = 0;
  var i__24650 = 0;
  while (true) {
    if (i__24650 < count__24649) {
      var vec__24651 = cljs.core._nth.call(null, chunk__24648, i__24650);
      var k = cljs.core.nth.call(null, vec__24651, 0, null);
      var v = cljs.core.nth.call(null, vec__24651, 1, null);
      f.call(null, v, k);
      var G__24653 = seq__24647;
      var G__24654 = chunk__24648;
      var G__24655 = count__24649;
      var G__24656 = i__24650 + 1;
      seq__24647 = G__24653;
      chunk__24648 = G__24654;
      count__24649 = G__24655;
      i__24650 = G__24656;
      continue;
    } else {
      var temp__4222__auto__ = cljs.core.seq.call(null, seq__24647);
      if (temp__4222__auto__) {
        var seq__24647__$1 = temp__4222__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__24647__$1)) {
          var c__4447__auto__ = cljs.core.chunk_first.call(null, seq__24647__$1);
          var G__24657 = cljs.core.chunk_rest.call(null, seq__24647__$1);
          var G__24658 = c__4447__auto__;
          var G__24659 = cljs.core.count.call(null, c__4447__auto__);
          var G__24660 = 0;
          seq__24647 = G__24657;
          chunk__24648 = G__24658;
          count__24649 = G__24659;
          i__24650 = G__24660;
          continue;
        } else {
          var vec__24652 = cljs.core.first.call(null, seq__24647__$1);
          var k = cljs.core.nth.call(null, vec__24652, 0, null);
          var v = cljs.core.nth.call(null, vec__24652, 1, null);
          f.call(null, v, k);
          var G__24661 = cljs.core.next.call(null, seq__24647__$1);
          var G__24662 = null;
          var G__24663 = 0;
          var G__24664 = 0;
          seq__24647 = G__24661;
          chunk__24648 = G__24662;
          count__24649 = G__24663;
          i__24650 = G__24664;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__24665 = t.left;
          t = G__24665;
          continue;
        } else {
          var G__24666 = t.right;
          t = G__24666;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4088__auto__ = self__.__hash;
  if (!(h__4088__auto__ == null)) {
    return h__4088__auto__;
  } else {
    var h__4088__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4088__auto____$1;
    return h__4088__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__24667 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__24668 = cljs.core.next.call(null, es);
          ret = G__24667;
          es = G__24668;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__24669 = null;
  var G__24669__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__24669__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__24669 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__24669__2.call(this, self__, k);
      case 3:
        return G__24669__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__24669.cljs$core$IFn$_invoke$arity$2 = G__24669__2;
  G__24669.cljs$core$IFn$_invoke$arity$3 = G__24669__3;
  return G__24669;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args24646) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args24646)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__24670 = cljs.core.conj.call(null, stack, t);
              var G__24671 = t.left;
              stack = G__24670;
              t = G__24671;
              continue;
            } else {
              var G__24672 = stack;
              var G__24673 = t.right;
              stack = G__24672;
              t = G__24673;
              continue;
            }
          } else {
            if (c > 0) {
              var G__24674 = cljs.core.conj.call(null, stack, t);
              var G__24675 = t.right;
              stack = G__24674;
              t = G__24675;
              continue;
            } else {
              var G__24676 = stack;
              var G__24677 = t.left;
              stack = G__24676;
              t = G__24677;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__24678 = cljs.core.nnext.call(null, in$);
        var G__24679 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__24678;
        out = G__24679;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__24680) {
    var keyvals = cljs.core.seq(arglist__24680);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__24681) {
    var keyvals = cljs.core.seq(arglist__24681);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj24685 = {};
      return obj24685;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__24686 = cljs.core.nnext.call(null, kvs);
        kvs = G__24686;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject(ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__24687) {
    var keyvals = cljs.core.seq(arglist__24687);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__24688 = cljs.core.nnext.call(null, in$);
        var G__24689 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__24688;
        out = G__24689;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__24690) {
    var keyvals = cljs.core.seq(arglist__24690);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__24691 = cljs.core.nnext.call(null, in$);
        var G__24692 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__24691;
        out = G__24692;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__24693) {
    var comparator = cljs.core.first(arglist__24693);
    var keyvals = cljs.core.rest(arglist__24693);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/KeySeq");
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__24694 = self__.mseq;
    if (G__24694) {
      var bit__4341__auto__ = G__24694.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4341__auto__ || G__24694.cljs$core$INext$) {
        return true;
      } else {
        if (!G__24694.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__24694);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__24694);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__24695 = self__.mseq;
    if (G__24695) {
      var bit__4341__auto__ = G__24695.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4341__auto__ || G__24695.cljs$core$INext$) {
        return true;
      } else {
        if (!G__24695.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__24695);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__24695);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4222__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4222__auto__) {
    var mseq = temp__4222__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/ValSeq");
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__24696 = self__.mseq;
    if (G__24696) {
      var bit__4341__auto__ = G__24696.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4341__auto__ || G__24696.cljs$core$INext$) {
        return true;
      } else {
        if (!G__24696.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__24696);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__24696);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__24697 = self__.mseq;
    if (G__24697) {
      var bit__4341__auto__ = G__24697.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4341__auto__ || G__24697.cljs$core$INext$) {
        return true;
      } else {
        if (!G__24697.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__24697);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__24697);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4222__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4222__auto__) {
    var mseq = temp__4222__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__24698_SHARP_, p2__24699_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3677__auto__ = p1__24698_SHARP_;
          if (cljs.core.truth_(or__3677__auto__)) {
            return or__3677__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__24699_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__24700) {
    var maps = cljs.core.seq(arglist__24700);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__3677__auto__ = m1;
            if (cljs.core.truth_(or__3677__auto__)) {
              return or__3677__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__24701) {
    var f = cljs.core.first(arglist__24701);
    var maps = cljs.core.rest(arglist__24701);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__24702 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__24703 = cljs.core.next.call(null, keys);
      ret = G__24702;
      keys = G__24703;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__24706 = cljs.core.seq.call(null, coll);
  var chunk__24707 = null;
  var count__24708 = 0;
  var i__24709 = 0;
  while (true) {
    if (i__24709 < count__24708) {
      var vec__24710 = cljs.core._nth.call(null, chunk__24707, i__24709);
      var k = cljs.core.nth.call(null, vec__24710, 0, null);
      var v = cljs.core.nth.call(null, vec__24710, 1, null);
      f.call(null, v, k);
      var G__24712 = seq__24706;
      var G__24713 = chunk__24707;
      var G__24714 = count__24708;
      var G__24715 = i__24709 + 1;
      seq__24706 = G__24712;
      chunk__24707 = G__24713;
      count__24708 = G__24714;
      i__24709 = G__24715;
      continue;
    } else {
      var temp__4222__auto__ = cljs.core.seq.call(null, seq__24706);
      if (temp__4222__auto__) {
        var seq__24706__$1 = temp__4222__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__24706__$1)) {
          var c__4447__auto__ = cljs.core.chunk_first.call(null, seq__24706__$1);
          var G__24716 = cljs.core.chunk_rest.call(null, seq__24706__$1);
          var G__24717 = c__4447__auto__;
          var G__24718 = cljs.core.count.call(null, c__4447__auto__);
          var G__24719 = 0;
          seq__24706 = G__24716;
          chunk__24707 = G__24717;
          count__24708 = G__24718;
          i__24709 = G__24719;
          continue;
        } else {
          var vec__24711 = cljs.core.first.call(null, seq__24706__$1);
          var k = cljs.core.nth.call(null, vec__24711, 0, null);
          var v = cljs.core.nth.call(null, vec__24711, 1, null);
          f.call(null, v, k);
          var G__24720 = cljs.core.next.call(null, seq__24706__$1);
          var G__24721 = null;
          var G__24722 = 0;
          var G__24723 = 0;
          seq__24706 = G__24720;
          chunk__24707 = G__24721;
          count__24708 = G__24722;
          i__24709 = G__24723;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4088__auto__ = self__.__hash;
  if (!(h__4088__auto__ == null)) {
    return h__4088__auto__;
  } else {
    var h__4088__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4088__auto____$1;
    return h__4088__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__24704_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__24704_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__24724 = null;
  var G__24724__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__24724__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__24724 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__24724__2.call(this, self__, k);
      case 3:
        return G__24724__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__24724.cljs$core$IFn$_invoke$arity$2 = G__24724__2;
  G__24724.cljs$core$IFn$_invoke$arity$3 = G__24724__3;
  return G__24724;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args24705) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args24705)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__24725 = i + 1;
        var G__24726 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__24725;
        out = G__24726;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__24727 = i + 1;
        var G__24728 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__24727;
        out = G__24728;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/TransientHashSet");
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__24730 = null;
  var G__24730__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__24730__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__24730 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__24730__2.call(this, self__, k);
      case 3:
        return G__24730__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__24730.cljs$core$IFn$_invoke$arity$2 = G__24730__2;
  G__24730.cljs$core$IFn$_invoke$arity$3 = G__24730__3;
  return G__24730;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args24729) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args24729)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__24733 = cljs.core.seq.call(null, coll);
  var chunk__24734 = null;
  var count__24735 = 0;
  var i__24736 = 0;
  while (true) {
    if (i__24736 < count__24735) {
      var vec__24737 = cljs.core._nth.call(null, chunk__24734, i__24736);
      var k = cljs.core.nth.call(null, vec__24737, 0, null);
      var v = cljs.core.nth.call(null, vec__24737, 1, null);
      f.call(null, v, k);
      var G__24739 = seq__24733;
      var G__24740 = chunk__24734;
      var G__24741 = count__24735;
      var G__24742 = i__24736 + 1;
      seq__24733 = G__24739;
      chunk__24734 = G__24740;
      count__24735 = G__24741;
      i__24736 = G__24742;
      continue;
    } else {
      var temp__4222__auto__ = cljs.core.seq.call(null, seq__24733);
      if (temp__4222__auto__) {
        var seq__24733__$1 = temp__4222__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__24733__$1)) {
          var c__4447__auto__ = cljs.core.chunk_first.call(null, seq__24733__$1);
          var G__24743 = cljs.core.chunk_rest.call(null, seq__24733__$1);
          var G__24744 = c__4447__auto__;
          var G__24745 = cljs.core.count.call(null, c__4447__auto__);
          var G__24746 = 0;
          seq__24733 = G__24743;
          chunk__24734 = G__24744;
          count__24735 = G__24745;
          i__24736 = G__24746;
          continue;
        } else {
          var vec__24738 = cljs.core.first.call(null, seq__24733__$1);
          var k = cljs.core.nth.call(null, vec__24738, 0, null);
          var v = cljs.core.nth.call(null, vec__24738, 1, null);
          f.call(null, v, k);
          var G__24747 = cljs.core.next.call(null, seq__24733__$1);
          var G__24748 = null;
          var G__24749 = 0;
          var G__24750 = 0;
          seq__24733 = G__24747;
          chunk__24734 = G__24748;
          count__24735 = G__24749;
          i__24736 = G__24750;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4088__auto__ = self__.__hash;
  if (!(h__4088__auto__ == null)) {
    return h__4088__auto__;
  } else {
    var h__4088__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4088__auto____$1;
    return h__4088__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__24731_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__24731_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__24751 = null;
  var G__24751__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__24751__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__24751 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__24751__2.call(this, self__, k);
      case 3:
        return G__24751__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__24751.cljs$core$IFn$_invoke$arity$2 = G__24751__2;
  G__24751.cljs$core$IFn$_invoke$arity$3 = G__24751__3;
  return G__24751;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args24732) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args24732)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4541__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__4541__auto__.length) {
        var G__24752 = i + 1;
        var G__24753 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__24752;
        res = G__24753;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__24754 = cljs.core._next.call(null, in$__$1);
          var G__24755 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
          in$__$1 = G__24754;
          out = G__24755;
          continue;
        } else {
          return cljs.core._persistent_BANG_.call(null, out);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__24756__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__24756 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__24756__delegate.call(this, keys);
    };
    G__24756.cljs$lang$maxFixedArity = 0;
    G__24756.cljs$lang$applyTo = function(arglist__24757) {
      var keys = cljs.core.seq(arglist__24757);
      return G__24756__delegate(keys);
    };
    G__24756.cljs$core$IFn$_invoke$arity$variadic = G__24756__delegate;
    return G__24756;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__24758) {
    var keys = cljs.core.seq(arglist__24758);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__24759) {
    var comparator = cljs.core.first(arglist__24759);
    var keys = cljs.core.rest(arglist__24759);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function() {
  var replace = null;
  var replace__1 = function(smap) {
    return cljs.core.map.call(null, function(p1__24760_SHARP_) {
      var temp__4220__auto__ = cljs.core.find.call(null, smap, p1__24760_SHARP_);
      if (cljs.core.truth_(temp__4220__auto__)) {
        var e = temp__4220__auto__;
        return cljs.core.val.call(null, e);
      } else {
        return p1__24760_SHARP_;
      }
    });
  };
  var replace__2 = function(smap, coll) {
    if (cljs.core.vector_QMARK_.call(null, coll)) {
      var n = cljs.core.count.call(null, coll);
      return cljs.core.reduce.call(null, function(n) {
        return function(v, i) {
          var temp__4220__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
          if (cljs.core.truth_(temp__4220__auto__)) {
            var e = temp__4220__auto__;
            return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
          } else {
            return v;
          }
        };
      }(n), coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
    } else {
      return cljs.core.map.call(null, function(p1__24761_SHARP_) {
        var temp__4220__auto__ = cljs.core.find.call(null, smap, p1__24761_SHARP_);
        if (cljs.core.truth_(temp__4220__auto__)) {
          var e = temp__4220__auto__;
          return cljs.core.second.call(null, e);
        } else {
          return p1__24761_SHARP_;
        }
      }, coll);
    }
  };
  replace = function(smap, coll) {
    switch(arguments.length) {
      case 1:
        return replace__1.call(this, smap);
      case 2:
        return replace__2.call(this, smap, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  replace.cljs$core$IFn$_invoke$arity$1 = replace__1;
  replace.cljs$core$IFn$_invoke$arity$2 = replace__2;
  return replace;
}();
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__24768, seen__$1) {
        while (true) {
          var vec__24769 = p__24768;
          var f = cljs.core.nth.call(null, vec__24769, 0, null);
          var xs__$1 = vec__24769;
          var temp__4222__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4222__auto__) {
            var s = temp__4222__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__24770 = cljs.core.rest.call(null, s);
              var G__24771 = seen__$1;
              p__24768 = G__24770;
              seen__$1 = G__24771;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__24772 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__24773 = cljs.core.next.call(null, s__$1);
      ret = G__24772;
      s__$1 = G__24773;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__24775 = x;
    if (G__24775) {
      var bit__4334__auto__ = G__24775.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4334__auto__ || G__24775.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error("Doesn't support name: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__24776 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__24777 = cljs.core.next.call(null, ks);
      var G__24778 = cljs.core.next.call(null, vs);
      map = G__24776;
      ks = G__24777;
      vs = G__24778;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__24781__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__24779_SHARP_, p2__24780_SHARP_) {
        return max_key.call(null, k, p1__24779_SHARP_, p2__24780_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__24781 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__24781__delegate.call(this, k, x, y, more);
    };
    G__24781.cljs$lang$maxFixedArity = 3;
    G__24781.cljs$lang$applyTo = function(arglist__24782) {
      var k = cljs.core.first(arglist__24782);
      arglist__24782 = cljs.core.next(arglist__24782);
      var x = cljs.core.first(arglist__24782);
      arglist__24782 = cljs.core.next(arglist__24782);
      var y = cljs.core.first(arglist__24782);
      var more = cljs.core.rest(arglist__24782);
      return G__24781__delegate(k, x, y, more);
    };
    G__24781.cljs$core$IFn$_invoke$arity$variadic = G__24781__delegate;
    return G__24781;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__24785__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__24783_SHARP_, p2__24784_SHARP_) {
        return min_key.call(null, k, p1__24783_SHARP_, p2__24784_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__24785 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__24785__delegate.call(this, k, x, y, more);
    };
    G__24785.cljs$lang$maxFixedArity = 3;
    G__24785.cljs$lang$applyTo = function(arglist__24786) {
      var k = cljs.core.first(arglist__24786);
      arglist__24786 = cljs.core.next(arglist__24786);
      var x = cljs.core.first(arglist__24786);
      arglist__24786 = cljs.core.next(arglist__24786);
      var y = cljs.core.first(arglist__24786);
      var more = cljs.core.rest(arglist__24786);
      return G__24785__delegate(k, x, y, more);
    };
    G__24785.cljs$core$IFn$_invoke$arity$variadic = G__24785__delegate;
    return G__24785;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/ArrayList");
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.__GT_ArrayList = function __GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__1 = function(n) {
    return function(rf) {
      var a = cljs.core.array_list.call(null);
      return function(a) {
        return function() {
          var G__24787 = null;
          var G__24787__0 = function() {
            return rf.call(null);
          };
          var G__24787__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              return rf.call(null, result, v);
            }();
            return rf.call(null, result__$1);
          };
          var G__24787__2 = function(result, input) {
            a.add(input);
            if (n === a.size()) {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              return rf.call(null, result, v);
            } else {
              return result;
            }
          };
          G__24787 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__24787__0.call(this);
              case 1:
                return G__24787__1.call(this, result);
              case 2:
                return G__24787__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__24787.cljs$core$IFn$_invoke$arity$0 = G__24787__0;
          G__24787.cljs$core$IFn$_invoke$arity$1 = G__24787__1;
          G__24787.cljs$core$IFn$_invoke$arity$2 = G__24787__2;
          return G__24787;
        }();
      }(a);
    };
  };
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4222__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4222__auto__) {
        var s = temp__4222__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 1:
        return partition_all__1.call(this, n);
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$1 = partition_all__1;
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function() {
  var take_while = null;
  var take_while__1 = function(pred) {
    return function(rf) {
      return function() {
        var G__24788 = null;
        var G__24788__0 = function() {
          return rf.call(null);
        };
        var G__24788__1 = function(result) {
          return rf.call(null, result);
        };
        var G__24788__2 = function(result, input) {
          if (cljs.core.truth_(pred.call(null, input))) {
            return rf.call(null, result, input);
          } else {
            return cljs.core.reduced.call(null, result);
          }
        };
        G__24788 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__24788__0.call(this);
            case 1:
              return G__24788__1.call(this, result);
            case 2:
              return G__24788__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__24788.cljs$core$IFn$_invoke$arity$0 = G__24788__0;
        G__24788.cljs$core$IFn$_invoke$arity$1 = G__24788__1;
        G__24788.cljs$core$IFn$_invoke$arity$2 = G__24788__2;
        return G__24788;
      }();
    };
  };
  var take_while__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4222__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4222__auto__) {
        var s = temp__4222__auto__;
        if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  take_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return take_while__1.call(this, pred);
      case 2:
        return take_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_while.cljs$core$IFn$_invoke$arity$1 = take_while__1;
  take_while.cljs$core$IFn$_invoke$arity$2 = take_while__2;
  return take_while;
}();
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4222__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4222__auto__)) {
        var vec__24791 = temp__4222__auto__;
        var e = cljs.core.nth.call(null, vec__24791, 0, null);
        var s = vec__24791;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4222__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4222__auto__)) {
      var vec__24792 = temp__4222__auto__;
      var e = cljs.core.nth.call(null, vec__24792, 0, null);
      var s = vec__24792;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4222__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4222__auto__)) {
        var vec__24795 = temp__4222__auto__;
        var e = cljs.core.nth.call(null, vec__24795, 0, null);
        var s = vec__24795;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4222__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4222__auto__)) {
      var vec__24796 = temp__4222__auto__;
      var e = cljs.core.nth.call(null, vec__24796, 0, null);
      var s = vec__24796;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/RangeIterator");
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.__GT_RangeIterator = function __GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/Range");
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$ = true;
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil.call(null, (self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__4088__auto__ = self__.__hash;
  if (!(h__4088__auto__ == null)) {
    return h__4088__auto__;
  } else {
    var h__4088__auto____$1 = cljs.core.hash_ordered_coll.call(null, rng__$1);
    self__.__hash = h__4088__auto____$1;
    return h__4088__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = f.call(null, ret, i);
      if (cljs.core.reduced_QMARK_.call(null, ret__$1)) {
        return cljs.core.deref.call(null, ret__$1);
      } else {
        var G__24797 = i + self__.step;
        var G__24798 = ret__$1;
        i = G__24797;
        ret = G__24798;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function() {
  var take_nth = null;
  var take_nth__1 = function(n) {
    return function(rf) {
      var ia = cljs.core.atom.call(null, -1);
      return function(ia) {
        return function() {
          var G__24799 = null;
          var G__24799__0 = function() {
            return rf.call(null);
          };
          var G__24799__1 = function(result) {
            return rf.call(null, result);
          };
          var G__24799__2 = function(result, input) {
            var i = cljs.core.swap_BANG_.call(null, ia, cljs.core.inc);
            if (cljs.core.rem.call(null, i, n) === 0) {
              return rf.call(null, result, input);
            } else {
              return result;
            }
          };
          G__24799 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__24799__0.call(this);
              case 1:
                return G__24799__1.call(this, result);
              case 2:
                return G__24799__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__24799.cljs$core$IFn$_invoke$arity$0 = G__24799__0;
          G__24799.cljs$core$IFn$_invoke$arity$1 = G__24799__1;
          G__24799.cljs$core$IFn$_invoke$arity$2 = G__24799__2;
          return G__24799;
        }();
      }(ia);
    };
  };
  var take_nth__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4222__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4222__auto__) {
        var s = temp__4222__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  take_nth = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return take_nth__1.call(this, n);
      case 2:
        return take_nth__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_nth.cljs$core$IFn$_invoke$arity$1 = take_nth__1;
  take_nth.cljs$core$IFn$_invoke$arity$2 = take_nth__2;
  return take_nth;
}();
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function() {
  var partition_by = null;
  var partition_by__1 = function(f) {
    return function(rf) {
      var a = cljs.core.array_list.call(null);
      var pa = cljs.core.atom.call(null, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(a, pa) {
        return function() {
          var G__24801 = null;
          var G__24801__0 = function() {
            return rf.call(null);
          };
          var G__24801__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              return rf.call(null, result, v);
            }();
            return rf.call(null, result__$1);
          };
          var G__24801__2 = function(result, input) {
            var pval = cljs.core.deref.call(null, pa);
            var val = f.call(null, input);
            cljs.core.reset_BANG_.call(null, pa, val);
            if (cljs.core.keyword_identical_QMARK_.call(null, pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.call(null, val, pval)) {
              a.add(input);
              return result;
            } else {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              var ret = rf.call(null, result, v);
              if (cljs.core.reduced_QMARK_.call(null, ret)) {
              } else {
                a.add(input);
              }
              return ret;
            }
          };
          G__24801 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__24801__0.call(this);
              case 1:
                return G__24801__1.call(this, result);
              case 2:
                return G__24801__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__24801.cljs$core$IFn$_invoke$arity$0 = G__24801__0;
          G__24801.cljs$core$IFn$_invoke$arity$1 = G__24801__1;
          G__24801.cljs$core$IFn$_invoke$arity$2 = G__24801__2;
          return G__24801;
        }();
      }(a, pa);
    };
  };
  var partition_by__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4222__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4222__auto__) {
        var s = temp__4222__auto__;
        var fst = cljs.core.first.call(null, s);
        var fv = f.call(null, fst);
        var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv, s, temp__4222__auto__) {
          return function(p1__24800_SHARP_) {
            return cljs.core._EQ_.call(null, fv, f.call(null, p1__24800_SHARP_));
          };
        }(fst, fv, s, temp__4222__auto__), cljs.core.next.call(null, s)));
        return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_by = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return partition_by__1.call(this, f);
      case 2:
        return partition_by__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_by.cljs$core$IFn$_invoke$arity$1 = partition_by__1;
  partition_by.cljs$core$IFn$_invoke$arity$2 = partition_by__2;
  return partition_by;
}();
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4220__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4220__auto__) {
        var s = temp__4220__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4222__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4222__auto__) {
        var s = temp__4222__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__24812 = null;
      var G__24812__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__24812__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__24812__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__24812__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__24812__4 = function() {
        var G__24813__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__24813 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__24813__delegate.call(this, x, y, z, args);
        };
        G__24813.cljs$lang$maxFixedArity = 3;
        G__24813.cljs$lang$applyTo = function(arglist__24814) {
          var x = cljs.core.first(arglist__24814);
          arglist__24814 = cljs.core.next(arglist__24814);
          var y = cljs.core.first(arglist__24814);
          arglist__24814 = cljs.core.next(arglist__24814);
          var z = cljs.core.first(arglist__24814);
          var args = cljs.core.rest(arglist__24814);
          return G__24813__delegate(x, y, z, args);
        };
        G__24813.cljs$core$IFn$_invoke$arity$variadic = G__24813__delegate;
        return G__24813;
      }();
      G__24812 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__24812__0.call(this);
          case 1:
            return G__24812__1.call(this, x);
          case 2:
            return G__24812__2.call(this, x, y);
          case 3:
            return G__24812__3.call(this, x, y, z);
          default:
            return G__24812__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__24812.cljs$lang$maxFixedArity = 3;
      G__24812.cljs$lang$applyTo = G__24812__4.cljs$lang$applyTo;
      G__24812.cljs$core$IFn$_invoke$arity$0 = G__24812__0;
      G__24812.cljs$core$IFn$_invoke$arity$1 = G__24812__1;
      G__24812.cljs$core$IFn$_invoke$arity$2 = G__24812__2;
      G__24812.cljs$core$IFn$_invoke$arity$3 = G__24812__3;
      G__24812.cljs$core$IFn$_invoke$arity$variadic = G__24812__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__24812;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__24815 = null;
      var G__24815__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__24815__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__24815__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__24815__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__24815__4 = function() {
        var G__24816__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__24816 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__24816__delegate.call(this, x, y, z, args);
        };
        G__24816.cljs$lang$maxFixedArity = 3;
        G__24816.cljs$lang$applyTo = function(arglist__24817) {
          var x = cljs.core.first(arglist__24817);
          arglist__24817 = cljs.core.next(arglist__24817);
          var y = cljs.core.first(arglist__24817);
          arglist__24817 = cljs.core.next(arglist__24817);
          var z = cljs.core.first(arglist__24817);
          var args = cljs.core.rest(arglist__24817);
          return G__24816__delegate(x, y, z, args);
        };
        G__24816.cljs$core$IFn$_invoke$arity$variadic = G__24816__delegate;
        return G__24816;
      }();
      G__24815 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__24815__0.call(this);
          case 1:
            return G__24815__1.call(this, x);
          case 2:
            return G__24815__2.call(this, x, y);
          case 3:
            return G__24815__3.call(this, x, y, z);
          default:
            return G__24815__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__24815.cljs$lang$maxFixedArity = 3;
      G__24815.cljs$lang$applyTo = G__24815__4.cljs$lang$applyTo;
      G__24815.cljs$core$IFn$_invoke$arity$0 = G__24815__0;
      G__24815.cljs$core$IFn$_invoke$arity$1 = G__24815__1;
      G__24815.cljs$core$IFn$_invoke$arity$2 = G__24815__2;
      G__24815.cljs$core$IFn$_invoke$arity$3 = G__24815__3;
      G__24815.cljs$core$IFn$_invoke$arity$variadic = G__24815__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__24815;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__24818 = null;
      var G__24818__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__24818__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__24818__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__24818__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__24818__4 = function() {
        var G__24819__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__24819 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__24819__delegate.call(this, x, y, z, args);
        };
        G__24819.cljs$lang$maxFixedArity = 3;
        G__24819.cljs$lang$applyTo = function(arglist__24820) {
          var x = cljs.core.first(arglist__24820);
          arglist__24820 = cljs.core.next(arglist__24820);
          var y = cljs.core.first(arglist__24820);
          arglist__24820 = cljs.core.next(arglist__24820);
          var z = cljs.core.first(arglist__24820);
          var args = cljs.core.rest(arglist__24820);
          return G__24819__delegate(x, y, z, args);
        };
        G__24819.cljs$core$IFn$_invoke$arity$variadic = G__24819__delegate;
        return G__24819;
      }();
      G__24818 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__24818__0.call(this);
          case 1:
            return G__24818__1.call(this, x);
          case 2:
            return G__24818__2.call(this, x, y);
          case 3:
            return G__24818__3.call(this, x, y, z);
          default:
            return G__24818__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__24818.cljs$lang$maxFixedArity = 3;
      G__24818.cljs$lang$applyTo = G__24818__4.cljs$lang$applyTo;
      G__24818.cljs$core$IFn$_invoke$arity$0 = G__24818__0;
      G__24818.cljs$core$IFn$_invoke$arity$1 = G__24818__1;
      G__24818.cljs$core$IFn$_invoke$arity$2 = G__24818__2;
      G__24818.cljs$core$IFn$_invoke$arity$3 = G__24818__3;
      G__24818.cljs$core$IFn$_invoke$arity$variadic = G__24818__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__24818;
    }();
  };
  var juxt__4 = function() {
    var G__24821__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function(fs__$1) {
        return function() {
          var G__24822 = null;
          var G__24822__0 = function() {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__24802_SHARP_, p2__24803_SHARP_) {
                return cljs.core.conj.call(null, p1__24802_SHARP_, p2__24803_SHARP_.call(null));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__24822__1 = function(x) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__24804_SHARP_, p2__24805_SHARP_) {
                return cljs.core.conj.call(null, p1__24804_SHARP_, p2__24805_SHARP_.call(null, x));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__24822__2 = function(x, y) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__24806_SHARP_, p2__24807_SHARP_) {
                return cljs.core.conj.call(null, p1__24806_SHARP_, p2__24807_SHARP_.call(null, x, y));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__24822__3 = function(x, y, z) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__24808_SHARP_, p2__24809_SHARP_) {
                return cljs.core.conj.call(null, p1__24808_SHARP_, p2__24809_SHARP_.call(null, x, y, z));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__24822__4 = function() {
            var G__24823__delegate = function(x, y, z, args) {
              return cljs.core.reduce.call(null, function(fs__$1) {
                return function(p1__24810_SHARP_, p2__24811_SHARP_) {
                  return cljs.core.conj.call(null, p1__24810_SHARP_, cljs.core.apply.call(null, p2__24811_SHARP_, x, y, z, args));
                };
              }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
            };
            var G__24823 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__24823__delegate.call(this, x, y, z, args);
            };
            G__24823.cljs$lang$maxFixedArity = 3;
            G__24823.cljs$lang$applyTo = function(arglist__24824) {
              var x = cljs.core.first(arglist__24824);
              arglist__24824 = cljs.core.next(arglist__24824);
              var y = cljs.core.first(arglist__24824);
              arglist__24824 = cljs.core.next(arglist__24824);
              var z = cljs.core.first(arglist__24824);
              var args = cljs.core.rest(arglist__24824);
              return G__24823__delegate(x, y, z, args);
            };
            G__24823.cljs$core$IFn$_invoke$arity$variadic = G__24823__delegate;
            return G__24823;
          }();
          G__24822 = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return G__24822__0.call(this);
              case 1:
                return G__24822__1.call(this, x);
              case 2:
                return G__24822__2.call(this, x, y);
              case 3:
                return G__24822__3.call(this, x, y, z);
              default:
                return G__24822__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__24822.cljs$lang$maxFixedArity = 3;
          G__24822.cljs$lang$applyTo = G__24822__4.cljs$lang$applyTo;
          G__24822.cljs$core$IFn$_invoke$arity$0 = G__24822__0;
          G__24822.cljs$core$IFn$_invoke$arity$1 = G__24822__1;
          G__24822.cljs$core$IFn$_invoke$arity$2 = G__24822__2;
          G__24822.cljs$core$IFn$_invoke$arity$3 = G__24822__3;
          G__24822.cljs$core$IFn$_invoke$arity$variadic = G__24822__4.cljs$core$IFn$_invoke$arity$variadic;
          return G__24822;
        }();
      }(fs__$1);
    };
    var G__24821 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__24821__delegate.call(this, f, g, h, fs);
    };
    G__24821.cljs$lang$maxFixedArity = 3;
    G__24821.cljs$lang$applyTo = function(arglist__24825) {
      var f = cljs.core.first(arglist__24825);
      arglist__24825 = cljs.core.next(arglist__24825);
      var g = cljs.core.first(arglist__24825);
      arglist__24825 = cljs.core.next(arglist__24825);
      var h = cljs.core.first(arglist__24825);
      var fs = cljs.core.rest(arglist__24825);
      return G__24821__delegate(f, g, h, fs);
    };
    G__24821.cljs$core$IFn$_invoke$arity$variadic = G__24821__delegate;
    return G__24821;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__24826 = cljs.core.next.call(null, coll);
        coll = G__24826;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__24827 = n - 1;
        var G__24828 = cljs.core.next.call(null, coll);
        n = G__24827;
        coll = G__24828;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
      if (cljs.core.count.call(null, matches) === 1) {
        return cljs.core.first.call(null, matches);
      } else {
        return cljs.core.vec.call(null, matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count.call(null, matches) === 1) {
        return cljs.core.first.call(null, matches);
      } else {
        return cljs.core.vec.call(null, matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__24830 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
    var _ = cljs.core.nth.call(null, vec__24830, 0, null);
    var flags = cljs.core.nth.call(null, vec__24830, 1, null);
    var pattern = cljs.core.nth.call(null, vec__24830, 2, null);
    return new RegExp(pattern, flags);
  }
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_24832 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_24833__$1 = cljs.core.next.call(null, coll);
      var n_24834 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
      while (true) {
        if (coll_24833__$1 && (n_24834 == null || !(n_24834 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_24833__$1), writer, opts);
          var G__24835 = cljs.core.next.call(null, coll_24833__$1);
          var G__24836 = n_24834 - 1;
          coll_24833__$1 = G__24835;
          n_24834 = G__24836;
          continue;
        } else {
          if (cljs.core.seq.call(null, coll_24833__$1) && n_24834 === 0) {
            cljs.core._write.call(null, writer, sep);
            cljs.core._write.call(null, writer, "...");
          } else {
          }
        }
        break;
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_24832;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__24841 = cljs.core.seq.call(null, ss);
    var chunk__24842 = null;
    var count__24843 = 0;
    var i__24844 = 0;
    while (true) {
      if (i__24844 < count__24843) {
        var s = cljs.core._nth.call(null, chunk__24842, i__24844);
        cljs.core._write.call(null, writer, s);
        var G__24845 = seq__24841;
        var G__24846 = chunk__24842;
        var G__24847 = count__24843;
        var G__24848 = i__24844 + 1;
        seq__24841 = G__24845;
        chunk__24842 = G__24846;
        count__24843 = G__24847;
        i__24844 = G__24848;
        continue;
      } else {
        var temp__4222__auto__ = cljs.core.seq.call(null, seq__24841);
        if (temp__4222__auto__) {
          var seq__24841__$1 = temp__4222__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__24841__$1)) {
            var c__4447__auto__ = cljs.core.chunk_first.call(null, seq__24841__$1);
            var G__24849 = cljs.core.chunk_rest.call(null, seq__24841__$1);
            var G__24850 = c__4447__auto__;
            var G__24851 = cljs.core.count.call(null, c__4447__auto__);
            var G__24852 = 0;
            seq__24841 = G__24849;
            chunk__24842 = G__24850;
            count__24843 = G__24851;
            i__24844 = G__24852;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__24841__$1);
            cljs.core._write.call(null, writer, s);
            var G__24853 = cljs.core.next.call(null, seq__24841__$1);
            var G__24854 = null;
            var G__24855 = 0;
            var G__24856 = 0;
            seq__24841 = G__24853;
            chunk__24842 = G__24854;
            count__24843 = G__24855;
            i__24844 = G__24856;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__24857) {
    var writer = cljs.core.first(arglist__24857);
    var ss = cljs.core.rest(arglist__24857);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj24859 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj24859;
}();
cljs.core.quote_string = function quote_string(s) {
  return'"' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })) + '"';
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (cljs.core.truth_(function() {
        var and__3665__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
        if (cljs.core.truth_(and__3665__auto__)) {
          var and__3665__auto____$1 = function() {
            var G__24865 = obj;
            if (G__24865) {
              var bit__4341__auto__ = G__24865.cljs$lang$protocol_mask$partition0$ & 131072;
              if (bit__4341__auto__ || G__24865.cljs$core$IMeta$) {
                return true;
              } else {
                if (!G__24865.cljs$lang$protocol_mask$partition0$) {
                  return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__24865);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__24865);
            }
          }();
          if (and__3665__auto____$1) {
            return cljs.core.meta.call(null, obj);
          } else {
            return and__3665__auto____$1;
          }
        } else {
          return and__3665__auto__;
        }
      }())) {
        cljs.core._write.call(null, writer, "^");
        pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
        cljs.core._write.call(null, writer, " ");
      } else {
      }
      if (obj == null) {
        return cljs.core._write.call(null, writer, "nil");
      } else {
        if (obj.cljs$lang$type) {
          return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
        } else {
          if (function() {
            var G__24866 = obj;
            if (G__24866) {
              var bit__4334__auto__ = G__24866.cljs$lang$protocol_mask$partition0$ & 2147483648;
              if (bit__4334__auto__ || G__24866.cljs$core$IPrintWithWriter$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._pr_writer.call(null, obj, writer, opts);
          } else {
            if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
              return cljs.core._write.call(null, writer, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj));
            } else {
              if (cljs.core.object_QMARK_.call(null, obj)) {
                cljs.core._write.call(null, writer, "#js ");
                return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
              } else {
                if (obj instanceof Array) {
                  return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                } else {
                  if (goog.isString(obj)) {
                    if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                      return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                    } else {
                      return cljs.core._write.call(null, writer, obj);
                    }
                  } else {
                    if (cljs.core.fn_QMARK_.call(null, obj)) {
                      return cljs.core.write_all.call(null, writer, "#\x3c", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "\x3e");
                    } else {
                      if (obj instanceof Date) {
                        var normalize = function(n, len) {
                          var ns = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n);
                          while (true) {
                            if (cljs.core.count.call(null, ns) < len) {
                              var G__24868 = "0" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns);
                              ns = G__24868;
                              continue;
                            } else {
                              return ns;
                            }
                            break;
                          }
                        };
                        return cljs.core.write_all.call(null, writer, '#inst "', "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj.getUTCFullYear()), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                      } else {
                        if (cljs.core.regexp_QMARK_.call(null, obj)) {
                          return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                        } else {
                          if (function() {
                            var G__24867 = obj;
                            if (G__24867) {
                              var bit__4341__auto__ = G__24867.cljs$lang$protocol_mask$partition0$ & 2147483648;
                              if (bit__4341__auto__ || G__24867.cljs$core$IPrintWithWriter$) {
                                return true;
                              } else {
                                if (!G__24867.cljs$lang$protocol_mask$partition0$) {
                                  return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__24867);
                                } else {
                                  return false;
                                }
                              }
                            } else {
                              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__24867);
                            }
                          }()) {
                            return cljs.core._pr_writer.call(null, obj, writer, opts);
                          } else {
                            return cljs.core.write_all.call(null, writer, "#\x3c", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "\x3e");
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__24873 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__24874 = null;
  var count__24875 = 0;
  var i__24876 = 0;
  while (true) {
    if (i__24876 < count__24875) {
      var obj = cljs.core._nth.call(null, chunk__24874, i__24876);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__24877 = seq__24873;
      var G__24878 = chunk__24874;
      var G__24879 = count__24875;
      var G__24880 = i__24876 + 1;
      seq__24873 = G__24877;
      chunk__24874 = G__24878;
      count__24875 = G__24879;
      i__24876 = G__24880;
      continue;
    } else {
      var temp__4222__auto__ = cljs.core.seq.call(null, seq__24873);
      if (temp__4222__auto__) {
        var seq__24873__$1 = temp__4222__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__24873__$1)) {
          var c__4447__auto__ = cljs.core.chunk_first.call(null, seq__24873__$1);
          var G__24881 = cljs.core.chunk_rest.call(null, seq__24873__$1);
          var G__24882 = c__4447__auto__;
          var G__24883 = cljs.core.count.call(null, c__4447__auto__);
          var G__24884 = 0;
          seq__24873 = G__24881;
          chunk__24874 = G__24882;
          count__24875 = G__24883;
          i__24876 = G__24884;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__24873__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__24885 = cljs.core.next.call(null, seq__24873__$1);
          var G__24886 = null;
          var G__24887 = 0;
          var G__24888 = 0;
          seq__24873 = G__24885;
          chunk__24874 = G__24886;
          count__24875 = G__24887;
          i__24876 = G__24888;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_sb_with_opts.call(null, objs, opts));
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__24889) {
    var objs = cljs.core.seq(arglist__24889);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__24890) {
    var objs = cljs.core.seq(arglist__24890);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__24891) {
    var objs = cljs.core.seq(arglist__24891);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__24892) {
    var objs = cljs.core.seq(arglist__24892);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__24893) {
    var objs = cljs.core.seq(arglist__24893);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__24894) {
    var objs = cljs.core.seq(arglist__24894);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__24895) {
    var objs = cljs.core.seq(arglist__24895);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__24896) {
    var objs = cljs.core.seq(arglist__24896);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, a__$1.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__24897) {
    var iref = cljs.core.first(arglist__24897);
    arglist__24897 = cljs.core.next(arglist__24897);
    var f = cljs.core.first(arglist__24897);
    var args = cljs.core.rest(arglist__24897);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(prefix_string) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc)));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/Delay");
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not.call(null, self__.f);
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = self__.f.call(null);
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.__GT_Delay = function __GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.preserving_reduced = function preserving_reduced(rf) {
  return function(p1__24898_SHARP_, p2__24899_SHARP_) {
    var ret = rf.call(null, p1__24898_SHARP_, p2__24899_SHARP_);
    if (cljs.core.reduced_QMARK_.call(null, ret)) {
      return cljs.core.reduced.call(null, ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cat(rf) {
  var rf1 = cljs.core.preserving_reduced.call(null, rf);
  return function(rf1) {
    return function() {
      var G__24900 = null;
      var G__24900__0 = function() {
        return rf.call(null);
      };
      var G__24900__1 = function(result) {
        return rf.call(null, result);
      };
      var G__24900__2 = function(result, input) {
        return cljs.core.reduce.call(null, rf1, result, input);
      };
      G__24900 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__24900__0.call(this);
          case 1:
            return G__24900__1.call(this, result);
          case 2:
            return G__24900__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__24900.cljs$core$IFn$_invoke$arity$0 = G__24900__0;
      G__24900.cljs$core$IFn$_invoke$arity$1 = G__24900__1;
      G__24900.cljs$core$IFn$_invoke$arity$2 = G__24900__2;
      return G__24900;
    }();
  }(rf1);
};
cljs.core.dedupe = function() {
  var dedupe = null;
  var dedupe__0 = function() {
    return function(rf) {
      var pa = cljs.core.atom.call(null, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(pa) {
        return function() {
          var G__24901 = null;
          var G__24901__0 = function() {
            return rf.call(null);
          };
          var G__24901__1 = function(result) {
            return rf.call(null, result);
          };
          var G__24901__2 = function(result, input) {
            var prior = cljs.core.deref.call(null, pa);
            cljs.core.reset_BANG_.call(null, pa, input);
            if (cljs.core._EQ_.call(null, prior, input)) {
              return result;
            } else {
              return rf.call(null, result, input);
            }
          };
          G__24901 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__24901__0.call(this);
              case 1:
                return G__24901__1.call(this, result);
              case 2:
                return G__24901__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__24901.cljs$core$IFn$_invoke$arity$0 = G__24901__0;
          G__24901.cljs$core$IFn$_invoke$arity$1 = G__24901__1;
          G__24901.cljs$core$IFn$_invoke$arity$2 = G__24901__2;
          return G__24901;
        }();
      }(pa);
    };
  };
  var dedupe__1 = function(coll) {
    return cljs.core.sequence.call(null, dedupe.call(null), coll);
  };
  dedupe = function(coll) {
    switch(arguments.length) {
      case 0:
        return dedupe__0.call(this);
      case 1:
        return dedupe__1.call(this, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dedupe.cljs$core$IFn$_invoke$arity$0 = dedupe__0;
  dedupe.cljs$core$IFn$_invoke$arity$1 = dedupe__1;
  return dedupe;
}();
cljs.core.random_sample = function() {
  var random_sample = null;
  var random_sample__1 = function(prob) {
    return cljs.core.filter.call(null, function(_) {
      return cljs.core.rand.call(null) < prob;
    });
  };
  var random_sample__2 = function(prob, coll) {
    return cljs.core.filter.call(null, function(_) {
      return cljs.core.rand.call(null) < prob;
    }, coll);
  };
  random_sample = function(prob, coll) {
    switch(arguments.length) {
      case 1:
        return random_sample__1.call(this, prob);
      case 2:
        return random_sample__2.call(this, prob, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_sample.cljs$core$IFn$_invoke$arity$1 = random_sample__1;
  random_sample.cljs$core$IFn$_invoke$arity$2 = random_sample__2;
  return random_sample;
}();
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/Eduction");
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.call(null, self__.xform, f, init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq.call(null, cljs.core.sequence.call(null, self__.xform, self__.coll));
};
cljs.core.__GT_Eduction = function __GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.eduction = function eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.run_BANG_ = function run_BANG_(proc, coll) {
  return cljs.core.reduce.call(null, function(p1__24903_SHARP_, p2__24902_SHARP_) {
    return proc.call(null, p2__24902_SHARP_);
  }, null, coll);
};
cljs.core.IEncodeJS = function() {
  var obj24905 = {};
  return obj24905;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__3665__auto__ = x;
    if (and__3665__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4314__auto__ = x == null ? null : x;
    return function() {
      var or__3677__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__3665__auto__ = x;
    if (and__3665__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4314__auto__ = x == null ? null : x;
    return function() {
      var or__3677__auto__ = cljs.core._key__GT_js[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__24907 = k;
    if (G__24907) {
      var bit__4341__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3677__auto__ = bit__4341__auto__;
        if (cljs.core.truth_(or__3677__auto__)) {
          return or__3677__auto__;
        } else {
          return G__24907.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__24907.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__24907);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__24907);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__24921 = x;
      if (G__24921) {
        var bit__4341__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3677__auto__ = bit__4341__auto__;
          if (cljs.core.truth_(or__3677__auto__)) {
            return or__3677__auto__;
          } else {
            return G__24921.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__24921.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__24921);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__24921);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x);
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj24923 = {};
              return obj24923;
            }();
            var seq__24924_24934 = cljs.core.seq.call(null, x);
            var chunk__24925_24935 = null;
            var count__24926_24936 = 0;
            var i__24927_24937 = 0;
            while (true) {
              if (i__24927_24937 < count__24926_24936) {
                var vec__24928_24938 = cljs.core._nth.call(null, chunk__24925_24935, i__24927_24937);
                var k_24939 = cljs.core.nth.call(null, vec__24928_24938, 0, null);
                var v_24940 = cljs.core.nth.call(null, vec__24928_24938, 1, null);
                m[cljs.core.key__GT_js.call(null, k_24939)] = clj__GT_js.call(null, v_24940);
                var G__24941 = seq__24924_24934;
                var G__24942 = chunk__24925_24935;
                var G__24943 = count__24926_24936;
                var G__24944 = i__24927_24937 + 1;
                seq__24924_24934 = G__24941;
                chunk__24925_24935 = G__24942;
                count__24926_24936 = G__24943;
                i__24927_24937 = G__24944;
                continue;
              } else {
                var temp__4222__auto___24945 = cljs.core.seq.call(null, seq__24924_24934);
                if (temp__4222__auto___24945) {
                  var seq__24924_24946__$1 = temp__4222__auto___24945;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__24924_24946__$1)) {
                    var c__4447__auto___24947 = cljs.core.chunk_first.call(null, seq__24924_24946__$1);
                    var G__24948 = cljs.core.chunk_rest.call(null, seq__24924_24946__$1);
                    var G__24949 = c__4447__auto___24947;
                    var G__24950 = cljs.core.count.call(null, c__4447__auto___24947);
                    var G__24951 = 0;
                    seq__24924_24934 = G__24948;
                    chunk__24925_24935 = G__24949;
                    count__24926_24936 = G__24950;
                    i__24927_24937 = G__24951;
                    continue;
                  } else {
                    var vec__24929_24952 = cljs.core.first.call(null, seq__24924_24946__$1);
                    var k_24953 = cljs.core.nth.call(null, vec__24929_24952, 0, null);
                    var v_24954 = cljs.core.nth.call(null, vec__24929_24952, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_24953)] = clj__GT_js.call(null, v_24954);
                    var G__24955 = cljs.core.next.call(null, seq__24924_24946__$1);
                    var G__24956 = null;
                    var G__24957 = 0;
                    var G__24958 = 0;
                    seq__24924_24934 = G__24955;
                    chunk__24925_24935 = G__24956;
                    count__24926_24936 = G__24957;
                    i__24927_24937 = G__24958;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__24930_24959 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__24931_24960 = null;
              var count__24932_24961 = 0;
              var i__24933_24962 = 0;
              while (true) {
                if (i__24933_24962 < count__24932_24961) {
                  var x_24963__$1 = cljs.core._nth.call(null, chunk__24931_24960, i__24933_24962);
                  arr.push(x_24963__$1);
                  var G__24964 = seq__24930_24959;
                  var G__24965 = chunk__24931_24960;
                  var G__24966 = count__24932_24961;
                  var G__24967 = i__24933_24962 + 1;
                  seq__24930_24959 = G__24964;
                  chunk__24931_24960 = G__24965;
                  count__24932_24961 = G__24966;
                  i__24933_24962 = G__24967;
                  continue;
                } else {
                  var temp__4222__auto___24968 = cljs.core.seq.call(null, seq__24930_24959);
                  if (temp__4222__auto___24968) {
                    var seq__24930_24969__$1 = temp__4222__auto___24968;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__24930_24969__$1)) {
                      var c__4447__auto___24970 = cljs.core.chunk_first.call(null, seq__24930_24969__$1);
                      var G__24971 = cljs.core.chunk_rest.call(null, seq__24930_24969__$1);
                      var G__24972 = c__4447__auto___24970;
                      var G__24973 = cljs.core.count.call(null, c__4447__auto___24970);
                      var G__24974 = 0;
                      seq__24930_24959 = G__24971;
                      chunk__24931_24960 = G__24972;
                      count__24932_24961 = G__24973;
                      i__24933_24962 = G__24974;
                      continue;
                    } else {
                      var x_24975__$1 = cljs.core.first.call(null, seq__24930_24969__$1);
                      arr.push(x_24975__$1);
                      var G__24976 = cljs.core.next.call(null, seq__24930_24969__$1);
                      var G__24977 = null;
                      var G__24978 = 0;
                      var G__24979 = 0;
                      seq__24930_24959 = G__24976;
                      chunk__24931_24960 = G__24977;
                      count__24932_24961 = G__24978;
                      i__24933_24962 = G__24979;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj24981 = {};
  return obj24981;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__3665__auto__ = x;
    if (and__3665__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4314__auto__ = x == null ? null : x;
    return function() {
      var or__3677__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__25002__delegate = function(x, opts) {
      if (function() {
        var G__24992 = x;
        if (G__24992) {
          var bit__4341__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3677__auto__ = bit__4341__auto__;
            if (cljs.core.truth_(or__3677__auto__)) {
              return or__3677__auto__;
            } else {
              return G__24992.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__24992.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__24992);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__24992);
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq.call(null, opts)) {
          var map__24993 = opts;
          var map__24993__$1 = cljs.core.seq_QMARK_.call(null, map__24993) ? cljs.core.apply.call(null, cljs.core.hash_map, map__24993) : map__24993;
          var keywordize_keys = cljs.core.get.call(null, map__24993__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__24993, map__24993__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if (cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                  } else {
                    if (cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__4416__auto__ = function(map__24993, map__24993__$1, keywordize_keys, keyfn) {
                          return function iter__24998(s__24999) {
                            return new cljs.core.LazySeq(null, function(map__24993, map__24993__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__24999__$1 = s__24999;
                                while (true) {
                                  var temp__4222__auto__ = cljs.core.seq.call(null, s__24999__$1);
                                  if (temp__4222__auto__) {
                                    var s__24999__$2 = temp__4222__auto__;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__24999__$2)) {
                                      var c__4414__auto__ = cljs.core.chunk_first.call(null, s__24999__$2);
                                      var size__4415__auto__ = cljs.core.count.call(null, c__4414__auto__);
                                      var b__25001 = cljs.core.chunk_buffer.call(null, size__4415__auto__);
                                      if (function() {
                                        var i__25000 = 0;
                                        while (true) {
                                          if (i__25000 < size__4415__auto__) {
                                            var k = cljs.core._nth.call(null, c__4414__auto__, i__25000);
                                            cljs.core.chunk_append.call(null, b__25001, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__25003 = i__25000 + 1;
                                            i__25000 = G__25003;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__25001), iter__24998.call(null, cljs.core.chunk_rest.call(null, s__24999__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__25001), null);
                                      }
                                    } else {
                                      var k = cljs.core.first.call(null, s__24999__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__24998.call(null, cljs.core.rest.call(null, s__24999__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(map__24993, map__24993__$1, keywordize_keys, keyfn), null, null);
                          };
                        }(map__24993, map__24993__$1, keywordize_keys, keyfn);
                        return iter__4416__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                      }());
                    } else {
                      return x__$1;
                    }
                  }
                }
              }
            };
          }(map__24993, map__24993__$1, keywordize_keys, keyfn);
          return f.call(null, x);
        } else {
          return null;
        }
      }
    };
    var G__25002 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__25002__delegate.call(this, x, opts);
    };
    G__25002.cljs$lang$maxFixedArity = 1;
    G__25002.cljs$lang$applyTo = function(arglist__25004) {
      var x = cljs.core.first(arglist__25004);
      var opts = cljs.core.rest(arglist__25004);
      return G__25002__delegate(x, opts);
    };
    G__25002.cljs$core$IFn$_invoke$arity$variadic = G__25002__delegate;
    return G__25002;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function(mem) {
    return function() {
      var G__25005__delegate = function(args) {
        var v = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.call(null, f, args);
          cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__25005 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__25005__delegate.call(this, args);
      };
      G__25005.cljs$lang$maxFixedArity = 0;
      G__25005.cljs$lang$applyTo = function(arglist__25006) {
        var args = cljs.core.seq(arglist__25006);
        return G__25005__delegate(args);
      };
      G__25005.cljs$core$IFn$_invoke$arity$variadic = G__25005__delegate;
      return G__25005;
    }();
  }(mem);
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__25007 = ret;
        f = G__25007;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__25008__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__25008 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__25008__delegate.call(this, f, args);
    };
    G__25008.cljs$lang$maxFixedArity = 1;
    G__25008.cljs$lang$applyTo = function(arglist__25009) {
      var f = cljs.core.first(arglist__25009);
      var args = cljs.core.rest(arglist__25009);
      return G__25008__delegate(f, args);
    };
    G__25008.cljs$core$IFn$_invoke$arity$variadic = G__25008__delegate;
    return G__25008;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc_BANG_.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__25010) {
    var f = cljs.core.first(arglist__25010);
    var args = cljs.core.rest(arglist__25010);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3677__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__3677__auto__) {
      return or__3677__auto__;
    } else {
      var or__3677__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__3677__auto____$1) {
        return or__3677__auto____$1;
      } else {
        var and__3665__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__3665__auto__) {
          var and__3665__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__3665__auto____$1) {
            var and__3665__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__3665__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__25011 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__25012 = i + 1;
                  ret = G__25011;
                  i = G__25012;
                  continue;
                }
                break;
              }
            } else {
              return and__3665__auto____$2;
            }
          } else {
            return and__3665__auto____$1;
          }
        } else {
          return and__3665__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null)))));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null)))));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__3677__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "already has" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent) + "as ancestor");
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error("Cyclic derivation:" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent) + "has" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "as ancestor");
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__3677__auto__)) {
      return or__3677__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__25013_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__25013_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__25013_SHARP_), cljs.core.second.call(null, p1__25013_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(parentMap, childsParents, newParents, deriv_seq) {
        return function(p1__25014_SHARP_, p2__25015_SHARP_) {
          return cljs.core.apply.call(null, cljs.core.derive, p1__25014_SHARP_, p2__25015_SHARP_);
        };
      }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3677__auto__ = cljs.core.truth_(function() {
    var and__3665__auto__ = xprefs;
    if (cljs.core.truth_(and__3665__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__3665__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__3677__auto__)) {
    return or__3677__auto__;
  } else {
    var or__3677__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__25016 = cljs.core.rest.call(null, ps);
          ps = G__25016;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__3677__auto____$1)) {
      return or__3677__auto____$1;
    } else {
      var or__3677__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__25017 = cljs.core.rest.call(null, ps);
            ps = G__25017;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__3677__auto____$2)) {
        return or__3677__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3677__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__3677__auto__)) {
    return or__3677__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__25020) {
    var vec__25021 = p__25020;
    var k = cljs.core.nth.call(null, vec__25021, 0, null);
    var _ = cljs.core.nth.call(null, vec__25021, 1, null);
    var e = vec__25021;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3677__auto__ = be == null;
        if (or__3677__auto__) {
          return or__3677__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error("Multiple methods in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + "' match dispatch value: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val) + " -\x3e " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(k) + " and " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, be2)) + ", and neither is preferred");
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj25023 = {};
  return obj25023;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__3665__auto__ = mf;
    if (and__3665__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4314__auto__ = mf == null ? null : mf;
    return function() {
      var or__3677__auto__ = cljs.core._reset[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._reset["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__3665__auto__ = mf;
    if (and__3665__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4314__auto__ = mf == null ? null : mf;
    return function() {
      var or__3677__auto__ = cljs.core._add_method[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._add_method["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__3665__auto__ = mf;
    if (and__3665__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4314__auto__ = mf == null ? null : mf;
    return function() {
      var or__3677__auto__ = cljs.core._remove_method[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._remove_method["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__3665__auto__ = mf;
    if (and__3665__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4314__auto__ = mf == null ? null : mf;
    return function() {
      var or__3677__auto__ = cljs.core._prefer_method[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._prefer_method["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__3665__auto__ = mf;
    if (and__3665__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4314__auto__ = mf == null ? null : mf;
    return function() {
      var or__3677__auto__ = cljs.core._get_method[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._get_method["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__3665__auto__ = mf;
    if (and__3665__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4314__auto__ = mf == null ? null : mf;
    return function() {
      var or__3677__auto__ = cljs.core._methods[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._methods["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__3665__auto__ = mf;
    if (and__3665__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4314__auto__ = mf == null ? null : mf;
    return function() {
      var or__3677__auto__ = cljs.core._prefers[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core._prefers["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core.throw_no_method_error = function throw_no_method_error(name, dispatch_val) {
  throw new Error("No method in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + "' for dispatch value: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 256;
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/MultiFn");
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4220__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4220__auto__)) {
    var target_fn = temp__4220__auto__;
    return target_fn;
  } else {
    var temp__4220__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4220__auto____$1)) {
      var target_fn = temp__4220__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error("Preference conflict in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.name) + "': " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_y) + " is already preferred to " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_x));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__25025 = null;
  var G__25025__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a);
  };
  var G__25025__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b);
  };
  var G__25025__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c);
  };
  var G__25025__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d);
  };
  var G__25025__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e);
  };
  var G__25025__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f);
  };
  var G__25025__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g);
  };
  var G__25025__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__25025__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__25025__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__25025__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__25025__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__25025__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__25025__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__25025__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__25025__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__25025__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__25025__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__25025__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__25025__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__25025__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__25025 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 2:
        return G__25025__2.call(this, self__, a);
      case 3:
        return G__25025__3.call(this, self__, a, b);
      case 4:
        return G__25025__4.call(this, self__, a, b, c);
      case 5:
        return G__25025__5.call(this, self__, a, b, c, d);
      case 6:
        return G__25025__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__25025__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__25025__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__25025__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__25025__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__25025__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__25025__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__25025__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__25025__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__25025__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__25025__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__25025__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__25025__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__25025__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__25025__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__25025__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__25025__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__25025.cljs$core$IFn$_invoke$arity$2 = G__25025__2;
  G__25025.cljs$core$IFn$_invoke$arity$3 = G__25025__3;
  G__25025.cljs$core$IFn$_invoke$arity$4 = G__25025__4;
  G__25025.cljs$core$IFn$_invoke$arity$5 = G__25025__5;
  G__25025.cljs$core$IFn$_invoke$arity$6 = G__25025__6;
  G__25025.cljs$core$IFn$_invoke$arity$7 = G__25025__7;
  G__25025.cljs$core$IFn$_invoke$arity$8 = G__25025__8;
  G__25025.cljs$core$IFn$_invoke$arity$9 = G__25025__9;
  G__25025.cljs$core$IFn$_invoke$arity$10 = G__25025__10;
  G__25025.cljs$core$IFn$_invoke$arity$11 = G__25025__11;
  G__25025.cljs$core$IFn$_invoke$arity$12 = G__25025__12;
  G__25025.cljs$core$IFn$_invoke$arity$13 = G__25025__13;
  G__25025.cljs$core$IFn$_invoke$arity$14 = G__25025__14;
  G__25025.cljs$core$IFn$_invoke$arity$15 = G__25025__15;
  G__25025.cljs$core$IFn$_invoke$arity$16 = G__25025__16;
  G__25025.cljs$core$IFn$_invoke$arity$17 = G__25025__17;
  G__25025.cljs$core$IFn$_invoke$arity$18 = G__25025__18;
  G__25025.cljs$core$IFn$_invoke$arity$19 = G__25025__19;
  G__25025.cljs$core$IFn$_invoke$arity$20 = G__25025__20;
  G__25025.cljs$core$IFn$_invoke$arity$21 = G__25025__21;
  G__25025.cljs$core$IFn$_invoke$arity$22 = G__25025__22;
  return G__25025;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args25024) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args25024)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core/UUID");
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, '#uuid "' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.uuid) + '"');
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__4257__auto__, writer__4258__auto__, opts__4259__auto__) {
  return cljs.core._write.call(null, writer__4258__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, 
  "letfn*", "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, 
  null), null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      throw "Invalid match arg: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(match);
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll);
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll));
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)));
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__28225 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__28225;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__28229 = cljs.core._EQ_;
    var expr__28230 = limit;
    if (cljs.core.truth_(pred__28229.call(null, 1, expr__28230))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__28229.call(null, 2, expr__28230))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(re), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)).split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4220__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4220__auto__)) {
            var m = temp__4220__auto__;
            var index = s__$1.indexOf(m);
            var G__28232 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__28233 = limit__$1 - 1;
            var G__28234 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__28232;
            limit__$1 = G__28233;
            parts = G__28234;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__28235 = index - 1;
        index = G__28235;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4220__auto___28236 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4220__auto___28236)) {
        var replacement_28237 = temp__4220__auto___28236;
        buffer.append("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(replacement_28237));
      } else {
        buffer.append(ch);
      }
      var G__28238 = index + 1;
      index = G__28238;
      continue;
    }
    break;
  }
};
goog.provide("camel_snake_kebab.internals.misc");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("clojure.string");
camel_snake_kebab.internals.misc.classify_char = function classify_char(c) {
  var G__28250 = c;
  switch(G__28250) {
    case "0":
    ;
    case "1":
    ;
    case "2":
    ;
    case "3":
    ;
    case "4":
    ;
    case "5":
    ;
    case "6":
    ;
    case "7":
    ;
    case "8":
    ;
    case "9":
      return new cljs.core.Keyword(null, "number", "number", 1570378438);
      break;
    case "-":
    ;
    case "_":
    ;
    case " ":
    ;
    case "\t":
    ;
    case "\n":
    ;
    case "\x0B":
    ;
    case "\f":
    ;
    case "\r":
      return new cljs.core.Keyword(null, "whitespace", "whitespace", -1340035483);
      break;
    case "a":
    ;
    case "b":
    ;
    case "c":
    ;
    case "d":
    ;
    case "e":
    ;
    case "f":
    ;
    case "g":
    ;
    case "h":
    ;
    case "i":
    ;
    case "j":
    ;
    case "k":
    ;
    case "l":
    ;
    case "m":
    ;
    case "n":
    ;
    case "o":
    ;
    case "p":
    ;
    case "q":
    ;
    case "r":
    ;
    case "s":
    ;
    case "t":
    ;
    case "u":
    ;
    case "v":
    ;
    case "w":
    ;
    case "x":
    ;
    case "y":
      return new cljs.core.Keyword(null, "lower", "lower", 1120320821);
      break;
    case "A":
    ;
    case "B":
    ;
    case "C":
    ;
    case "D":
    ;
    case "E":
    ;
    case "F":
    ;
    case "G":
    ;
    case "H":
    ;
    case "I":
    ;
    case "J":
    ;
    case "K":
    ;
    case "L":
    ;
    case "M":
    ;
    case "N":
    ;
    case "O":
    ;
    case "P":
    ;
    case "Q":
    ;
    case "R":
    ;
    case "S":
    ;
    case "T":
    ;
    case "U":
    ;
    case "V":
    ;
    case "W":
    ;
    case "X":
    ;
    case "Y":
      return new cljs.core.Keyword(null, "upper", "upper", 246243906);
      break;
    default:
      return new cljs.core.Keyword(null, "other", "other", 995793544);
  }
};
camel_snake_kebab.internals.misc.split = function split(ss) {
  var cs = cljs.core.mapv.call(null, camel_snake_kebab.internals.misc.classify_char, ss);
  var result = cljs.core.PersistentVector.EMPTY;
  var start = 0;
  var current = 0;
  while (true) {
    var next = current + 1;
    var result_PLUS_new = function(result, start, current, next, cs) {
      return function(end) {
        if (end > start) {
          return cljs.core.conj.call(null, result, ss.substring(start, end));
        } else {
          return result;
        }
      };
    }(result, start, current, next, cs);
    if (current >= cljs.core.count.call(null, ss)) {
      return result_PLUS_new.call(null, current);
    } else {
      if (cljs.core._EQ_.call(null, cljs.core.nth.call(null, cs, current), new cljs.core.Keyword(null, "whitespace", "whitespace", -1340035483))) {
        var G__28254 = result_PLUS_new.call(null, current);
        var G__28255 = next;
        var G__28256 = next;
        result = G__28254;
        start = G__28255;
        current = G__28256;
        continue;
      } else {
        if (function() {
          var vec__28253 = cljs.core.subvec.call(null, cs, current);
          var a = cljs.core.nth.call(null, vec__28253, 0, null);
          var b = cljs.core.nth.call(null, vec__28253, 1, null);
          var c = cljs.core.nth.call(null, vec__28253, 2, null);
          return cljs.core.not_EQ_.call(null, a, new cljs.core.Keyword(null, "upper", "upper", 246243906)) && cljs.core._EQ_.call(null, b, new cljs.core.Keyword(null, "upper", "upper", 246243906)) || cljs.core.not_EQ_.call(null, a, new cljs.core.Keyword(null, "number", "number", 1570378438)) && cljs.core._EQ_.call(null, b, new cljs.core.Keyword(null, "number", "number", 1570378438)) || cljs.core._EQ_.call(null, a, new cljs.core.Keyword(null, "upper", "upper", 246243906)) && cljs.core._EQ_.call(null, 
          b, new cljs.core.Keyword(null, "upper", "upper", 246243906)) && cljs.core._EQ_.call(null, c, new cljs.core.Keyword(null, "lower", "lower", 1120320821));
        }()) {
          var G__28257 = result_PLUS_new.call(null, next);
          var G__28258 = next;
          var G__28259 = next;
          result = G__28257;
          start = G__28258;
          current = G__28259;
          continue;
        } else {
          var G__28260 = result;
          var G__28261 = start;
          var G__28262 = next;
          result = G__28260;
          start = G__28261;
          current = G__28262;
          continue;
        }
      }
    }
    break;
  }
};
camel_snake_kebab.internals.misc.convert_case = function convert_case(first_fn, rest_fn, sep, s) {
  var vec__28264 = camel_snake_kebab.internals.misc.split.call(null, s);
  var first = cljs.core.nth.call(null, vec__28264, 0, null);
  var rest = cljs.core.nthnext.call(null, vec__28264, 1);
  return clojure.string.join.call(null, sep, cljs.core.cons.call(null, first_fn.call(null, first), cljs.core.map.call(null, rest_fn, rest)));
};
camel_snake_kebab.internals.misc.upper_case_http_headers = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, ["WWW", null, "TE", null, "CSP", null, "CPU", null, "IP", null, "WAP", null, "HTTP", null, "DNT", null, "UA", null, "ATT", null, "SSL", null, "MD5", null, "XSS", null], null), null);
camel_snake_kebab.internals.misc.capitalize_http_header = function capitalize_http_header(s) {
  var or__3677__auto__ = camel_snake_kebab.internals.misc.upper_case_http_headers.call(null, clojure.string.upper_case.call(null, s));
  if (cljs.core.truth_(or__3677__auto__)) {
    return or__3677__auto__;
  } else {
    return clojure.string.capitalize.call(null, s);
  }
};
goog.provide("camel_snake_kebab.core");
goog.require("cljs.core");
goog.require("camel_snake_kebab.internals.misc");
goog.require("camel_snake_kebab.internals.misc");
goog.require("clojure.string");
camel_snake_kebab.core.AlterName = function() {
  var obj28240 = {};
  return obj28240;
}();
camel_snake_kebab.core.alter_name = function alter_name(this$, f) {
  if (function() {
    var and__3665__auto__ = this$;
    if (and__3665__auto__) {
      return this$.camel_snake_kebab$core$AlterName$alter_name$arity$2;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return this$.camel_snake_kebab$core$AlterName$alter_name$arity$2(this$, f);
  } else {
    var x__4314__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3677__auto__ = camel_snake_kebab.core.alter_name[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = camel_snake_kebab.core.alter_name["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AlterName.alter-name", this$);
        }
      }
    }().call(null, this$, f);
  }
};
cljs.core.Symbol.prototype.camel_snake_kebab$core$AlterName$ = true;
cljs.core.Symbol.prototype.camel_snake_kebab$core$AlterName$alter_name$arity$2 = function(this$, f) {
  var this$__$1 = this;
  if (cljs.core.truth_(cljs.core.namespace.call(null, this$__$1))) {
    throw cljs.core.ex_info.call(null, "Namespaced symbols are not supported", new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "input", "input", 556931961), this$__$1], null));
  } else {
    return cljs.core.symbol.call(null, f.call(null, cljs.core.name.call(null, this$__$1)));
  }
};
cljs.core.Keyword.prototype.camel_snake_kebab$core$AlterName$ = true;
cljs.core.Keyword.prototype.camel_snake_kebab$core$AlterName$alter_name$arity$2 = function(this$, f) {
  var this$__$1 = this;
  if (cljs.core.truth_(cljs.core.namespace.call(null, this$__$1))) {
    throw cljs.core.ex_info.call(null, "Namespaced keywords are not supported", new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "input", "input", 556931961), this$__$1], null));
  } else {
    return cljs.core.keyword.call(null, f.call(null, cljs.core.name.call(null, this$__$1)));
  }
};
camel_snake_kebab.core.AlterName["string"] = true;
camel_snake_kebab.core.alter_name["string"] = function(this$, f) {
  return f.call(null, this$);
};
camel_snake_kebab.core.convert_case = function convert_case(first_fn, rest_fn, sep, s) {
  return camel_snake_kebab.internals.misc.convert_case.call(null, first_fn, rest_fn, sep, s);
};
var convert_case__15610__auto___28241 = cljs.core.partial.call(null, camel_snake_kebab.internals.misc.convert_case, clojure.string.capitalize, clojure.string.capitalize, "");
camel_snake_kebab.core.__GT_CamelCase = function(convert_case__15610__auto___28241) {
  return function __GT_CamelCase(s__15611__auto__) {
    return camel_snake_kebab.core.alter_name.call(null, s__15611__auto__, convert_case__15610__auto___28241);
  };
}(convert_case__15610__auto___28241);
camel_snake_kebab.core.__GT_CamelCaseString = function __GT_CamelCaseString(s__15613__auto__) {
  return cljs.core.identity.call(null, camel_snake_kebab.internals.misc.convert_case.call(null, clojure.string.capitalize, clojure.string.capitalize, "", cljs.core.name.call(null, s__15613__auto__)));
};
camel_snake_kebab.core.__GT_CamelCaseKeyword = function __GT_CamelCaseKeyword(s__15613__auto__) {
  return cljs.core.keyword.call(null, camel_snake_kebab.internals.misc.convert_case.call(null, clojure.string.capitalize, clojure.string.capitalize, "", cljs.core.name.call(null, s__15613__auto__)));
};
camel_snake_kebab.core.__GT_CamelCaseSymbol = function __GT_CamelCaseSymbol(s__15613__auto__) {
  return cljs.core.symbol.call(null, camel_snake_kebab.internals.misc.convert_case.call(null, clojure.string.capitalize, clojure.string.capitalize, "", cljs.core.name.call(null, s__15613__auto__)));
};
var convert_case__15610__auto___28242 = cljs.core.partial.call(null, camel_snake_kebab.internals.misc.convert_case, clojure.string.capitalize, clojure.string.capitalize, "_");
camel_snake_kebab.core.__GT_Camel_Snake_Case = function(convert_case__15610__auto___28242) {
  return function __GT_Camel_Snake_Case(s__15611__auto__) {
    return camel_snake_kebab.core.alter_name.call(null, s__15611__auto__, convert_case__15610__auto___28242);
  };
}(convert_case__15610__auto___28242);
camel_snake_kebab.core.__GT_Camel_Snake_Case_String = function __GT_Camel_Snake_Case_String(s__15613__auto__) {
  return cljs.core.identity.call(null, camel_snake_kebab.internals.misc.convert_case.call(null, clojure.string.capitalize, clojure.string.capitalize, "_", cljs.core.name.call(null, s__15613__auto__)));
};
camel_snake_kebab.core.__GT_Camel_Snake_Case_Keyword = function __GT_Camel_Snake_Case_Keyword(s__15613__auto__) {
  return cljs.core.keyword.call(null, camel_snake_kebab.internals.misc.convert_case.call(null, clojure.string.capitalize, clojure.string.capitalize, "_", cljs.core.name.call(null, s__15613__auto__)));
};
camel_snake_kebab.core.__GT_Camel_Snake_Case_Symbol = function __GT_Camel_Snake_Case_Symbol(s__15613__auto__) {
  return cljs.core.symbol.call(null, camel_snake_kebab.internals.misc.convert_case.call(null, clojure.string.capitalize, clojure.string.capitalize, "_", cljs.core.name.call(null, s__15613__auto__)));
};
var convert_case__15610__auto___28243 = cljs.core.partial.call(null, camel_snake_kebab.internals.misc.convert_case, clojure.string.lower_case, clojure.string.capitalize, "");
camel_snake_kebab.core.__GT_camelCase = function(convert_case__15610__auto___28243) {
  return function __GT_camelCase(s__15611__auto__) {
    return camel_snake_kebab.core.alter_name.call(null, s__15611__auto__, convert_case__15610__auto___28243);
  };
}(convert_case__15610__auto___28243);
camel_snake_kebab.core.__GT_camelCaseString = function __GT_camelCaseString(s__15613__auto__) {
  return cljs.core.identity.call(null, camel_snake_kebab.internals.misc.convert_case.call(null, clojure.string.lower_case, clojure.string.capitalize, "", cljs.core.name.call(null, s__15613__auto__)));
};
camel_snake_kebab.core.__GT_camelCaseKeyword = function __GT_camelCaseKeyword(s__15613__auto__) {
  return cljs.core.keyword.call(null, camel_snake_kebab.internals.misc.convert_case.call(null, clojure.string.lower_case, clojure.string.capitalize, "", cljs.core.name.call(null, s__15613__auto__)));
};
camel_snake_kebab.core.__GT_camelCaseSymbol = function __GT_camelCaseSymbol(s__15613__auto__) {
  return cljs.core.symbol.call(null, camel_snake_kebab.internals.misc.convert_case.call(null, clojure.string.lower_case, clojure.string.capitalize, "", cljs.core.name.call(null, s__15613__auto__)));
};
var convert_case__15610__auto___28244 = cljs.core.partial.call(null, camel_snake_kebab.internals.misc.convert_case, clojure.string.capitalize, clojure.string.lower_case, "_");
camel_snake_kebab.core.__GT_Snake_case = function(convert_case__15610__auto___28244) {
  return function __GT_Snake_case(s__15611__auto__) {
    return camel_snake_kebab.core.alter_name.call(null, s__15611__auto__, convert_case__15610__auto___28244);
  };
}(convert_case__15610__auto___28244);
camel_snake_kebab.core.__GT_Snake_case_string = function __GT_Snake_case_string(s__15613__auto__) {
  return cljs.core.identity.call(null, camel_snake_kebab.internals.misc.convert_case.call(null, clojure.string.capitalize, clojure.string.lower_case, "_", cljs.core.name.call(null, s__15613__auto__)));
};
camel_snake_kebab.core.__GT_Snake_case_keyword = function __GT_Snake_case_keyword(s__15613__auto__) {
  return cljs.core.keyword.call(null, camel_snake_kebab.internals.misc.convert_case.call(null, clojure.string.capitalize, clojure.string.lower_case, "_", cljs.core.name.call(null, s__15613__auto__)));
};
camel_snake_kebab.core.__GT_Snake_case_symbol = function __GT_Snake_case_symbol(s__15613__auto__) {
  return cljs.core.symbol.call(null, camel_snake_kebab.internals.misc.convert_case.call(null, clojure.string.capitalize, clojure.string.lower_case, "_", cljs.core.name.call(null, s__15613__auto__)));
};
var convert_case__15610__auto___28245 = cljs.core.partial.call(null, camel_snake_kebab.internals.misc.convert_case, clojure.string.upper_case, clojure.string.upper_case, "_");
camel_snake_kebab.core.__GT_SNAKE_CASE = function(convert_case__15610__auto___28245) {
  return function __GT_SNAKE_CASE(s__15611__auto__) {
    return camel_snake_kebab.core.alter_name.call(null, s__15611__auto__, convert_case__15610__auto___28245);
  };
}(convert_case__15610__auto___28245);
camel_snake_kebab.core.__GT_SNAKE_CASE_STRING = function __GT_SNAKE_CASE_STRING(s__15613__auto__) {
  return cljs.core.identity.call(null, camel_snake_kebab.internals.misc.convert_case.call(null, clojure.string.upper_case, clojure.string.upper_case, "_", cljs.core.name.call(null, s__15613__auto__)));
};
camel_snake_kebab.core.__GT_SNAKE_CASE_KEYWORD = function __GT_SNAKE_CASE_KEYWORD(s__15613__auto__) {
  return cljs.core.keyword.call(null, camel_snake_kebab.internals.misc.convert_case.call(null, clojure.string.upper_case, clojure.string.upper_case, "_", cljs.core.name.call(null, s__15613__auto__)));
};
camel_snake_kebab.core.__GT_SNAKE_CASE_SYMBOL = function __GT_SNAKE_CASE_SYMBOL(s__15613__auto__) {
  return cljs.core.symbol.call(null, camel_snake_kebab.internals.misc.convert_case.call(null, clojure.string.upper_case, clojure.string.upper_case, "_", cljs.core.name.call(null, s__15613__auto__)));
};
var convert_case__15610__auto___28246 = cljs.core.partial.call(null, camel_snake_kebab.internals.misc.convert_case, clojure.string.lower_case, clojure.string.lower_case, "_");
camel_snake_kebab.core.__GT_snake_case = function(convert_case__15610__auto___28246) {
  return function __GT_snake_case(s__15611__auto__) {
    return camel_snake_kebab.core.alter_name.call(null, s__15611__auto__, convert_case__15610__auto___28246);
  };
}(convert_case__15610__auto___28246);
camel_snake_kebab.core.__GT_snake_case_string = function __GT_snake_case_string(s__15613__auto__) {
  return cljs.core.identity.call(null, camel_snake_kebab.internals.misc.convert_case.call(null, clojure.string.lower_case, clojure.string.lower_case, "_", cljs.core.name.call(null, s__15613__auto__)));
};
camel_snake_kebab.core.__GT_snake_case_keyword = function __GT_snake_case_keyword(s__15613__auto__) {
  return cljs.core.keyword.call(null, camel_snake_kebab.internals.misc.convert_case.call(null, clojure.string.lower_case, clojure.string.lower_case, "_", cljs.core.name.call(null, s__15613__auto__)));
};
camel_snake_kebab.core.__GT_snake_case_symbol = function __GT_snake_case_symbol(s__15613__auto__) {
  return cljs.core.symbol.call(null, camel_snake_kebab.internals.misc.convert_case.call(null, clojure.string.lower_case, clojure.string.lower_case, "_", cljs.core.name.call(null, s__15613__auto__)));
};
var convert_case__15610__auto___28247 = cljs.core.partial.call(null, camel_snake_kebab.internals.misc.convert_case, clojure.string.lower_case, clojure.string.lower_case, "-");
camel_snake_kebab.core.__GT_kebab_case = function(convert_case__15610__auto___28247) {
  return function __GT_kebab_case(s__15611__auto__) {
    return camel_snake_kebab.core.alter_name.call(null, s__15611__auto__, convert_case__15610__auto___28247);
  };
}(convert_case__15610__auto___28247);
camel_snake_kebab.core.__GT_kebab_case_string = function __GT_kebab_case_string(s__15613__auto__) {
  return cljs.core.identity.call(null, camel_snake_kebab.internals.misc.convert_case.call(null, clojure.string.lower_case, clojure.string.lower_case, "-", cljs.core.name.call(null, s__15613__auto__)));
};
camel_snake_kebab.core.__GT_kebab_case_keyword = function __GT_kebab_case_keyword(s__15613__auto__) {
  return cljs.core.keyword.call(null, camel_snake_kebab.internals.misc.convert_case.call(null, clojure.string.lower_case, clojure.string.lower_case, "-", cljs.core.name.call(null, s__15613__auto__)));
};
camel_snake_kebab.core.__GT_kebab_case_symbol = function __GT_kebab_case_symbol(s__15613__auto__) {
  return cljs.core.symbol.call(null, camel_snake_kebab.internals.misc.convert_case.call(null, clojure.string.lower_case, clojure.string.lower_case, "-", cljs.core.name.call(null, s__15613__auto__)));
};
var convert_case__15610__auto___28248 = cljs.core.partial.call(null, camel_snake_kebab.internals.misc.convert_case, camel_snake_kebab.internals.misc.capitalize_http_header, camel_snake_kebab.internals.misc.capitalize_http_header, "-");
camel_snake_kebab.core.__GT_HTTP_Header_Case = function(convert_case__15610__auto___28248) {
  return function __GT_HTTP_Header_Case(s__15611__auto__) {
    return camel_snake_kebab.core.alter_name.call(null, s__15611__auto__, convert_case__15610__auto___28248);
  };
}(convert_case__15610__auto___28248);
camel_snake_kebab.core.__GT_HTTP_Header_Case_String = function __GT_HTTP_Header_Case_String(s__15613__auto__) {
  return cljs.core.identity.call(null, camel_snake_kebab.internals.misc.convert_case.call(null, camel_snake_kebab.internals.misc.capitalize_http_header, camel_snake_kebab.internals.misc.capitalize_http_header, "-", cljs.core.name.call(null, s__15613__auto__)));
};
camel_snake_kebab.core.__GT_HTTP_Header_Case_Keyword = function __GT_HTTP_Header_Case_Keyword(s__15613__auto__) {
  return cljs.core.keyword.call(null, camel_snake_kebab.internals.misc.convert_case.call(null, camel_snake_kebab.internals.misc.capitalize_http_header, camel_snake_kebab.internals.misc.capitalize_http_header, "-", cljs.core.name.call(null, s__15613__auto__)));
};
camel_snake_kebab.core.__GT_HTTP_Header_Case_Symbol = function __GT_HTTP_Header_Case_Symbol(s__15613__auto__) {
  return cljs.core.symbol.call(null, camel_snake_kebab.internals.misc.convert_case.call(null, camel_snake_kebab.internals.misc.capitalize_http_header, camel_snake_kebab.internals.misc.capitalize_http_header, "-", cljs.core.name.call(null, s__15613__auto__)));
};
goog.provide("wilkerdev.util");
goog.require("cljs.core");
goog.require("camel_snake_kebab.core");
goog.require("camel_snake_kebab.core");
wilkerdev.util.js__GT_map = function js__GT_map(obj) {
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p1__23810_SHARP_) {
    return cljs.core.update_in.call(null, p1__23810_SHARP_, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [0], null), cljs.core.comp.call(null, cljs.core.keyword, camel_snake_kebab.core.__GT_kebab_case));
  }, cljs.core.map.call(null, function(p1__23809_SHARP_) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__23809_SHARP_, obj[p1__23809_SHARP_]], null);
  }, cljs.core.js_keys.call(null, obj))));
};
wilkerdev.util.map__GT_query = function map__GT_query(m) {
  return goog.Uri.QueryData.createFromMap(cljs.core.clj__GT_js.call(null, m)).toString();
};
wilkerdev.util.quote_regexp = function quote_regexp(string) {
  return string.replace(RegExp("[-\\^$*+?.()|[\\]{}]", "g"), "\\$\x26");
};
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if (typeof col.getCount == "function") {
    return col.getCount();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return col.length;
  }
  return goog.object.getCount(col);
};
goog.structs.getValues = function(col) {
  if (typeof col.getValues == "function") {
    return col.getValues();
  }
  if (goog.isString(col)) {
    return col.split("");
  }
  if (goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(col[i]);
    }
    return rv;
  }
  return goog.object.getValues(col);
};
goog.structs.getKeys = function(col) {
  if (typeof col.getKeys == "function") {
    return col.getKeys();
  }
  if (typeof col.getValues == "function") {
    return undefined;
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(i);
    }
    return rv;
  }
  return goog.object.getKeys(col);
};
goog.structs.contains = function(col, val) {
  if (typeof col.contains == "function") {
    return col.contains(val);
  }
  if (typeof col.containsValue == "function") {
    return col.containsValue(val);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains((col), val);
  }
  return goog.object.containsValue(col, val);
};
goog.structs.isEmpty = function(col) {
  if (typeof col.isEmpty == "function") {
    return col.isEmpty();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty((col));
  }
  return goog.object.isEmpty(col);
};
goog.structs.clear = function(col) {
  if (typeof col.clear == "function") {
    col.clear();
  } else {
    if (goog.isArrayLike(col)) {
      goog.array.clear((col));
    } else {
      goog.object.clear(col);
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if (typeof col.forEach == "function") {
    col.forEach(f, opt_obj);
  } else {
    if (goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach((col), f, opt_obj);
    } else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for (var i = 0;i < l;i++) {
        f.call(opt_obj, values[i], keys && keys[i], col);
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if (typeof col.filter == "function") {
    return col.filter(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], keys[i], col)) {
        rv[keys[i]] = values[i];
      }
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i]);
      }
    }
  }
  return rv;
};
goog.structs.map = function(col, f, opt_obj) {
  if (typeof col.map == "function") {
    return col.map(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      rv[i] = f.call(opt_obj, values[i], undefined, col);
    }
  }
  return rv;
};
goog.structs.some = function(col, f, opt_obj) {
  if (typeof col.some == "function") {
    return col.some(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (f.call(opt_obj, values[i], keys && keys[i], col)) {
      return true;
    }
  }
  return false;
};
goog.structs.every = function(col, f, opt_obj) {
  if (typeof col.every == "function") {
    return col.every(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return false;
    }
  }
  return true;
};
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.fail = function(err) {
  return function() {
    throw err;
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return!f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.define("goog.functions.CACHE_RETURN_VALUE", true);
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;
  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }
    if (!called) {
      value = fn();
      called = true;
    }
    return value;
  };
};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.standardAngleInRadians = function(angle) {
  return goog.math.modulo(angle, 2 * Math.PI);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = function(x) {
  return x == 0 ? 0 : x < 0 ? -1 : 1;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length2;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return(goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.sampleVariance = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return variance;
};
goog.math.standardDeviation = function(var_args) {
  return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.log10Floor = function(num) {
  if (num > 0) {
    var x = Math.round(Math.log(num) * Math.LOG10E);
    return x - (parseFloat("1e" + x) > num);
  }
  return num == 0 ? -Infinity : NaN;
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15));
};
goog.provide("goog.iter");
goog.provide("goog.iter.Iterable");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.functions");
goog.require("goog.math");
goog.iter.Iterable;
if ("StopIteration" in goog.global) {
  goog.iter.StopIteration = goog.global["StopIteration"];
} else {
  goog.iter.StopIteration = Error("StopIteration");
}
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.filterFalse = function(iterable, f, opt_obj) {
  return goog.iter.filter(iterable, goog.functions.not(f), opt_obj);
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    var val = iterator.next();
    return f.call(opt_obj, val, undefined, iterator);
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  var iterator = goog.iter.toIterator(arguments);
  var iter = new goog.iter.Iterator;
  var current = null;
  iter.next = function() {
    while (true) {
      if (current == null) {
        var it = iterator.next();
        current = goog.iter.toIterator(it);
      }
      try {
        return current.next();
      } catch (ex) {
        if (ex !== goog.iter.StopIteration) {
          throw ex;
        }
        current = null;
      }
    }
  };
  return iter;
};
goog.iter.chainFromIterable = function(iterable) {
  return goog.iter.chain.apply(undefined, iterable);
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var taking = true;
  newIter.next = function() {
    while (true) {
      if (taking) {
        var val = iterator.next();
        if (f.call(opt_obj, val, undefined, iterator)) {
          return val;
        } else {
          taking = false;
        }
      } else {
        throw goog.iter.StopIteration;
      }
    }
  };
  return newIter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2) {
  var fillValue = {};
  var pairs = goog.iter.zipLongest(fillValue, iterable1, iterable2);
  return goog.iter.every(pairs, function(pair) {
    return pair[0] == pair[1];
  });
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return!arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.iter.count = function(opt_start, opt_step) {
  var counter = opt_start || 0;
  var step = goog.isDef(opt_step) ? opt_step : 1;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var returnValue = counter;
    counter += step;
    return returnValue;
  };
  return iter;
};
goog.iter.repeat = function(value) {
  var iter = new goog.iter.Iterator;
  iter.next = goog.functions.constant(value);
  return iter;
};
goog.iter.accumulate = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var total = 0;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    total += iterator.next();
    return total;
  };
  return iter;
};
goog.iter.zip = function(var_args) {
  var args = arguments;
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var arr = goog.array.map(iterators, function(it) {
        return it.next();
      });
      return arr;
    };
  }
  return iter;
};
goog.iter.zipLongest = function(fillValue, var_args) {
  var args = goog.array.slice(arguments, 1);
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var iteratorsHaveValues = false;
      var arr = goog.array.map(iterators, function(it) {
        var returnValue;
        try {
          returnValue = it.next();
          iteratorsHaveValues = true;
        } catch (ex) {
          if (ex !== goog.iter.StopIteration) {
            throw ex;
          }
          returnValue = fillValue;
        }
        return returnValue;
      });
      if (!iteratorsHaveValues) {
        throw goog.iter.StopIteration;
      }
      return arr;
    };
  }
  return iter;
};
goog.iter.compress = function(iterable, selectors) {
  var selectorIterator = goog.iter.toIterator(selectors);
  return goog.iter.filter(iterable, function() {
    return!!selectorIterator.next();
  });
};
goog.iter.GroupByIterator_ = function(iterable, opt_keyFunc) {
  this.iterator = goog.iter.toIterator(iterable);
  this.keyFunc = opt_keyFunc || goog.functions.identity;
  this.targetKey;
  this.currentKey;
  this.currentValue;
};
goog.inherits(goog.iter.GroupByIterator_, goog.iter.Iterator);
goog.iter.GroupByIterator_.prototype.next = function() {
  while (this.currentKey == this.targetKey) {
    this.currentValue = this.iterator.next();
    this.currentKey = this.keyFunc(this.currentValue);
  }
  this.targetKey = this.currentKey;
  return[this.currentKey, this.groupItems_(this.targetKey)];
};
goog.iter.GroupByIterator_.prototype.groupItems_ = function(targetKey) {
  var arr = [];
  while (this.currentKey == targetKey) {
    arr.push(this.currentValue);
    try {
      this.currentValue = this.iterator.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
      break;
    }
    this.currentKey = this.keyFunc(this.currentValue);
  }
  return arr;
};
goog.iter.groupBy = function(iterable, opt_keyFunc) {
  return new goog.iter.GroupByIterator_(iterable, opt_keyFunc);
};
goog.iter.starMap = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var args = goog.iter.toArray(iterator.next());
    return f.apply(opt_obj, goog.array.concat(args, undefined, iterator));
  };
  return iter;
};
goog.iter.tee = function(iterable, opt_num) {
  var iterator = goog.iter.toIterator(iterable);
  var num = goog.isNumber(opt_num) ? opt_num : 2;
  var buffers = goog.array.map(goog.array.range(num), function() {
    return[];
  });
  var addNextIteratorValueToBuffers = function() {
    var val = iterator.next();
    goog.array.forEach(buffers, function(buffer) {
      buffer.push(val);
    });
  };
  var createIterator = function(buffer) {
    var iter = new goog.iter.Iterator;
    iter.next = function() {
      if (goog.array.isEmpty(buffer)) {
        addNextIteratorValueToBuffers();
      }
      goog.asserts.assert(!goog.array.isEmpty(buffer));
      return buffer.shift();
    };
    return iter;
  };
  return goog.array.map(buffers, createIterator);
};
goog.iter.enumerate = function(iterable, opt_start) {
  return goog.iter.zip(goog.iter.count(opt_start), iterable);
};
goog.iter.limit = function(iterable, limitSize) {
  goog.asserts.assert(goog.math.isInt(limitSize) && limitSize >= 0);
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  var remaining = limitSize;
  iter.next = function() {
    if (remaining-- > 0) {
      return iterator.next();
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.consume = function(iterable, count) {
  goog.asserts.assert(goog.math.isInt(count) && count >= 0);
  var iterator = goog.iter.toIterator(iterable);
  while (count-- > 0) {
    goog.iter.nextOrValue(iterator, null);
  }
  return iterator;
};
goog.iter.slice = function(iterable, start, opt_end) {
  goog.asserts.assert(goog.math.isInt(start) && start >= 0);
  var iterator = goog.iter.consume(iterable, start);
  if (goog.isNumber(opt_end)) {
    goog.asserts.assert(goog.math.isInt((opt_end)) && opt_end >= start);
    iterator = goog.iter.limit(iterator, opt_end - start);
  }
  return iterator;
};
goog.iter.hasDuplicates_ = function(arr) {
  var deduped = [];
  goog.array.removeDuplicates(arr, deduped);
  return arr.length != deduped.length;
};
goog.iter.permutations = function(iterable, opt_length) {
  var elements = goog.iter.toArray(iterable);
  var length = goog.isNumber(opt_length) ? opt_length : elements.length;
  var sets = goog.array.repeat(elements, length);
  var product = goog.iter.product.apply(undefined, sets);
  return goog.iter.filter(product, function(arr) {
    return!goog.iter.hasDuplicates_(arr);
  });
};
goog.iter.combinations = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.iter.range(elements.length);
  var indexIterator = goog.iter.permutations(indexes, length);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.iter.combinationsWithReplacement = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.array.range(elements.length);
  var sets = goog.array.repeat(indexes, length);
  var indexIterator = goog.iter.product.apply(undefined, sets);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  this.count_ = 0;
  this.version_ = 0;
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for (var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll((opt_map));
    }
  }
};
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return(this.keys_.concat());
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0;key = this.keys_[i];i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push(key);
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  for (var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i]);
  }
};
goog.structs.Map.prototype.forEach = function(f, opt_obj) {
  var keys = this.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = this.get(key);
    f.call(opt_obj, value, key, this);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var keys = this.keys_;
  var map = this.map_;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      if (version != selfObj.version_) {
        throw Error("The map has changed since the iterator was created");
      }
      if (i >= keys.length) {
        throw goog.iter.StopIteration;
      }
      var key = keys[i++];
      return opt_keys ? key : map[key];
    }
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
  var navigator = goog.labs.userAgent.util.getNavigator_();
  if (navigator) {
    var userAgent = navigator.userAgent;
    if (userAgent) {
      return userAgent;
    }
  }
  return "";
};
goog.labs.userAgent.util.getNavigator_ = function() {
  return goog.global.navigator;
};
goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
goog.labs.userAgent.util.setUserAgent = function(opt_userAgent) {
  goog.labs.userAgent.util.userAgent_ = opt_userAgent || goog.labs.userAgent.util.getNativeUserAgentString_();
};
goog.labs.userAgent.util.getUserAgent = function() {
  return goog.labs.userAgent.util.userAgent_;
};
goog.labs.userAgent.util.matchUserAgent = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.contains(userAgent, str);
};
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.caseInsensitiveContains(userAgent, str);
};
goog.labs.userAgent.util.extractVersionTuples = function(userAgent) {
  var versionRegExp = new RegExp("(\\w[\\w ]+)" + "/" + "([^\\s]+)" + "\\s*" + "(?:\\((.*?)\\))?", "g");
  var data = [];
  var match;
  while (match = versionRegExp.exec(userAgent)) {
    data.push([match[1], match[2], match[3] || undefined]);
  }
  return data;
};
goog.provide("goog.labs.userAgent.browser");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.browser.matchOpera_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Opera") || goog.labs.userAgent.util.matchUserAgent("OPR");
};
goog.labs.userAgent.browser.matchIE_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.browser.matchFirefox_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Firefox");
};
goog.labs.userAgent.browser.matchSafari_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Safari") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS") && !goog.labs.userAgent.util.matchUserAgent("Android");
};
goog.labs.userAgent.browser.matchChrome_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
goog.labs.userAgent.browser.isSilk = function() {
  return goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.browser.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (goog.labs.userAgent.browser.isIE()) {
    return goog.labs.userAgent.browser.getIEVersion_(userAgentString);
  }
  if (goog.labs.userAgent.browser.isOpera()) {
    return goog.labs.userAgent.browser.getOperaVersion_(userAgentString);
  }
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(), version) >= 0;
};
goog.labs.userAgent.browser.getIEVersion_ = function(userAgent) {
  var rv = /rv: *([\d\.]*)/.exec(userAgent);
  if (rv && rv[1]) {
    return rv[1];
  }
  var version = "";
  var msie = /MSIE +([\d\.]+)/.exec(userAgent);
  if (msie && msie[1]) {
    var tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
    if (msie[1] == "7.0") {
      if (tridentVersion && tridentVersion[1]) {
        switch(tridentVersion[1]) {
          case "4.0":
            version = "8.0";
            break;
          case "5.0":
            version = "9.0";
            break;
          case "6.0":
            version = "10.0";
            break;
          case "7.0":
            version = "11.0";
            break;
        }
      } else {
        version = "7.0";
      }
    } else {
      version = msie[1];
    }
  }
  return version;
};
goog.labs.userAgent.browser.getOperaVersion_ = function(userAgent) {
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgent);
  var lastTuple = goog.array.peek(versionTuples);
  if (lastTuple[0] == "OPR" && lastTuple[1]) {
    return lastTuple[1];
  }
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.getVersionFromTuples_ = function(versionTuples) {
  goog.asserts.assert(versionTuples.length > 2, "Couldn't extract version tuple from user agent string");
  return versionTuples[2] && versionTuples[2][1] ? versionTuples[2][1] : "";
};
goog.provide("goog.labs.userAgent.engine");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.engine.isPresto = function() {
  return goog.labs.userAgent.util.matchUserAgent("Presto");
};
goog.labs.userAgent.engine.isTrident = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.engine.isWebKit = function() {
  return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit");
};
goog.labs.userAgent.engine.isGecko = function() {
  return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident();
};
goog.labs.userAgent.engine.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (userAgentString) {
    var tuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
    var engineTuple = tuples[1];
    if (engineTuple) {
      if (engineTuple[0] == "Gecko") {
        return goog.labs.userAgent.engine.getVersionForKey_(tuples, "Firefox");
      }
      return engineTuple[1];
    }
    var browserTuple = tuples[0];
    var info;
    if (browserTuple && (info = browserTuple[2])) {
      var match = /Trident\/([^\s;]+)/.exec(info);
      if (match) {
        return match[1];
      }
    }
  }
  return "";
};
goog.labs.userAgent.engine.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), version) >= 0;
};
goog.labs.userAgent.engine.getVersionForKey_ = function(tuples, key) {
  var pair = goog.array.find(tuples, function(pair) {
    return key == pair[0];
  });
  return pair && pair[1] || "";
};
goog.provide("goog.userAgent");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.define("goog.userAgent.ASSUME_IE", false);
goog.define("goog.userAgent.ASSUME_GECKO", false);
goog.define("goog.userAgent.ASSUME_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_MOBILE_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_OPERA", false);
goog.define("goog.userAgent.ASSUME_ANY_VERSION", false);
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString = function() {
  return goog.labs.userAgent.util.getUserAgent();
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"] || null;
};
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();
goog.userAgent.isMobile_ = function() {
  return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent("Mobile");
};
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.define("goog.userAgent.ASSUME_MAC", false);
goog.define("goog.userAgent.ASSUME_WINDOWS", false);
goog.define("goog.userAgent.ASSUME_LINUX", false);
goog.define("goog.userAgent.ASSUME_X11", false);
goog.define("goog.userAgent.ASSUME_ANDROID", false);
goog.define("goog.userAgent.ASSUME_IPHONE", false);
goog.define("goog.userAgent.ASSUME_IPAD", false);
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD;
goog.userAgent.initPlatform_ = function() {
  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM, "Mac");
  goog.userAgent.detectedWindows_ = goog.string.contains(goog.userAgent.PLATFORM, "Win");
  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM, "Linux");
  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() && goog.string.contains(goog.userAgent.getNavigator()["appVersion"] || "", "X11");
  var ua = goog.userAgent.getUserAgentString();
  goog.userAgent.detectedAndroid_ = !!ua && goog.string.contains(ua, "Android");
  goog.userAgent.detectedIPhone_ = !!ua && goog.string.contains(ua, "iPhone");
  goog.userAgent.detectedIPad_ = !!ua && goog.string.contains(ua, "iPad");
};
if (!goog.userAgent.PLATFORM_KNOWN_) {
  goog.userAgent.initPlatform_();
}
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.userAgent.detectedAndroid_;
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.userAgent.detectedIPhone_;
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.userAgent.detectedIPad_;
goog.userAgent.determineVersion_ = function() {
  var version = "", re;
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    return goog.isFunction(operaVersion) ? operaVersion() : operaVersion;
  }
  if (goog.userAgent.GECKO) {
    re = /rv\:([^\);]+)(\)|;)/;
  } else {
    if (goog.userAgent.IE) {
      re = /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/;
    } else {
      if (goog.userAgent.WEBKIT) {
        re = /WebKit\/(\S+)/;
      }
    }
  }
  if (re) {
    var arr = re.exec(goog.userAgent.getUserAgentString());
    version = arr ? arr[1] : "";
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionOrHigherCache_ = {};
goog.userAgent.isVersionOrHigher = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || goog.userAgent.isVersionOrHigherCache_[version] || (goog.userAgent.isVersionOrHigherCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0);
};
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher = function(documentMode) {
  return goog.userAgent.IE && goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  var mode = goog.userAgent.getDocumentMode_();
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.uri.utils");
goog.provide("goog.uri.utils.ComponentIndex");
goog.provide("goog.uri.utils.QueryArray");
goog.provide("goog.uri.utils.QueryValue");
goog.provide("goog.uri.utils.StandardQueryParam");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.uri.utils.CharCode_ = {AMPERSAND:38, EQUAL:61, HASH:35, QUESTION:63};
goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
  var out = "";
  if (opt_scheme) {
    out += opt_scheme + ":";
  }
  if (opt_domain) {
    out += "//";
    if (opt_userInfo) {
      out += opt_userInfo + "@";
    }
    out += opt_domain;
    if (opt_port) {
      out += ":" + opt_port;
    }
  }
  if (opt_path) {
    out += opt_path;
  }
  if (opt_queryData) {
    out += "?" + opt_queryData;
  }
  if (opt_fragment) {
    out += "#" + opt_fragment;
  }
  return out;
};
goog.uri.utils.splitRe_ = new RegExp("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([^/#?]*?)" + "(?::([0-9]+))?" + "(?\x3d[/#?]|$)" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
goog.uri.utils.ComponentIndex = {SCHEME:1, USER_INFO:2, DOMAIN:3, PORT:4, PATH:5, QUERY_DATA:6, FRAGMENT:7};
goog.uri.utils.split = function(uri) {
  goog.uri.utils.phishingProtection_();
  return(uri.match(goog.uri.utils.splitRe_));
};
goog.uri.utils.needsPhishingProtection_ = goog.userAgent.WEBKIT;
goog.uri.utils.phishingProtection_ = function() {
  if (goog.uri.utils.needsPhishingProtection_) {
    goog.uri.utils.needsPhishingProtection_ = false;
    var location = goog.global["location"];
    if (location) {
      var href = location["href"];
      if (href) {
        var domain = goog.uri.utils.getDomain(href);
        if (domain && domain != location["hostname"]) {
          goog.uri.utils.needsPhishingProtection_ = true;
          throw Error();
        }
      }
    }
  }
};
goog.uri.utils.decodeIfPossible_ = function(uri) {
  return uri && decodeURIComponent(uri);
};
goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
  return goog.uri.utils.split(uri)[componentIndex] || null;
};
goog.uri.utils.getScheme = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.SCHEME, uri);
};
goog.uri.utils.getEffectiveScheme = function(uri) {
  var scheme = goog.uri.utils.getScheme(uri);
  if (!scheme && self.location) {
    var protocol = self.location.protocol;
    scheme = protocol.substr(0, protocol.length - 1);
  }
  return scheme ? scheme.toLowerCase() : "";
};
goog.uri.utils.getUserInfoEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.USER_INFO, uri);
};
goog.uri.utils.getUserInfo = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getUserInfoEncoded(uri));
};
goog.uri.utils.getDomainEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.DOMAIN, uri);
};
goog.uri.utils.getDomain = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri));
};
goog.uri.utils.getPort = function(uri) {
  return Number(goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PORT, uri)) || null;
};
goog.uri.utils.getPathEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PATH, uri);
};
goog.uri.utils.getPath = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri));
};
goog.uri.utils.getQueryData = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.QUERY_DATA, uri);
};
goog.uri.utils.getFragmentEncoded = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? null : uri.substr(hashIndex + 1);
};
goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
  return goog.uri.utils.removeFragment(uri) + (fragment ? "#" + fragment : "");
};
goog.uri.utils.getFragment = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getFragmentEncoded(uri));
};
goog.uri.utils.getHost = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(pieces[goog.uri.utils.ComponentIndex.SCHEME], pieces[goog.uri.utils.ComponentIndex.USER_INFO], pieces[goog.uri.utils.ComponentIndex.DOMAIN], pieces[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.getPathAndAfter = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH], pieces[goog.uri.utils.ComponentIndex.QUERY_DATA], pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.removeFragment = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? uri : uri.substr(0, hashIndex);
};
goog.uri.utils.haveSameDomain = function(uri1, uri2) {
  var pieces1 = goog.uri.utils.split(uri1);
  var pieces2 = goog.uri.utils.split(uri2);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.SCHEME] == pieces2[goog.uri.utils.ComponentIndex.SCHEME] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
  if (goog.DEBUG && (uri.indexOf("#") >= 0 || uri.indexOf("?") >= 0)) {
    throw Error("goog.uri.utils: Fragment or query identifiers are not " + "supported: [" + uri + "]");
  }
};
goog.uri.utils.QueryValue;
goog.uri.utils.QueryArray;
goog.uri.utils.appendQueryData_ = function(buffer) {
  if (buffer[1]) {
    var baseUri = (buffer[0]);
    var hashIndex = baseUri.indexOf("#");
    if (hashIndex >= 0) {
      buffer.push(baseUri.substr(hashIndex));
      buffer[0] = baseUri = baseUri.substr(0, hashIndex);
    }
    var questionIndex = baseUri.indexOf("?");
    if (questionIndex < 0) {
      buffer[1] = "?";
    } else {
      if (questionIndex == baseUri.length - 1) {
        buffer[1] = undefined;
      }
    }
  }
  return buffer.join("");
};
goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
  if (goog.isArray(value)) {
    goog.asserts.assertArray(value);
    for (var j = 0;j < value.length;j++) {
      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);
    }
  } else {
    if (value != null) {
      pairs.push("\x26", key, value === "" ? "" : "\x3d", goog.string.urlEncode(value));
    }
  }
};
goog.uri.utils.buildQueryDataBuffer_ = function(buffer, keysAndValues, opt_startIndex) {
  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 == 0, "goog.uri.utils: Key/value lists must be even in length.");
  for (var i = opt_startIndex || 0;i < keysAndValues.length;i += 2) {
    goog.uri.utils.appendKeyValuePairs_(keysAndValues[i], keysAndValues[i + 1], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
  var buffer = goog.uri.utils.buildQueryDataBuffer_([], keysAndValues, opt_startIndex);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {
  for (var key in map) {
    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryDataFromMap = function(map) {
  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.appendParams = function(uri, var_args) {
  return goog.uri.utils.appendQueryData_(arguments.length == 2 ? goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) : goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1));
};
goog.uri.utils.appendParamsFromMap = function(uri, map) {
  return goog.uri.utils.appendQueryData_(goog.uri.utils.buildQueryDataBufferFromMap_([uri], map));
};
goog.uri.utils.appendParam = function(uri, key, opt_value) {
  var paramArr = [uri, "\x26", key];
  if (goog.isDefAndNotNull(opt_value)) {
    paramArr.push("\x3d", goog.string.urlEncode(opt_value));
  }
  return goog.uri.utils.appendQueryData_(paramArr);
};
goog.uri.utils.findParam_ = function(uri, startIndex, keyEncoded, hashOrEndIndex) {
  var index = startIndex;
  var keyLength = keyEncoded.length;
  while ((index = uri.indexOf(keyEncoded, index)) >= 0 && index < hashOrEndIndex) {
    var precedingChar = uri.charCodeAt(index - 1);
    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.QUESTION) {
      var followingChar = uri.charCodeAt(index + keyLength);
      if (!followingChar || followingChar == goog.uri.utils.CharCode_.EQUAL || followingChar == goog.uri.utils.CharCode_.AMPERSAND || followingChar == goog.uri.utils.CharCode_.HASH) {
        return index;
      }
    }
    index += keyLength + 1;
  }
  return-1;
};
goog.uri.utils.hashOrEndRe_ = /#|$/;
goog.uri.utils.hasParam = function(uri, keyEncoded) {
  return goog.uri.utils.findParam_(uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;
};
goog.uri.utils.getParamValue = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var foundIndex = goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);
  if (foundIndex < 0) {
    return null;
  } else {
    var endPosition = uri.indexOf("\x26", foundIndex);
    if (endPosition < 0 || endPosition > hashOrEndIndex) {
      endPosition = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    return goog.string.urlDecode(uri.substr(foundIndex, endPosition - foundIndex));
  }
};
goog.uri.utils.getParamValues = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var result = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    position = uri.indexOf("\x26", foundIndex);
    if (position < 0 || position > hashOrEndIndex) {
      position = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    result.push(goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)));
  }
  return result;
};
goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;
goog.uri.utils.removeParam = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var buffer = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    buffer.push(uri.substring(position, foundIndex));
    position = Math.min(uri.indexOf("\x26", foundIndex) + 1 || hashOrEndIndex, hashOrEndIndex);
  }
  buffer.push(uri.substr(position));
  return buffer.join("").replace(goog.uri.utils.trailingQueryPunctuationRe_, "$1");
};
goog.uri.utils.setParam = function(uri, keyEncoded, value) {
  return goog.uri.utils.appendParam(goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);
};
goog.uri.utils.appendPath = function(baseUri, path) {
  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
  if (goog.string.endsWith(baseUri, "/")) {
    baseUri = baseUri.substr(0, baseUri.length - 1);
  }
  if (goog.string.startsWith(path, "/")) {
    path = path.substr(1);
  }
  return goog.string.buildString(baseUri, "/", path);
};
goog.uri.utils.setPath = function(uri, path) {
  if (!goog.string.startsWith(path, "/")) {
    path = "/" + path;
  }
  var parts = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(parts[goog.uri.utils.ComponentIndex.SCHEME], parts[goog.uri.utils.ComponentIndex.USER_INFO], parts[goog.uri.utils.ComponentIndex.DOMAIN], parts[goog.uri.utils.ComponentIndex.PORT], path, parts[goog.uri.utils.ComponentIndex.QUERY_DATA], parts[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.StandardQueryParam = {RANDOM:"zx"};
goog.uri.utils.makeUnique = function(uri) {
  return goog.uri.utils.setParam(uri, goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());
};
goog.provide("goog.Uri");
goog.provide("goog.Uri.QueryData");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.uri.utils.ComponentIndex");
goog.require("goog.uri.utils.StandardQueryParam");
goog.Uri = function(opt_uri, opt_ignoreCase) {
  var m;
  if (opt_uri instanceof goog.Uri) {
    this.ignoreCase_ = goog.isDef(opt_ignoreCase) ? opt_ignoreCase : opt_uri.getIgnoreCase();
    this.setScheme(opt_uri.getScheme());
    this.setUserInfo(opt_uri.getUserInfo());
    this.setDomain(opt_uri.getDomain());
    this.setPort(opt_uri.getPort());
    this.setPath(opt_uri.getPath());
    this.setQueryData(opt_uri.getQueryData().clone());
    this.setFragment(opt_uri.getFragment());
  } else {
    if (opt_uri && (m = goog.uri.utils.split(String(opt_uri)))) {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || "", true);
      this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || "", true);
      this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || "", true);
      this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);
      this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || "", true);
      this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", true);
      this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || "", true);
    } else {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.queryData_ = new goog.Uri.QueryData(null, null, this.ignoreCase_);
    }
  }
};
goog.Uri.preserveParameterTypesCompatibilityFlag = false;
goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;
goog.Uri.prototype.scheme_ = "";
goog.Uri.prototype.userInfo_ = "";
goog.Uri.prototype.domain_ = "";
goog.Uri.prototype.port_ = null;
goog.Uri.prototype.path_ = "";
goog.Uri.prototype.queryData_;
goog.Uri.prototype.fragment_ = "";
goog.Uri.prototype.isReadOnly_ = false;
goog.Uri.prototype.ignoreCase_ = false;
goog.Uri.prototype.toString = function() {
  var out = [];
  var scheme = this.getScheme();
  if (scheme) {
    out.push(goog.Uri.encodeSpecialChars_(scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_), ":");
  }
  var domain = this.getDomain();
  if (domain) {
    out.push("//");
    var userInfo = this.getUserInfo();
    if (userInfo) {
      out.push(goog.Uri.encodeSpecialChars_(userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_), "@");
    }
    out.push(goog.string.urlEncode(domain));
    var port = this.getPort();
    if (port != null) {
      out.push(":", String(port));
    }
  }
  var path = this.getPath();
  if (path) {
    if (this.hasDomain() && path.charAt(0) != "/") {
      out.push("/");
    }
    out.push(goog.Uri.encodeSpecialChars_(path, path.charAt(0) == "/" ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_));
  }
  var query = this.getEncodedQuery();
  if (query) {
    out.push("?", query);
  }
  var fragment = this.getFragment();
  if (fragment) {
    out.push("#", goog.Uri.encodeSpecialChars_(fragment, goog.Uri.reDisallowedInFragment_));
  }
  return out.join("");
};
goog.Uri.prototype.resolve = function(relativeUri) {
  var absoluteUri = this.clone();
  var overridden = relativeUri.hasScheme();
  if (overridden) {
    absoluteUri.setScheme(relativeUri.getScheme());
  } else {
    overridden = relativeUri.hasUserInfo();
  }
  if (overridden) {
    absoluteUri.setUserInfo(relativeUri.getUserInfo());
  } else {
    overridden = relativeUri.hasDomain();
  }
  if (overridden) {
    absoluteUri.setDomain(relativeUri.getDomain());
  } else {
    overridden = relativeUri.hasPort();
  }
  var path = relativeUri.getPath();
  if (overridden) {
    absoluteUri.setPort(relativeUri.getPort());
  } else {
    overridden = relativeUri.hasPath();
    if (overridden) {
      if (path.charAt(0) != "/") {
        if (this.hasDomain() && !this.hasPath()) {
          path = "/" + path;
        } else {
          var lastSlashIndex = absoluteUri.getPath().lastIndexOf("/");
          if (lastSlashIndex != -1) {
            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path;
          }
        }
      }
      path = goog.Uri.removeDotSegments(path);
    }
  }
  if (overridden) {
    absoluteUri.setPath(path);
  } else {
    overridden = relativeUri.hasQuery();
  }
  if (overridden) {
    absoluteUri.setQueryData(relativeUri.getDecodedQuery());
  } else {
    overridden = relativeUri.hasFragment();
  }
  if (overridden) {
    absoluteUri.setFragment(relativeUri.getFragment());
  }
  return absoluteUri;
};
goog.Uri.prototype.clone = function() {
  return new goog.Uri(this);
};
goog.Uri.prototype.getScheme = function() {
  return this.scheme_;
};
goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
  this.enforceReadOnly();
  this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme) : newScheme;
  if (this.scheme_) {
    this.scheme_ = this.scheme_.replace(/:$/, "");
  }
  return this;
};
goog.Uri.prototype.hasScheme = function() {
  return!!this.scheme_;
};
goog.Uri.prototype.getUserInfo = function() {
  return this.userInfo_;
};
goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
  this.enforceReadOnly();
  this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;
  return this;
};
goog.Uri.prototype.hasUserInfo = function() {
  return!!this.userInfo_;
};
goog.Uri.prototype.getDomain = function() {
  return this.domain_;
};
goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
  this.enforceReadOnly();
  this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain) : newDomain;
  return this;
};
goog.Uri.prototype.hasDomain = function() {
  return!!this.domain_;
};
goog.Uri.prototype.getPort = function() {
  return this.port_;
};
goog.Uri.prototype.setPort = function(newPort) {
  this.enforceReadOnly();
  if (newPort) {
    newPort = Number(newPort);
    if (isNaN(newPort) || newPort < 0) {
      throw Error("Bad port number " + newPort);
    }
    this.port_ = newPort;
  } else {
    this.port_ = null;
  }
  return this;
};
goog.Uri.prototype.hasPort = function() {
  return this.port_ != null;
};
goog.Uri.prototype.getPath = function() {
  return this.path_;
};
goog.Uri.prototype.setPath = function(newPath, opt_decode) {
  this.enforceReadOnly();
  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath) : newPath;
  return this;
};
goog.Uri.prototype.hasPath = function() {
  return!!this.path_;
};
goog.Uri.prototype.hasQuery = function() {
  return this.queryData_.toString() !== "";
};
goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
  this.enforceReadOnly();
  if (queryData instanceof goog.Uri.QueryData) {
    this.queryData_ = queryData;
    this.queryData_.setIgnoreCase(this.ignoreCase_);
  } else {
    if (!opt_decode) {
      queryData = goog.Uri.encodeSpecialChars_(queryData, goog.Uri.reDisallowedInQuery_);
    }
    this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_);
  }
  return this;
};
goog.Uri.prototype.setQuery = function(newQuery, opt_decode) {
  return this.setQueryData(newQuery, opt_decode);
};
goog.Uri.prototype.getEncodedQuery = function() {
  return this.queryData_.toString();
};
goog.Uri.prototype.getDecodedQuery = function() {
  return this.queryData_.toDecodedString();
};
goog.Uri.prototype.getQueryData = function() {
  return this.queryData_;
};
goog.Uri.prototype.getQuery = function() {
  return this.getEncodedQuery();
};
goog.Uri.prototype.setParameterValue = function(key, value) {
  this.enforceReadOnly();
  this.queryData_.set(key, value);
  return this;
};
goog.Uri.prototype.setParameterValues = function(key, values) {
  this.enforceReadOnly();
  if (!goog.isArray(values)) {
    values = [String(values)];
  }
  this.queryData_.setValues(key, (values));
  return this;
};
goog.Uri.prototype.getParameterValues = function(name) {
  return this.queryData_.getValues(name);
};
goog.Uri.prototype.getParameterValue = function(paramName) {
  return(this.queryData_.get(paramName));
};
goog.Uri.prototype.getFragment = function() {
  return this.fragment_;
};
goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
  this.enforceReadOnly();
  this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;
  return this;
};
goog.Uri.prototype.hasFragment = function() {
  return!!this.fragment_;
};
goog.Uri.prototype.hasSameDomainAs = function(uri2) {
  return(!this.hasDomain() && !uri2.hasDomain() || this.getDomain() == uri2.getDomain()) && (!this.hasPort() && !uri2.hasPort() || this.getPort() == uri2.getPort());
};
goog.Uri.prototype.makeUnique = function() {
  this.enforceReadOnly();
  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());
  return this;
};
goog.Uri.prototype.removeParameter = function(key) {
  this.enforceReadOnly();
  this.queryData_.remove(key);
  return this;
};
goog.Uri.prototype.setReadOnly = function(isReadOnly) {
  this.isReadOnly_ = isReadOnly;
  return this;
};
goog.Uri.prototype.isReadOnly = function() {
  return this.isReadOnly_;
};
goog.Uri.prototype.enforceReadOnly = function() {
  if (this.isReadOnly_) {
    throw Error("Tried to modify a read-only Uri");
  }
};
goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
  this.ignoreCase_ = ignoreCase;
  if (this.queryData_) {
    this.queryData_.setIgnoreCase(ignoreCase);
  }
  return this;
};
goog.Uri.prototype.getIgnoreCase = function() {
  return this.ignoreCase_;
};
goog.Uri.parse = function(uri, opt_ignoreCase) {
  return uri instanceof goog.Uri ? uri.clone() : new goog.Uri(uri, opt_ignoreCase);
};
goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query, opt_fragment, opt_ignoreCase) {
  var uri = new goog.Uri(null, opt_ignoreCase);
  opt_scheme && uri.setScheme(opt_scheme);
  opt_userInfo && uri.setUserInfo(opt_userInfo);
  opt_domain && uri.setDomain(opt_domain);
  opt_port && uri.setPort(opt_port);
  opt_path && uri.setPath(opt_path);
  opt_query && uri.setQueryData(opt_query);
  opt_fragment && uri.setFragment(opt_fragment);
  return uri;
};
goog.Uri.resolve = function(base, rel) {
  if (!(base instanceof goog.Uri)) {
    base = goog.Uri.parse(base);
  }
  if (!(rel instanceof goog.Uri)) {
    rel = goog.Uri.parse(rel);
  }
  return base.resolve(rel);
};
goog.Uri.removeDotSegments = function(path) {
  if (path == ".." || path == ".") {
    return "";
  } else {
    if (!goog.string.contains(path, "./") && !goog.string.contains(path, "/.")) {
      return path;
    } else {
      var leadingSlash = goog.string.startsWith(path, "/");
      var segments = path.split("/");
      var out = [];
      for (var pos = 0;pos < segments.length;) {
        var segment = segments[pos++];
        if (segment == ".") {
          if (leadingSlash && pos == segments.length) {
            out.push("");
          }
        } else {
          if (segment == "..") {
            if (out.length > 1 || out.length == 1 && out[0] != "") {
              out.pop();
            }
            if (leadingSlash && pos == segments.length) {
              out.push("");
            }
          } else {
            out.push(segment);
            leadingSlash = true;
          }
        }
      }
      return out.join("/");
    }
  }
};
goog.Uri.decodeOrEmpty_ = function(val) {
  return val ? decodeURIComponent(val) : "";
};
goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra) {
  if (goog.isString(unescapedPart)) {
    return encodeURI(unescapedPart).replace(extra, goog.Uri.encodeChar_);
  }
  return null;
};
goog.Uri.encodeChar_ = function(ch) {
  var n = ch.charCodeAt(0);
  return "%" + (n >> 4 & 15).toString(16) + (n & 15).toString(16);
};
goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
goog.Uri.reDisallowedInRelativePath_ = /[\#\?:]/g;
goog.Uri.reDisallowedInAbsolutePath_ = /[\#\?]/g;
goog.Uri.reDisallowedInQuery_ = /[\#\?@]/g;
goog.Uri.reDisallowedInFragment_ = /#/g;
goog.Uri.haveSameDomain = function(uri1String, uri2String) {
  var pieces1 = goog.uri.utils.split(uri1String);
  var pieces2 = goog.uri.utils.split(uri2String);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
  this.encodedQuery_ = opt_query || null;
  this.ignoreCase_ = !!opt_ignoreCase;
};
goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
  if (!this.keyMap_) {
    this.keyMap_ = new goog.structs.Map;
    this.count_ = 0;
    if (this.encodedQuery_) {
      var pairs = this.encodedQuery_.split("\x26");
      for (var i = 0;i < pairs.length;i++) {
        var indexOfEquals = pairs[i].indexOf("\x3d");
        var name = null;
        var value = null;
        if (indexOfEquals >= 0) {
          name = pairs[i].substring(0, indexOfEquals);
          value = pairs[i].substring(indexOfEquals + 1);
        } else {
          name = pairs[i];
        }
        name = goog.string.urlDecode(name);
        name = this.getKeyName_(name);
        this.add(name, value ? goog.string.urlDecode(value) : "");
      }
    }
  }
};
goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
  var keys = goog.structs.getKeys(map);
  if (typeof keys == "undefined") {
    throw Error("Keys are undefined");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  var values = goog.structs.getValues(map);
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = values[i];
    if (!goog.isArray(value)) {
      queryData.add(key, value);
    } else {
      queryData.setValues(key, value);
    }
  }
  return queryData;
};
goog.Uri.QueryData.createFromKeysValues = function(keys, values, opt_uri, opt_ignoreCase) {
  if (keys.length != values.length) {
    throw Error("Mismatched lengths for keys/values");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  for (var i = 0;i < keys.length;i++) {
    queryData.add(keys[i], values[i]);
  }
  return queryData;
};
goog.Uri.QueryData.prototype.keyMap_ = null;
goog.Uri.QueryData.prototype.count_ = null;
goog.Uri.QueryData.prototype.getCount = function() {
  this.ensureKeyMapInitialized_();
  return this.count_;
};
goog.Uri.QueryData.prototype.add = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  var values = this.keyMap_.get(key);
  if (!values) {
    this.keyMap_.set(key, values = []);
  }
  values.push(value);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.remove = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  if (this.keyMap_.containsKey(key)) {
    this.invalidateCache_();
    this.count_ -= this.keyMap_.get(key).length;
    return this.keyMap_.remove(key);
  }
  return false;
};
goog.Uri.QueryData.prototype.clear = function() {
  this.invalidateCache_();
  this.keyMap_ = null;
  this.count_ = 0;
};
goog.Uri.QueryData.prototype.isEmpty = function() {
  this.ensureKeyMapInitialized_();
  return this.count_ == 0;
};
goog.Uri.QueryData.prototype.containsKey = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key);
};
goog.Uri.QueryData.prototype.containsValue = function(value) {
  var vals = this.getValues();
  return goog.array.contains(vals, value);
};
goog.Uri.QueryData.prototype.getKeys = function() {
  this.ensureKeyMapInitialized_();
  var vals = (this.keyMap_.getValues());
  var keys = this.keyMap_.getKeys();
  var rv = [];
  for (var i = 0;i < keys.length;i++) {
    var val = vals[i];
    for (var j = 0;j < val.length;j++) {
      rv.push(keys[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.getValues = function(opt_key) {
  this.ensureKeyMapInitialized_();
  var rv = [];
  if (goog.isString(opt_key)) {
    if (this.containsKey(opt_key)) {
      rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key)));
    }
  } else {
    var values = (this.keyMap_.getValues());
    for (var i = 0;i < values.length;i++) {
      rv = goog.array.concat(rv, values[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.set = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  if (this.containsKey(key)) {
    this.count_ -= this.keyMap_.get(key).length;
  }
  this.keyMap_.set(key, [value]);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.get = function(key, opt_default) {
  var values = key ? this.getValues(key) : [];
  if (goog.Uri.preserveParameterTypesCompatibilityFlag) {
    return values.length > 0 ? values[0] : opt_default;
  } else {
    return values.length > 0 ? String(values[0]) : opt_default;
  }
};
goog.Uri.QueryData.prototype.setValues = function(key, values) {
  this.remove(key);
  if (values.length > 0) {
    this.invalidateCache_();
    this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values));
    this.count_ += values.length;
  }
};
goog.Uri.QueryData.prototype.toString = function() {
  if (this.encodedQuery_) {
    return this.encodedQuery_;
  }
  if (!this.keyMap_) {
    return "";
  }
  var sb = [];
  var keys = this.keyMap_.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var encodedKey = goog.string.urlEncode(key);
    var val = this.getValues(key);
    for (var j = 0;j < val.length;j++) {
      var param = encodedKey;
      if (val[j] !== "") {
        param += "\x3d" + goog.string.urlEncode(val[j]);
      }
      sb.push(param);
    }
  }
  return this.encodedQuery_ = sb.join("\x26");
};
goog.Uri.QueryData.prototype.toDecodedString = function() {
  return goog.Uri.decodeOrEmpty_(this.toString());
};
goog.Uri.QueryData.prototype.invalidateCache_ = function() {
  this.encodedQuery_ = null;
};
goog.Uri.QueryData.prototype.filterKeys = function(keys) {
  this.ensureKeyMapInitialized_();
  this.keyMap_.forEach(function(value, key) {
    if (!goog.array.contains(keys, key)) {
      this.remove(key);
    }
  }, this);
  return this;
};
goog.Uri.QueryData.prototype.clone = function() {
  var rv = new goog.Uri.QueryData;
  rv.encodedQuery_ = this.encodedQuery_;
  if (this.keyMap_) {
    rv.keyMap_ = this.keyMap_.clone();
    rv.count_ = this.count_;
  }
  return rv;
};
goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
  var keyName = String(arg);
  if (this.ignoreCase_) {
    keyName = keyName.toLowerCase();
  }
  return keyName;
};
goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
  var resetKeys = ignoreCase && !this.ignoreCase_;
  if (resetKeys) {
    this.ensureKeyMapInitialized_();
    this.invalidateCache_();
    this.keyMap_.forEach(function(value, key) {
      var lowerCase = key.toLowerCase();
      if (key != lowerCase) {
        this.remove(key);
        this.setValues(lowerCase, value);
      }
    }, this);
  }
  this.ignoreCase_ = ignoreCase;
};
goog.Uri.QueryData.prototype.extend = function(var_args) {
  for (var i = 0;i < arguments.length;i++) {
    var data = arguments[i];
    goog.structs.forEach(data, function(value, key) {
      this.add(key, value);
    }, this);
  }
};
goog.provide("goog.Thenable");
goog.Thenable = function() {
};
goog.Thenable.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {
};
goog.Thenable.IMPLEMENTED_BY_PROP = "$goog_Thenable";
goog.Thenable.addImplementation = function(ctor) {
  goog.exportProperty(ctor.prototype, "then", ctor.prototype.then);
  if (COMPILED) {
    ctor.prototype[goog.Thenable.IMPLEMENTED_BY_PROP] = true;
  } else {
    ctor.prototype.$goog_Thenable = true;
  }
};
goog.Thenable.isImplementedBy = function(object) {
  if (!object) {
    return false;
  }
  try {
    if (COMPILED) {
      return!!object[goog.Thenable.IMPLEMENTED_BY_PROP];
    }
    return!!object.$goog_Thenable;
  } catch (e) {
    return false;
  }
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.async.nextTick");
goog.provide("goog.async.throwException");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.functions");
goog.async.throwException = function(exception) {
  goog.global.setTimeout(function() {
    throw exception;
  }, 0);
};
goog.async.nextTick = function(callback, opt_context) {
  var cb = callback;
  if (opt_context) {
    cb = goog.bind(callback, opt_context);
  }
  cb = goog.async.nextTick.wrapCallback_(cb);
  if (goog.isFunction(goog.global.setImmediate)) {
    goog.global.setImmediate(cb);
    return;
  }
  if (!goog.async.nextTick.setImmediate_) {
    goog.async.nextTick.setImmediate_ = goog.async.nextTick.getSetImmediateEmulator_();
  }
  goog.async.nextTick.setImmediate_(cb);
};
goog.async.nextTick.setImmediate_;
goog.async.nextTick.getSetImmediateEmulator_ = function() {
  var Channel = goog.global["MessageChannel"];
  if (typeof Channel === "undefined" && typeof window !== "undefined" && window.postMessage && window.addEventListener) {
    Channel = function() {
      var iframe = document.createElement("iframe");
      iframe.style.display = "none";
      iframe.src = "";
      document.documentElement.appendChild(iframe);
      var win = iframe.contentWindow;
      var doc = win.document;
      doc.open();
      doc.write("");
      doc.close();
      var message = "callImmediate" + Math.random();
      var origin = win.location.protocol == "file:" ? "*" : win.location.protocol + "//" + win.location.host;
      var onmessage = goog.bind(function(e) {
        if (e.origin != origin && e.data != message) {
          return;
        }
        this["port1"].onmessage();
      }, this);
      win.addEventListener("message", onmessage, false);
      this["port1"] = {};
      this["port2"] = {postMessage:function() {
        win.postMessage(message, origin);
      }};
    };
  }
  if (typeof Channel !== "undefined") {
    var channel = new Channel;
    var head = {};
    var tail = head;
    channel["port1"].onmessage = function() {
      head = head.next;
      var cb = head.cb;
      head.cb = null;
      cb();
    };
    return function(cb) {
      tail.next = {cb:cb};
      tail = tail.next;
      channel["port2"].postMessage(0);
    };
  }
  if (typeof document !== "undefined" && "onreadystatechange" in document.createElement("script")) {
    return function(cb) {
      var script = document.createElement("script");
      script.onreadystatechange = function() {
        script.onreadystatechange = null;
        script.parentNode.removeChild(script);
        script = null;
        cb();
        cb = null;
      };
      document.documentElement.appendChild(script);
    };
  }
  return function(cb) {
    goog.global.setTimeout(cb, 0);
  };
};
goog.async.nextTick.wrapCallback_ = goog.functions.identity;
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.async.nextTick.wrapCallback_ = transformer;
});
goog.provide("goog.testing.watchers");
goog.testing.watchers.resetWatchers_ = [];
goog.testing.watchers.signalClockReset = function() {
  var watchers = goog.testing.watchers.resetWatchers_;
  for (var i = 0;i < watchers.length;i++) {
    goog.testing.watchers.resetWatchers_[i]();
  }
};
goog.testing.watchers.watchClockReset = function(fn) {
  goog.testing.watchers.resetWatchers_.push(fn);
};
goog.provide("goog.async.run");
goog.require("goog.async.nextTick");
goog.require("goog.async.throwException");
goog.require("goog.testing.watchers");
goog.async.run = function(callback, opt_context) {
  if (!goog.async.run.schedule_) {
    goog.async.run.initializeRunner_();
  }
  if (!goog.async.run.workQueueScheduled_) {
    goog.async.run.schedule_();
    goog.async.run.workQueueScheduled_ = true;
  }
  goog.async.run.workQueue_.push(new goog.async.run.WorkItem_(callback, opt_context));
};
goog.async.run.initializeRunner_ = function() {
  if (goog.global.Promise && goog.global.Promise.resolve) {
    var promise = goog.global.Promise.resolve();
    goog.async.run.schedule_ = function() {
      promise.then(goog.async.run.processWorkQueue);
    };
  } else {
    goog.async.run.schedule_ = function() {
      goog.async.nextTick(goog.async.run.processWorkQueue);
    };
  }
};
goog.async.run.forceNextTick = function() {
  goog.async.run.schedule_ = function() {
    goog.async.nextTick(goog.async.run.processWorkQueue);
  };
};
goog.async.run.schedule_;
goog.async.run.workQueueScheduled_ = false;
goog.async.run.workQueue_ = [];
if (goog.DEBUG) {
  goog.async.run.resetQueue_ = function() {
    goog.async.run.workQueueScheduled_ = false;
    goog.async.run.workQueue_ = [];
  };
  goog.testing.watchers.watchClockReset(goog.async.run.resetQueue_);
}
goog.async.run.processWorkQueue = function() {
  while (goog.async.run.workQueue_.length) {
    var workItems = goog.async.run.workQueue_;
    goog.async.run.workQueue_ = [];
    for (var i = 0;i < workItems.length;i++) {
      var workItem = workItems[i];
      try {
        workItem.fn.call(workItem.scope);
      } catch (e) {
        goog.async.throwException(e);
      }
    }
  }
  goog.async.run.workQueueScheduled_ = false;
};
goog.async.run.WorkItem_ = function(fn, scope) {
  this.fn = fn;
  this.scope = scope;
};
goog.provide("goog.promise.Resolver");
goog.promise.Resolver = function() {
};
goog.promise.Resolver.prototype.promise;
goog.promise.Resolver.prototype.resolve;
goog.promise.Resolver.prototype.reject;
goog.provide("goog.Promise");
goog.require("goog.Thenable");
goog.require("goog.asserts");
goog.require("goog.async.run");
goog.require("goog.async.throwException");
goog.require("goog.debug.Error");
goog.require("goog.promise.Resolver");
goog.Promise = function(resolver, opt_context) {
  this.state_ = goog.Promise.State_.PENDING;
  this.result_ = undefined;
  this.parent_ = null;
  this.callbackEntries_ = null;
  this.executing_ = false;
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    this.unhandledRejectionId_ = 0;
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      this.hadUnhandledRejection_ = false;
    }
  }
  if (goog.Promise.LONG_STACK_TRACES) {
    this.stack_ = [];
    this.addStackTrace_(new Error("created"));
    this.currentStep_ = 0;
  }
  try {
    var self = this;
    resolver.call(opt_context, function(value) {
      self.resolve_(goog.Promise.State_.FULFILLED, value);
    }, function(reason) {
      self.resolve_(goog.Promise.State_.REJECTED, reason);
    });
  } catch (e) {
    this.resolve_(goog.Promise.State_.REJECTED, e);
  }
};
goog.define("goog.Promise.LONG_STACK_TRACES", false);
goog.define("goog.Promise.UNHANDLED_REJECTION_DELAY", 0);
goog.Promise.State_ = {PENDING:0, BLOCKED:1, FULFILLED:2, REJECTED:3};
goog.Promise.CallbackEntry_;
goog.Promise.resolve = function(opt_value) {
  return new goog.Promise(function(resolve, reject) {
    resolve(opt_value);
  });
};
goog.Promise.reject = function(opt_reason) {
  return new goog.Promise(function(resolve, reject) {
    reject(opt_reason);
  });
};
goog.Promise.race = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    if (!promises.length) {
      resolve(undefined);
    }
    for (var i = 0, promise;promise = promises[i];i++) {
      promise.then(resolve, reject);
    }
  });
};
goog.Promise.all = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toFulfill = promises.length;
    var values = [];
    if (!toFulfill) {
      resolve(values);
      return;
    }
    var onFulfill = function(index, value) {
      toFulfill--;
      values[index] = value;
      if (toFulfill == 0) {
        resolve(values);
      }
    };
    var onReject = function(reason) {
      reject(reason);
    };
    for (var i = 0, promise;promise = promises[i];i++) {
      promise.then(goog.partial(onFulfill, i), onReject);
    }
  });
};
goog.Promise.firstFulfilled = function(promises) {
  return new goog.Promise(function(resolve, reject) {
    var toReject = promises.length;
    var reasons = [];
    if (!toReject) {
      resolve(undefined);
      return;
    }
    var onFulfill = function(value) {
      resolve(value);
    };
    var onReject = function(index, reason) {
      toReject--;
      reasons[index] = reason;
      if (toReject == 0) {
        reject(reasons);
      }
    };
    for (var i = 0, promise;promise = promises[i];i++) {
      promise.then(onFulfill, goog.partial(onReject, i));
    }
  });
};
goog.Promise.withResolver = function() {
  var resolve, reject;
  var promise = new goog.Promise(function(rs, rj) {
    resolve = rs;
    reject = rj;
  });
  return new goog.Promise.Resolver_(promise, resolve, reject);
};
goog.Promise.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {
  if (opt_onFulfilled != null) {
    goog.asserts.assertFunction(opt_onFulfilled, "opt_onFulfilled should be a function.");
  }
  if (opt_onRejected != null) {
    goog.asserts.assertFunction(opt_onRejected, "opt_onRejected should be a function. Did you pass opt_context " + "as the second argument instead of the third?");
  }
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("then"));
  }
  return this.addChildPromise_(goog.isFunction(opt_onFulfilled) ? opt_onFulfilled : null, goog.isFunction(opt_onRejected) ? opt_onRejected : null, opt_context);
};
goog.Thenable.addImplementation(goog.Promise);
goog.Promise.prototype.thenAlways = function(onResolved, opt_context) {
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("thenAlways"));
  }
  var callback = function() {
    try {
      onResolved.call(opt_context);
    } catch (err) {
      goog.Promise.handleRejection_.call(null, err);
    }
  };
  this.addCallbackEntry_({child:null, onRejected:callback, onFulfilled:callback});
  return this;
};
goog.Promise.prototype.thenCatch = function(onRejected, opt_context) {
  if (goog.Promise.LONG_STACK_TRACES) {
    this.addStackTrace_(new Error("thenCatch"));
  }
  return this.addChildPromise_(null, onRejected, opt_context);
};
goog.Promise.prototype.cancel = function(opt_message) {
  if (this.state_ == goog.Promise.State_.PENDING) {
    goog.async.run(function() {
      var err = new goog.Promise.CancellationError(opt_message);
      this.cancelInternal_(err);
    }, this);
  }
};
goog.Promise.prototype.cancelInternal_ = function(err) {
  if (this.state_ == goog.Promise.State_.PENDING) {
    if (this.parent_) {
      this.parent_.cancelChild_(this, err);
    } else {
      this.resolve_(goog.Promise.State_.REJECTED, err);
    }
  }
};
goog.Promise.prototype.cancelChild_ = function(childPromise, err) {
  if (!this.callbackEntries_) {
    return;
  }
  var childCount = 0;
  var childIndex = -1;
  for (var i = 0, entry;entry = this.callbackEntries_[i];i++) {
    var child = entry.child;
    if (child) {
      childCount++;
      if (child == childPromise) {
        childIndex = i;
      }
      if (childIndex >= 0 && childCount > 1) {
        break;
      }
    }
  }
  if (childIndex >= 0) {
    if (this.state_ == goog.Promise.State_.PENDING && childCount == 1) {
      this.cancelInternal_(err);
    } else {
      var callbackEntry = this.callbackEntries_.splice(childIndex, 1)[0];
      this.executeCallback_(callbackEntry, goog.Promise.State_.REJECTED, err);
    }
  }
};
goog.Promise.prototype.addCallbackEntry_ = function(callbackEntry) {
  if ((!this.callbackEntries_ || !this.callbackEntries_.length) && (this.state_ == goog.Promise.State_.FULFILLED || this.state_ == goog.Promise.State_.REJECTED)) {
    this.scheduleCallbacks_();
  }
  if (!this.callbackEntries_) {
    this.callbackEntries_ = [];
  }
  this.callbackEntries_.push(callbackEntry);
};
goog.Promise.prototype.addChildPromise_ = function(onFulfilled, onRejected, opt_context) {
  var callbackEntry = {child:null, onFulfilled:null, onRejected:null};
  callbackEntry.child = new goog.Promise(function(resolve, reject) {
    callbackEntry.onFulfilled = onFulfilled ? function(value) {
      try {
        var result = onFulfilled.call(opt_context, value);
        resolve(result);
      } catch (err) {
        reject(err);
      }
    } : resolve;
    callbackEntry.onRejected = onRejected ? function(reason) {
      try {
        var result = onRejected.call(opt_context, reason);
        if (!goog.isDef(result) && reason instanceof goog.Promise.CancellationError) {
          reject(reason);
        } else {
          resolve(result);
        }
      } catch (err) {
        reject(err);
      }
    } : reject;
  });
  callbackEntry.child.parent_ = this;
  this.addCallbackEntry_((callbackEntry));
  return callbackEntry.child;
};
goog.Promise.prototype.unblockAndFulfill_ = function(value) {
  goog.asserts.assert(this.state_ == goog.Promise.State_.BLOCKED);
  this.state_ = goog.Promise.State_.PENDING;
  this.resolve_(goog.Promise.State_.FULFILLED, value);
};
goog.Promise.prototype.unblockAndReject_ = function(reason) {
  goog.asserts.assert(this.state_ == goog.Promise.State_.BLOCKED);
  this.state_ = goog.Promise.State_.PENDING;
  this.resolve_(goog.Promise.State_.REJECTED, reason);
};
goog.Promise.prototype.resolve_ = function(state, x) {
  if (this.state_ != goog.Promise.State_.PENDING) {
    return;
  }
  if (this == x) {
    state = goog.Promise.State_.REJECTED;
    x = new TypeError("Promise cannot resolve to itself");
  } else {
    if (goog.Thenable.isImplementedBy(x)) {
      x = (x);
      this.state_ = goog.Promise.State_.BLOCKED;
      x.then(this.unblockAndFulfill_, this.unblockAndReject_, this);
      return;
    } else {
      if (goog.isObject(x)) {
        try {
          var then = x["then"];
          if (goog.isFunction(then)) {
            this.tryThen_(x, then);
            return;
          }
        } catch (e) {
          state = goog.Promise.State_.REJECTED;
          x = e;
        }
      }
    }
  }
  this.result_ = x;
  this.state_ = state;
  this.scheduleCallbacks_();
  if (state == goog.Promise.State_.REJECTED && !(x instanceof goog.Promise.CancellationError)) {
    goog.Promise.addUnhandledRejection_(this, x);
  }
};
goog.Promise.prototype.tryThen_ = function(thenable, then) {
  this.state_ = goog.Promise.State_.BLOCKED;
  var promise = this;
  var called = false;
  var resolve = function(value) {
    if (!called) {
      called = true;
      promise.unblockAndFulfill_(value);
    }
  };
  var reject = function(reason) {
    if (!called) {
      called = true;
      promise.unblockAndReject_(reason);
    }
  };
  try {
    then.call(thenable, resolve, reject);
  } catch (e) {
    reject(e);
  }
};
goog.Promise.prototype.scheduleCallbacks_ = function() {
  if (!this.executing_) {
    this.executing_ = true;
    goog.async.run(this.executeCallbacks_, this);
  }
};
goog.Promise.prototype.executeCallbacks_ = function() {
  while (this.callbackEntries_ && this.callbackEntries_.length) {
    var entries = this.callbackEntries_;
    this.callbackEntries_ = [];
    for (var i = 0;i < entries.length;i++) {
      if (goog.Promise.LONG_STACK_TRACES) {
        this.currentStep_++;
      }
      this.executeCallback_(entries[i], this.state_, this.result_);
    }
  }
  this.executing_ = false;
};
goog.Promise.prototype.executeCallback_ = function(callbackEntry, state, result) {
  if (state == goog.Promise.State_.FULFILLED) {
    callbackEntry.onFulfilled(result);
  } else {
    this.removeUnhandledRejection_();
    callbackEntry.onRejected(result);
  }
};
goog.Promise.prototype.addStackTrace_ = function(err) {
  if (goog.Promise.LONG_STACK_TRACES && goog.isString(err.stack)) {
    var trace = err.stack.split("\n", 4)[3];
    var message = err.message;
    message += Array(11 - message.length).join(" ");
    this.stack_.push(message + trace);
  }
};
goog.Promise.prototype.appendLongStack_ = function(err) {
  if (goog.Promise.LONG_STACK_TRACES && err && goog.isString(err.stack) && this.stack_.length) {
    var longTrace = ["Promise trace:"];
    for (var promise = this;promise;promise = promise.parent_) {
      for (var i = this.currentStep_;i >= 0;i--) {
        longTrace.push(promise.stack_[i]);
      }
      longTrace.push("Value: " + "[" + (promise.state_ == goog.Promise.State_.REJECTED ? "REJECTED" : "FULFILLED") + "] " + "\x3c" + String(promise.result_) + "\x3e");
    }
    err.stack += "\n\n" + longTrace.join("\n");
  }
};
goog.Promise.prototype.removeUnhandledRejection_ = function() {
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    for (var p = this;p && p.unhandledRejectionId_;p = p.parent_) {
      goog.global.clearTimeout(p.unhandledRejectionId_);
      p.unhandledRejectionId_ = 0;
    }
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      for (var p = this;p && p.hadUnhandledRejection_;p = p.parent_) {
        p.hadUnhandledRejection_ = false;
      }
    }
  }
};
goog.Promise.addUnhandledRejection_ = function(promise, reason) {
  if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
    promise.unhandledRejectionId_ = goog.global.setTimeout(function() {
      promise.appendLongStack_(reason);
      goog.Promise.handleRejection_.call(null, reason);
    }, goog.Promise.UNHANDLED_REJECTION_DELAY);
  } else {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
      promise.hadUnhandledRejection_ = true;
      goog.async.run(function() {
        if (promise.hadUnhandledRejection_) {
          promise.appendLongStack_(reason);
          goog.Promise.handleRejection_.call(null, reason);
        }
      });
    }
  }
};
goog.Promise.handleRejection_ = goog.async.throwException;
goog.Promise.setUnhandledRejectionHandler = function(handler) {
  goog.Promise.handleRejection_ = handler;
};
goog.Promise.CancellationError = function(opt_message) {
  goog.Promise.CancellationError.base(this, "constructor", opt_message);
};
goog.inherits(goog.Promise.CancellationError, goog.debug.Error);
goog.Promise.CancellationError.prototype.name = "cancel";
goog.Promise.Resolver_ = function(promise, resolve, reject) {
  this.promise = promise;
  this.resolve = resolve;
  this.reject = reject;
};
/*
 Portions of this code are from MochiKit, received by
 The Closure Authors under the MIT license. All other code is Copyright
 2005-2009 The Closure Authors. All Rights Reserved.
*/
goog.provide("goog.async.Deferred");
goog.provide("goog.async.Deferred.AlreadyCalledError");
goog.provide("goog.async.Deferred.CanceledError");
goog.require("goog.Promise");
goog.require("goog.Thenable");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug.Error");
goog.async.Deferred = function(opt_onCancelFunction, opt_defaultScope) {
  this.sequence_ = [];
  this.onCancelFunction_ = opt_onCancelFunction;
  this.defaultScope_ = opt_defaultScope || null;
  this.fired_ = false;
  this.hadError_ = false;
  this.result_ = undefined;
  this.blocked_ = false;
  this.blocking_ = false;
  this.silentlyCanceled_ = false;
  this.unhandledErrorId_ = 0;
  this.parent_ = null;
  this.branches_ = 0;
  if (goog.async.Deferred.LONG_STACK_TRACES) {
    this.constructorStack_ = null;
    if (Error.captureStackTrace) {
      var target = {stack:""};
      Error.captureStackTrace(target, goog.async.Deferred);
      if (typeof target.stack == "string") {
        this.constructorStack_ = target.stack.replace(/^[^\n]*\n/, "");
      }
    }
  }
};
goog.define("goog.async.Deferred.STRICT_ERRORS", false);
goog.define("goog.async.Deferred.LONG_STACK_TRACES", false);
goog.async.Deferred.prototype.cancel = function(opt_deepCancel) {
  if (!this.hasFired()) {
    if (this.parent_) {
      var parent = this.parent_;
      delete this.parent_;
      if (opt_deepCancel) {
        parent.cancel(opt_deepCancel);
      } else {
        parent.branchCancel_();
      }
    }
    if (this.onCancelFunction_) {
      this.onCancelFunction_.call(this.defaultScope_, this);
    } else {
      this.silentlyCanceled_ = true;
    }
    if (!this.hasFired()) {
      this.errback(new goog.async.Deferred.CanceledError(this));
    }
  } else {
    if (this.result_ instanceof goog.async.Deferred) {
      this.result_.cancel();
    }
  }
};
goog.async.Deferred.prototype.branchCancel_ = function() {
  this.branches_--;
  if (this.branches_ <= 0) {
    this.cancel();
  }
};
goog.async.Deferred.prototype.continue_ = function(isSuccess, res) {
  this.blocked_ = false;
  this.updateResult_(isSuccess, res);
};
goog.async.Deferred.prototype.updateResult_ = function(isSuccess, res) {
  this.fired_ = true;
  this.result_ = res;
  this.hadError_ = !isSuccess;
  this.fire_();
};
goog.async.Deferred.prototype.check_ = function() {
  if (this.hasFired()) {
    if (!this.silentlyCanceled_) {
      throw new goog.async.Deferred.AlreadyCalledError(this);
    }
    this.silentlyCanceled_ = false;
  }
};
goog.async.Deferred.prototype.callback = function(opt_result) {
  this.check_();
  this.assertNotDeferred_(opt_result);
  this.updateResult_(true, opt_result);
};
goog.async.Deferred.prototype.errback = function(opt_result) {
  this.check_();
  this.assertNotDeferred_(opt_result);
  this.makeStackTraceLong_(opt_result);
  this.updateResult_(false, opt_result);
};
goog.async.Deferred.prototype.makeStackTraceLong_ = function(error) {
  if (!goog.async.Deferred.LONG_STACK_TRACES) {
    return;
  }
  if (this.constructorStack_ && goog.isObject(error) && error.stack && /^[^\n]+(\n   [^\n]+)+/.test(error.stack)) {
    error.stack = error.stack + "\nDEFERRED OPERATION:\n" + this.constructorStack_;
  }
};
goog.async.Deferred.prototype.assertNotDeferred_ = function(obj) {
  goog.asserts.assert(!(obj instanceof goog.async.Deferred), "An execution sequence may not be initiated with a blocking Deferred.");
};
goog.async.Deferred.prototype.addCallback = function(cb, opt_scope) {
  return this.addCallbacks(cb, null, opt_scope);
};
goog.async.Deferred.prototype.addErrback = function(eb, opt_scope) {
  return this.addCallbacks(null, eb, opt_scope);
};
goog.async.Deferred.prototype.addBoth = function(f, opt_scope) {
  return this.addCallbacks(f, f, opt_scope);
};
goog.async.Deferred.prototype.addCallbacks = function(cb, eb, opt_scope) {
  goog.asserts.assert(!this.blocking_, "Blocking Deferreds can not be re-used");
  this.sequence_.push([cb, eb, opt_scope]);
  if (this.hasFired()) {
    this.fire_();
  }
  return this;
};
goog.async.Deferred.prototype.then = function(opt_onFulfilled, opt_onRejected, opt_context) {
  var resolve, reject;
  var promise = new goog.Promise(function(res, rej) {
    resolve = res;
    reject = rej;
  });
  this.addCallbacks(resolve, function(reason) {
    if (reason instanceof goog.async.Deferred.CanceledError) {
      promise.cancel();
    } else {
      reject(reason);
    }
  });
  return promise.then(opt_onFulfilled, opt_onRejected, opt_context);
};
goog.Thenable.addImplementation(goog.async.Deferred);
goog.async.Deferred.prototype.chainDeferred = function(otherDeferred) {
  this.addCallbacks(otherDeferred.callback, otherDeferred.errback, otherDeferred);
  return this;
};
goog.async.Deferred.prototype.awaitDeferred = function(otherDeferred) {
  if (!(otherDeferred instanceof goog.async.Deferred)) {
    return this.addCallback(function() {
      return otherDeferred;
    });
  }
  return this.addCallback(goog.bind(otherDeferred.branch, otherDeferred));
};
goog.async.Deferred.prototype.branch = function(opt_propagateCancel) {
  var d = new goog.async.Deferred;
  this.chainDeferred(d);
  if (opt_propagateCancel) {
    d.parent_ = this;
    this.branches_++;
  }
  return d;
};
goog.async.Deferred.prototype.hasFired = function() {
  return this.fired_;
};
goog.async.Deferred.prototype.isError = function(res) {
  return res instanceof Error;
};
goog.async.Deferred.prototype.hasErrback_ = function() {
  return goog.array.some(this.sequence_, function(sequenceRow) {
    return goog.isFunction(sequenceRow[1]);
  });
};
goog.async.Deferred.prototype.fire_ = function() {
  if (this.unhandledErrorId_ && this.hasFired() && this.hasErrback_()) {
    goog.async.Deferred.unscheduleError_(this.unhandledErrorId_);
    this.unhandledErrorId_ = 0;
  }
  if (this.parent_) {
    this.parent_.branches_--;
    delete this.parent_;
  }
  var res = this.result_;
  var unhandledException = false;
  var isNewlyBlocked = false;
  while (this.sequence_.length && !this.blocked_) {
    var sequenceEntry = this.sequence_.shift();
    var callback = sequenceEntry[0];
    var errback = sequenceEntry[1];
    var scope = sequenceEntry[2];
    var f = this.hadError_ ? errback : callback;
    if (f) {
      try {
        var ret = f.call(scope || this.defaultScope_, res);
        if (goog.isDef(ret)) {
          this.hadError_ = this.hadError_ && (ret == res || this.isError(ret));
          this.result_ = res = ret;
        }
        if (goog.Thenable.isImplementedBy(res)) {
          isNewlyBlocked = true;
          this.blocked_ = true;
        }
      } catch (ex) {
        res = ex;
        this.hadError_ = true;
        this.makeStackTraceLong_(res);
        if (!this.hasErrback_()) {
          unhandledException = true;
        }
      }
    }
  }
  this.result_ = res;
  if (isNewlyBlocked) {
    var onCallback = goog.bind(this.continue_, this, true);
    var onErrback = goog.bind(this.continue_, this, false);
    if (res instanceof goog.async.Deferred) {
      res.addCallbacks(onCallback, onErrback);
      res.blocking_ = true;
    } else {
      res.then(onCallback, onErrback);
    }
  } else {
    if (goog.async.Deferred.STRICT_ERRORS && this.isError(res) && !(res instanceof goog.async.Deferred.CanceledError)) {
      this.hadError_ = true;
      unhandledException = true;
    }
  }
  if (unhandledException) {
    this.unhandledErrorId_ = goog.async.Deferred.scheduleError_(res);
  }
};
goog.async.Deferred.succeed = function(opt_result) {
  var d = new goog.async.Deferred;
  d.callback(opt_result);
  return d;
};
goog.async.Deferred.fromPromise = function(promise) {
  var d = new goog.async.Deferred;
  d.callback();
  d.addCallback(function() {
    return promise;
  });
  return d;
};
goog.async.Deferred.fail = function(res) {
  var d = new goog.async.Deferred;
  d.errback(res);
  return d;
};
goog.async.Deferred.canceled = function() {
  var d = new goog.async.Deferred;
  d.cancel();
  return d;
};
goog.async.Deferred.when = function(value, callback, opt_scope) {
  if (value instanceof goog.async.Deferred) {
    return value.branch(true).addCallback(callback, opt_scope);
  } else {
    return goog.async.Deferred.succeed(value).addCallback(callback, opt_scope);
  }
};
goog.async.Deferred.AlreadyCalledError = function(deferred) {
  goog.debug.Error.call(this);
  this.deferred = deferred;
};
goog.inherits(goog.async.Deferred.AlreadyCalledError, goog.debug.Error);
goog.async.Deferred.AlreadyCalledError.prototype.message = "Deferred has already fired";
goog.async.Deferred.AlreadyCalledError.prototype.name = "AlreadyCalledError";
goog.async.Deferred.CanceledError = function(deferred) {
  goog.debug.Error.call(this);
  this.deferred = deferred;
};
goog.inherits(goog.async.Deferred.CanceledError, goog.debug.Error);
goog.async.Deferred.CanceledError.prototype.message = "Deferred was canceled";
goog.async.Deferred.CanceledError.prototype.name = "CanceledError";
goog.async.Deferred.Error_ = function(error) {
  this.id_ = goog.global.setTimeout(goog.bind(this.throwError, this), 0);
  this.error_ = error;
};
goog.async.Deferred.Error_.prototype.throwError = function() {
  goog.asserts.assert(goog.async.Deferred.errorMap_[this.id_], "Cannot throw an error that is not scheduled.");
  delete goog.async.Deferred.errorMap_[this.id_];
  throw this.error_;
};
goog.async.Deferred.Error_.prototype.resetTimer = function() {
  goog.global.clearTimeout(this.id_);
};
goog.async.Deferred.errorMap_ = {};
goog.async.Deferred.scheduleError_ = function(error) {
  var deferredError = new goog.async.Deferred.Error_(error);
  goog.async.Deferred.errorMap_[deferredError.id_] = deferredError;
  return deferredError.id_;
};
goog.async.Deferred.unscheduleError_ = function(id) {
  var error = goog.async.Deferred.errorMap_[id];
  if (error) {
    error.resetTimer();
    delete goog.async.Deferred.errorMap_[id];
  }
};
goog.async.Deferred.assertNoErrors = function() {
  var map = goog.async.Deferred.errorMap_;
  for (var key in map) {
    var error = map[key];
    error.resetTimer();
    error.throwError();
  }
};
goog.provide("goog.dom.BrowserFeature");
goog.require("goog.userAgent");
goog.dom.BrowserFeature = {CAN_ADD_NAME_OR_TYPE_ATTRIBUTES:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), CAN_USE_CHILDREN_ATTRIBUTE:!goog.userAgent.GECKO && !goog.userAgent.IE || goog.userAgent.IE && goog.userAgent.isDocumentModeOrHigher(9) || goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9.1"), CAN_USE_INNER_TEXT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), CAN_USE_PARENT_ELEMENT_PROPERTY:goog.userAgent.IE || goog.userAgent.OPERA || goog.userAgent.WEBKIT, 
INNER_HTML_NEEDS_SCOPED_ELEMENT:goog.userAgent.IE, LEGACY_IE_RANGES:goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)};
goog.provide("goog.dom.TagName");
goog.dom.TagName = {A:"A", ABBR:"ABBR", ACRONYM:"ACRONYM", ADDRESS:"ADDRESS", APPLET:"APPLET", AREA:"AREA", ARTICLE:"ARTICLE", ASIDE:"ASIDE", AUDIO:"AUDIO", B:"B", BASE:"BASE", BASEFONT:"BASEFONT", BDI:"BDI", BDO:"BDO", BIG:"BIG", BLOCKQUOTE:"BLOCKQUOTE", BODY:"BODY", BR:"BR", BUTTON:"BUTTON", CANVAS:"CANVAS", CAPTION:"CAPTION", CENTER:"CENTER", CITE:"CITE", CODE:"CODE", COL:"COL", COLGROUP:"COLGROUP", COMMAND:"COMMAND", DATA:"DATA", DATALIST:"DATALIST", DD:"DD", DEL:"DEL", DETAILS:"DETAILS", DFN:"DFN", 
DIALOG:"DIALOG", DIR:"DIR", DIV:"DIV", DL:"DL", DT:"DT", EM:"EM", EMBED:"EMBED", FIELDSET:"FIELDSET", FIGCAPTION:"FIGCAPTION", FIGURE:"FIGURE", FONT:"FONT", FOOTER:"FOOTER", FORM:"FORM", FRAME:"FRAME", FRAMESET:"FRAMESET", H1:"H1", H2:"H2", H3:"H3", H4:"H4", H5:"H5", H6:"H6", HEAD:"HEAD", HEADER:"HEADER", HGROUP:"HGROUP", HR:"HR", HTML:"HTML", I:"I", IFRAME:"IFRAME", IMG:"IMG", INPUT:"INPUT", INS:"INS", ISINDEX:"ISINDEX", KBD:"KBD", KEYGEN:"KEYGEN", LABEL:"LABEL", LEGEND:"LEGEND", LI:"LI", LINK:"LINK", 
MAP:"MAP", MARK:"MARK", MATH:"MATH", MENU:"MENU", META:"META", METER:"METER", NAV:"NAV", NOFRAMES:"NOFRAMES", NOSCRIPT:"NOSCRIPT", OBJECT:"OBJECT", OL:"OL", OPTGROUP:"OPTGROUP", OPTION:"OPTION", OUTPUT:"OUTPUT", P:"P", PARAM:"PARAM", PRE:"PRE", PROGRESS:"PROGRESS", Q:"Q", RP:"RP", RT:"RT", RUBY:"RUBY", S:"S", SAMP:"SAMP", SCRIPT:"SCRIPT", SECTION:"SECTION", SELECT:"SELECT", SMALL:"SMALL", SOURCE:"SOURCE", SPAN:"SPAN", STRIKE:"STRIKE", STRONG:"STRONG", STYLE:"STYLE", SUB:"SUB", SUMMARY:"SUMMARY", 
SUP:"SUP", SVG:"SVG", TABLE:"TABLE", TBODY:"TBODY", TD:"TD", TEXTAREA:"TEXTAREA", TFOOT:"TFOOT", TH:"TH", THEAD:"THEAD", TIME:"TIME", TITLE:"TITLE", TR:"TR", TRACK:"TRACK", TT:"TT", U:"U", UL:"UL", VAR:"VAR", VIDEO:"VIDEO", WBR:"WBR"};
goog.provide("goog.math.Coordinate");
goog.require("goog.math");
goog.math.Coordinate = function(opt_x, opt_y) {
  this.x = goog.isDef(opt_x) ? opt_x : 0;
  this.y = goog.isDef(opt_y) ? opt_y : 0;
};
goog.math.Coordinate.prototype.clone = function() {
  return new goog.math.Coordinate(this.x, this.y);
};
if (goog.DEBUG) {
  goog.math.Coordinate.prototype.toString = function() {
    return "(" + this.x + ", " + this.y + ")";
  };
}
goog.math.Coordinate.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.x == b.x && a.y == b.y;
};
goog.math.Coordinate.distance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy);
};
goog.math.Coordinate.magnitude = function(a) {
  return Math.sqrt(a.x * a.x + a.y * a.y);
};
goog.math.Coordinate.azimuth = function(a) {
  return goog.math.angle(0, 0, a.x, a.y);
};
goog.math.Coordinate.squaredDistance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return dx * dx + dy * dy;
};
goog.math.Coordinate.difference = function(a, b) {
  return new goog.math.Coordinate(a.x - b.x, a.y - b.y);
};
goog.math.Coordinate.sum = function(a, b) {
  return new goog.math.Coordinate(a.x + b.x, a.y + b.y);
};
goog.math.Coordinate.prototype.ceil = function() {
  this.x = Math.ceil(this.x);
  this.y = Math.ceil(this.y);
  return this;
};
goog.math.Coordinate.prototype.floor = function() {
  this.x = Math.floor(this.x);
  this.y = Math.floor(this.y);
  return this;
};
goog.math.Coordinate.prototype.round = function() {
  this.x = Math.round(this.x);
  this.y = Math.round(this.y);
  return this;
};
goog.math.Coordinate.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.x += tx.x;
    this.y += tx.y;
  } else {
    this.x += tx;
    if (goog.isNumber(opt_ty)) {
      this.y += opt_ty;
    }
  }
  return this;
};
goog.math.Coordinate.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.x *= sx;
  this.y *= sy;
  return this;
};
goog.math.Coordinate.prototype.rotateRadians = function(radians, opt_center) {
  var center = opt_center || new goog.math.Coordinate(0, 0);
  var x = this.x;
  var y = this.y;
  var cos = Math.cos(radians);
  var sin = Math.sin(radians);
  this.x = (x - center.x) * cos - (y - center.y) * sin + center.x;
  this.y = (x - center.x) * sin + (y - center.y) * cos + center.y;
};
goog.math.Coordinate.prototype.rotateDegrees = function(degrees, opt_center) {
  this.rotateRadians(goog.math.toRadians(degrees), opt_center);
};
goog.provide("goog.math.Size");
goog.math.Size = function(width, height) {
  this.width = width;
  this.height = height;
};
goog.math.Size.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.width == b.width && a.height == b.height;
};
goog.math.Size.prototype.clone = function() {
  return new goog.math.Size(this.width, this.height);
};
if (goog.DEBUG) {
  goog.math.Size.prototype.toString = function() {
    return "(" + this.width + " x " + this.height + ")";
  };
}
goog.math.Size.prototype.getLongest = function() {
  return Math.max(this.width, this.height);
};
goog.math.Size.prototype.getShortest = function() {
  return Math.min(this.width, this.height);
};
goog.math.Size.prototype.area = function() {
  return this.width * this.height;
};
goog.math.Size.prototype.perimeter = function() {
  return(this.width + this.height) * 2;
};
goog.math.Size.prototype.aspectRatio = function() {
  return this.width / this.height;
};
goog.math.Size.prototype.isEmpty = function() {
  return!this.area();
};
goog.math.Size.prototype.ceil = function() {
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Size.prototype.fitsInside = function(target) {
  return this.width <= target.width && this.height <= target.height;
};
goog.math.Size.prototype.floor = function() {
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Size.prototype.round = function() {
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Size.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.width *= sx;
  this.height *= sy;
  return this;
};
goog.math.Size.prototype.scaleToFit = function(target) {
  var s = this.aspectRatio() > target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.provide("goog.dom");
goog.provide("goog.dom.Appendable");
goog.provide("goog.dom.DomHelper");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.BrowserFeature");
goog.require("goog.dom.NodeType");
goog.require("goog.dom.TagName");
goog.require("goog.functions");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.define("goog.dom.ASSUME_QUIRKS_MODE", false);
goog.define("goog.dom.ASSUME_STANDARDS_MODE", false);
goog.dom.COMPAT_MODE_KNOWN_ = goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;
goog.dom.getDomHelper = function(opt_element) {
  return opt_element ? new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) : goog.dom.defaultDomHelper_ || (goog.dom.defaultDomHelper_ = new goog.dom.DomHelper);
};
goog.dom.defaultDomHelper_;
goog.dom.getDocument = function() {
  return document;
};
goog.dom.getElement = function(element) {
  return goog.dom.getElementHelper_(document, element);
};
goog.dom.getElementHelper_ = function(doc, element) {
  return goog.isString(element) ? doc.getElementById(element) : element;
};
goog.dom.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(document, id);
};
goog.dom.getRequiredElementHelper_ = function(doc, id) {
  goog.asserts.assertString(id);
  var element = goog.dom.getElementHelper_(doc, id);
  element = goog.asserts.assertElement(element, "No element found with id: " + id);
  return element;
};
goog.dom.$ = goog.dom.getElement;
goog.dom.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(document, opt_tag, opt_class, opt_el);
};
goog.dom.getElementsByClass = function(className, opt_el) {
  var parent = opt_el || document;
  if (goog.dom.canUseQuerySelector_(parent)) {
    return parent.querySelectorAll("." + className);
  }
  return goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el);
};
goog.dom.getElementByClass = function(className, opt_el) {
  var parent = opt_el || document;
  var retVal = null;
  if (goog.dom.canUseQuerySelector_(parent)) {
    retVal = parent.querySelector("." + className);
  } else {
    retVal = goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el)[0];
  }
  return retVal || null;
};
goog.dom.getRequiredElementByClass = function(className, opt_root) {
  var retValue = goog.dom.getElementByClass(className, opt_root);
  return goog.asserts.assert(retValue, "No element found with className: " + className);
};
goog.dom.canUseQuerySelector_ = function(parent) {
  return!!(parent.querySelectorAll && parent.querySelector);
};
goog.dom.getElementsByTagNameAndClass_ = function(doc, opt_tag, opt_class, opt_el) {
  var parent = opt_el || doc;
  var tagName = opt_tag && opt_tag != "*" ? opt_tag.toUpperCase() : "";
  if (goog.dom.canUseQuerySelector_(parent) && (tagName || opt_class)) {
    var query = tagName + (opt_class ? "." + opt_class : "");
    return parent.querySelectorAll(query);
  }
  if (opt_class && parent.getElementsByClassName) {
    var els = parent.getElementsByClassName(opt_class);
    if (tagName) {
      var arrayLike = {};
      var len = 0;
      for (var i = 0, el;el = els[i];i++) {
        if (tagName == el.nodeName) {
          arrayLike[len++] = el;
        }
      }
      arrayLike.length = len;
      return arrayLike;
    } else {
      return els;
    }
  }
  var els = parent.getElementsByTagName(tagName || "*");
  if (opt_class) {
    var arrayLike = {};
    var len = 0;
    for (var i = 0, el;el = els[i];i++) {
      var className = el.className;
      if (typeof className.split == "function" && goog.array.contains(className.split(/\s+/), opt_class)) {
        arrayLike[len++] = el;
      }
    }
    arrayLike.length = len;
    return arrayLike;
  } else {
    return els;
  }
};
goog.dom.$$ = goog.dom.getElementsByTagNameAndClass;
goog.dom.setProperties = function(element, properties) {
  goog.object.forEach(properties, function(val, key) {
    if (key == "style") {
      element.style.cssText = val;
    } else {
      if (key == "class") {
        element.className = val;
      } else {
        if (key == "for") {
          element.htmlFor = val;
        } else {
          if (key in goog.dom.DIRECT_ATTRIBUTE_MAP_) {
            element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val);
          } else {
            if (goog.string.startsWith(key, "aria-") || goog.string.startsWith(key, "data-")) {
              element.setAttribute(key, val);
            } else {
              element[key] = val;
            }
          }
        }
      }
    }
  });
};
goog.dom.DIRECT_ATTRIBUTE_MAP_ = {"cellpadding":"cellPadding", "cellspacing":"cellSpacing", "colspan":"colSpan", "frameborder":"frameBorder", "height":"height", "maxlength":"maxLength", "role":"role", "rowspan":"rowSpan", "type":"type", "usemap":"useMap", "valign":"vAlign", "width":"width"};
goog.dom.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize_(opt_window || window);
};
goog.dom.getViewportSize_ = function(win) {
  var doc = win.document;
  var el = goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
  return new goog.math.Size(el.clientWidth, el.clientHeight);
};
goog.dom.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(window);
};
goog.dom.getDocumentHeight_ = function(win) {
  var doc = win.document;
  var height = 0;
  if (doc) {
    var body = doc.body;
    var docEl = doc.documentElement;
    if (!body && !docEl) {
      return 0;
    }
    var vh = goog.dom.getViewportSize_(win).height;
    if (goog.dom.isCss1CompatMode_(doc) && docEl.scrollHeight) {
      height = docEl.scrollHeight != vh ? docEl.scrollHeight : docEl.offsetHeight;
    } else {
      var sh = docEl.scrollHeight;
      var oh = docEl.offsetHeight;
      if (docEl.clientHeight != oh) {
        sh = body.scrollHeight;
        oh = body.offsetHeight;
      }
      if (sh > vh) {
        height = sh > oh ? sh : oh;
      } else {
        height = sh < oh ? sh : oh;
      }
    }
  }
  return height;
};
goog.dom.getPageScroll = function(opt_window) {
  var win = opt_window || goog.global || window;
  return goog.dom.getDomHelper(win.document).getDocumentScroll();
};
goog.dom.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(document);
};
goog.dom.getDocumentScroll_ = function(doc) {
  var el = goog.dom.getDocumentScrollElement_(doc);
  var win = goog.dom.getWindow_(doc);
  if (goog.userAgent.IE && goog.userAgent.isVersionOrHigher("10") && win.pageYOffset != el.scrollTop) {
    return new goog.math.Coordinate(el.scrollLeft, el.scrollTop);
  }
  return new goog.math.Coordinate(win.pageXOffset || el.scrollLeft, win.pageYOffset || el.scrollTop);
};
goog.dom.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(document);
};
goog.dom.getDocumentScrollElement_ = function(doc) {
  if (!goog.userAgent.WEBKIT && goog.dom.isCss1CompatMode_(doc)) {
    return doc.documentElement;
  }
  return doc.body || doc.documentElement;
};
goog.dom.getWindow = function(opt_doc) {
  return opt_doc ? goog.dom.getWindow_(opt_doc) : window;
};
goog.dom.getWindow_ = function(doc) {
  return doc.parentWindow || doc.defaultView;
};
goog.dom.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(document, arguments);
};
goog.dom.createDom_ = function(doc, args) {
  var tagName = args[0];
  var attributes = args[1];
  if (!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES && attributes && (attributes.name || attributes.type)) {
    var tagNameArr = ["\x3c", tagName];
    if (attributes.name) {
      tagNameArr.push(' name\x3d"', goog.string.htmlEscape(attributes.name), '"');
    }
    if (attributes.type) {
      tagNameArr.push(' type\x3d"', goog.string.htmlEscape(attributes.type), '"');
      var clone = {};
      goog.object.extend(clone, attributes);
      delete clone["type"];
      attributes = clone;
    }
    tagNameArr.push("\x3e");
    tagName = tagNameArr.join("");
  }
  var element = doc.createElement(tagName);
  if (attributes) {
    if (goog.isString(attributes)) {
      element.className = attributes;
    } else {
      if (goog.isArray(attributes)) {
        element.className = attributes.join(" ");
      } else {
        goog.dom.setProperties(element, attributes);
      }
    }
  }
  if (args.length > 2) {
    goog.dom.append_(doc, element, args, 2);
  }
  return element;
};
goog.dom.append_ = function(doc, parent, args, startIndex) {
  function childHandler(child) {
    if (child) {
      parent.appendChild(goog.isString(child) ? doc.createTextNode(child) : child);
    }
  }
  for (var i = startIndex;i < args.length;i++) {
    var arg = args[i];
    if (goog.isArrayLike(arg) && !goog.dom.isNodeLike(arg)) {
      goog.array.forEach(goog.dom.isNodeList(arg) ? goog.array.toArray(arg) : arg, childHandler);
    } else {
      childHandler(arg);
    }
  }
};
goog.dom.$dom = goog.dom.createDom;
goog.dom.createElement = function(name) {
  return document.createElement(name);
};
goog.dom.createTextNode = function(content) {
  return document.createTextNode(String(content));
};
goog.dom.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.createTable_ = function(doc, rows, columns, fillWithNbsp) {
  var rowHtml = ["\x3ctr\x3e"];
  for (var i = 0;i < columns;i++) {
    rowHtml.push(fillWithNbsp ? "\x3ctd\x3e\x26nbsp;\x3c/td\x3e" : "\x3ctd\x3e\x3c/td\x3e");
  }
  rowHtml.push("\x3c/tr\x3e");
  rowHtml = rowHtml.join("");
  var totalHtml = ["\x3ctable\x3e"];
  for (i = 0;i < rows;i++) {
    totalHtml.push(rowHtml);
  }
  totalHtml.push("\x3c/table\x3e");
  var elem = doc.createElement(goog.dom.TagName.DIV);
  elem.innerHTML = totalHtml.join("");
  return(elem.removeChild(elem.firstChild));
};
goog.dom.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(document, htmlString);
};
goog.dom.htmlToDocumentFragment_ = function(doc, htmlString) {
  var tempDiv = doc.createElement("div");
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    tempDiv.innerHTML = "\x3cbr\x3e" + htmlString;
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    tempDiv.innerHTML = htmlString;
  }
  if (tempDiv.childNodes.length == 1) {
    return(tempDiv.removeChild(tempDiv.firstChild));
  } else {
    var fragment = doc.createDocumentFragment();
    while (tempDiv.firstChild) {
      fragment.appendChild(tempDiv.firstChild);
    }
    return fragment;
  }
};
goog.dom.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(document);
};
goog.dom.isCss1CompatMode_ = function(doc) {
  if (goog.dom.COMPAT_MODE_KNOWN_) {
    return goog.dom.ASSUME_STANDARDS_MODE;
  }
  return doc.compatMode == "CSS1Compat";
};
goog.dom.canHaveChildren = function(node) {
  if (node.nodeType != goog.dom.NodeType.ELEMENT) {
    return false;
  }
  switch(node.tagName) {
    case goog.dom.TagName.APPLET:
    ;
    case goog.dom.TagName.AREA:
    ;
    case goog.dom.TagName.BASE:
    ;
    case goog.dom.TagName.BR:
    ;
    case goog.dom.TagName.COL:
    ;
    case goog.dom.TagName.COMMAND:
    ;
    case goog.dom.TagName.EMBED:
    ;
    case goog.dom.TagName.FRAME:
    ;
    case goog.dom.TagName.HR:
    ;
    case goog.dom.TagName.IMG:
    ;
    case goog.dom.TagName.INPUT:
    ;
    case goog.dom.TagName.IFRAME:
    ;
    case goog.dom.TagName.ISINDEX:
    ;
    case goog.dom.TagName.KEYGEN:
    ;
    case goog.dom.TagName.LINK:
    ;
    case goog.dom.TagName.NOFRAMES:
    ;
    case goog.dom.TagName.NOSCRIPT:
    ;
    case goog.dom.TagName.META:
    ;
    case goog.dom.TagName.OBJECT:
    ;
    case goog.dom.TagName.PARAM:
    ;
    case goog.dom.TagName.SCRIPT:
    ;
    case goog.dom.TagName.SOURCE:
    ;
    case goog.dom.TagName.STYLE:
    ;
    case goog.dom.TagName.TRACK:
    ;
    case goog.dom.TagName.WBR:
      return false;
  }
  return true;
};
goog.dom.appendChild = function(parent, child) {
  parent.appendChild(child);
};
goog.dom.append = function(parent, var_args) {
  goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1);
};
goog.dom.removeChildren = function(node) {
  var child;
  while (child = node.firstChild) {
    node.removeChild(child);
  }
};
goog.dom.insertSiblingBefore = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode);
  }
};
goog.dom.insertSiblingAfter = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode.nextSibling);
  }
};
goog.dom.insertChildAt = function(parent, child, index) {
  parent.insertBefore(child, parent.childNodes[index] || null);
};
goog.dom.removeNode = function(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null;
};
goog.dom.replaceNode = function(newNode, oldNode) {
  var parent = oldNode.parentNode;
  if (parent) {
    parent.replaceChild(newNode, oldNode);
  }
};
goog.dom.flattenElement = function(element) {
  var child, parent = element.parentNode;
  if (parent && parent.nodeType != goog.dom.NodeType.DOCUMENT_FRAGMENT) {
    if (element.removeNode) {
      return(element.removeNode(false));
    } else {
      while (child = element.firstChild) {
        parent.insertBefore(child, element);
      }
      return(goog.dom.removeNode(element));
    }
  }
};
goog.dom.getChildren = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE && element.children != undefined) {
    return element.children;
  }
  return goog.array.filter(element.childNodes, function(node) {
    return node.nodeType == goog.dom.NodeType.ELEMENT;
  });
};
goog.dom.getFirstElementChild = function(node) {
  if (node.firstElementChild != undefined) {
    return(node).firstElementChild;
  }
  return goog.dom.getNextElementNode_(node.firstChild, true);
};
goog.dom.getLastElementChild = function(node) {
  if (node.lastElementChild != undefined) {
    return(node).lastElementChild;
  }
  return goog.dom.getNextElementNode_(node.lastChild, false);
};
goog.dom.getNextElementSibling = function(node) {
  if (node.nextElementSibling != undefined) {
    return(node).nextElementSibling;
  }
  return goog.dom.getNextElementNode_(node.nextSibling, true);
};
goog.dom.getPreviousElementSibling = function(node) {
  if (node.previousElementSibling != undefined) {
    return(node).previousElementSibling;
  }
  return goog.dom.getNextElementNode_(node.previousSibling, false);
};
goog.dom.getNextElementNode_ = function(node, forward) {
  while (node && node.nodeType != goog.dom.NodeType.ELEMENT) {
    node = forward ? node.nextSibling : node.previousSibling;
  }
  return(node);
};
goog.dom.getNextNode = function(node) {
  if (!node) {
    return null;
  }
  if (node.firstChild) {
    return node.firstChild;
  }
  while (node && !node.nextSibling) {
    node = node.parentNode;
  }
  return node ? node.nextSibling : null;
};
goog.dom.getPreviousNode = function(node) {
  if (!node) {
    return null;
  }
  if (!node.previousSibling) {
    return node.parentNode;
  }
  node = node.previousSibling;
  while (node && node.lastChild) {
    node = node.lastChild;
  }
  return node;
};
goog.dom.isNodeLike = function(obj) {
  return goog.isObject(obj) && obj.nodeType > 0;
};
goog.dom.isElement = function(obj) {
  return goog.isObject(obj) && obj.nodeType == goog.dom.NodeType.ELEMENT;
};
goog.dom.isWindow = function(obj) {
  return goog.isObject(obj) && obj["window"] == obj;
};
goog.dom.getParentElement = function(element) {
  var parent;
  if (goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY) {
    var isIe9 = goog.userAgent.IE && goog.userAgent.isVersionOrHigher("9") && !goog.userAgent.isVersionOrHigher("10");
    if (!(isIe9 && goog.global["SVGElement"] && element instanceof goog.global["SVGElement"])) {
      parent = element.parentElement;
      if (parent) {
        return parent;
      }
    }
  }
  parent = element.parentNode;
  return goog.dom.isElement(parent) ? (parent) : null;
};
goog.dom.contains = function(parent, descendant) {
  if (parent.contains && descendant.nodeType == goog.dom.NodeType.ELEMENT) {
    return parent == descendant || parent.contains(descendant);
  }
  if (typeof parent.compareDocumentPosition != "undefined") {
    return parent == descendant || Boolean(parent.compareDocumentPosition(descendant) & 16);
  }
  while (descendant && parent != descendant) {
    descendant = descendant.parentNode;
  }
  return descendant == parent;
};
goog.dom.compareNodeOrder = function(node1, node2) {
  if (node1 == node2) {
    return 0;
  }
  if (node1.compareDocumentPosition) {
    return node1.compareDocumentPosition(node2) & 2 ? 1 : -1;
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)) {
    if (node1.nodeType == goog.dom.NodeType.DOCUMENT) {
      return-1;
    }
    if (node2.nodeType == goog.dom.NodeType.DOCUMENT) {
      return 1;
    }
  }
  if ("sourceIndex" in node1 || node1.parentNode && "sourceIndex" in node1.parentNode) {
    var isElement1 = node1.nodeType == goog.dom.NodeType.ELEMENT;
    var isElement2 = node2.nodeType == goog.dom.NodeType.ELEMENT;
    if (isElement1 && isElement2) {
      return node1.sourceIndex - node2.sourceIndex;
    } else {
      var parent1 = node1.parentNode;
      var parent2 = node2.parentNode;
      if (parent1 == parent2) {
        return goog.dom.compareSiblingOrder_(node1, node2);
      }
      if (!isElement1 && goog.dom.contains(parent1, node2)) {
        return-1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2);
      }
      if (!isElement2 && goog.dom.contains(parent2, node1)) {
        return goog.dom.compareParentsDescendantNodeIe_(node2, node1);
      }
      return(isElement1 ? node1.sourceIndex : parent1.sourceIndex) - (isElement2 ? node2.sourceIndex : parent2.sourceIndex);
    }
  }
  var doc = goog.dom.getOwnerDocument(node1);
  var range1, range2;
  range1 = doc.createRange();
  range1.selectNode(node1);
  range1.collapse(true);
  range2 = doc.createRange();
  range2.selectNode(node2);
  range2.collapse(true);
  return range1.compareBoundaryPoints(goog.global["Range"].START_TO_END, range2);
};
goog.dom.compareParentsDescendantNodeIe_ = function(textNode, node) {
  var parent = textNode.parentNode;
  if (parent == node) {
    return-1;
  }
  var sibling = node;
  while (sibling.parentNode != parent) {
    sibling = sibling.parentNode;
  }
  return goog.dom.compareSiblingOrder_(sibling, textNode);
};
goog.dom.compareSiblingOrder_ = function(node1, node2) {
  var s = node2;
  while (s = s.previousSibling) {
    if (s == node1) {
      return-1;
    }
  }
  return 1;
};
goog.dom.findCommonAncestor = function(var_args) {
  var i, count = arguments.length;
  if (!count) {
    return null;
  } else {
    if (count == 1) {
      return arguments[0];
    }
  }
  var paths = [];
  var minLength = Infinity;
  for (i = 0;i < count;i++) {
    var ancestors = [];
    var node = arguments[i];
    while (node) {
      ancestors.unshift(node);
      node = node.parentNode;
    }
    paths.push(ancestors);
    minLength = Math.min(minLength, ancestors.length);
  }
  var output = null;
  for (i = 0;i < minLength;i++) {
    var first = paths[0][i];
    for (var j = 1;j < count;j++) {
      if (first != paths[j][i]) {
        return output;
      }
    }
    output = first;
  }
  return output;
};
goog.dom.getOwnerDocument = function(node) {
  goog.asserts.assert(node, "Node cannot be null or undefined.");
  return(node.nodeType == goog.dom.NodeType.DOCUMENT ? node : node.ownerDocument || node.document);
};
goog.dom.getFrameContentDocument = function(frame) {
  var doc = frame.contentDocument || frame.contentWindow.document;
  return doc;
};
goog.dom.getFrameContentWindow = function(frame) {
  return frame.contentWindow || goog.dom.getWindow(goog.dom.getFrameContentDocument(frame));
};
goog.dom.setTextContent = function(node, text) {
  goog.asserts.assert(node != null, "goog.dom.setTextContent expects a non-null value for node");
  if ("textContent" in node) {
    node.textContent = text;
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      node.data = text;
    } else {
      if (node.firstChild && node.firstChild.nodeType == goog.dom.NodeType.TEXT) {
        while (node.lastChild != node.firstChild) {
          node.removeChild(node.lastChild);
        }
        node.firstChild.data = text;
      } else {
        goog.dom.removeChildren(node);
        var doc = goog.dom.getOwnerDocument(node);
        node.appendChild(doc.createTextNode(String(text)));
      }
    }
  }
};
goog.dom.getOuterHtml = function(element) {
  if ("outerHTML" in element) {
    return element.outerHTML;
  } else {
    var doc = goog.dom.getOwnerDocument(element);
    var div = doc.createElement("div");
    div.appendChild(element.cloneNode(true));
    return div.innerHTML;
  }
};
goog.dom.findNode = function(root, p) {
  var rv = [];
  var found = goog.dom.findNodes_(root, p, rv, true);
  return found ? rv[0] : undefined;
};
goog.dom.findNodes = function(root, p) {
  var rv = [];
  goog.dom.findNodes_(root, p, rv, false);
  return rv;
};
goog.dom.findNodes_ = function(root, p, rv, findOne) {
  if (root != null) {
    var child = root.firstChild;
    while (child) {
      if (p(child)) {
        rv.push(child);
        if (findOne) {
          return true;
        }
      }
      if (goog.dom.findNodes_(child, p, rv, findOne)) {
        return true;
      }
      child = child.nextSibling;
    }
  }
  return false;
};
goog.dom.TAGS_TO_IGNORE_ = {"SCRIPT":1, "STYLE":1, "HEAD":1, "IFRAME":1, "OBJECT":1};
goog.dom.PREDEFINED_TAG_VALUES_ = {"IMG":" ", "BR":"\n"};
goog.dom.isFocusableTabIndex = function(element) {
  return goog.dom.hasSpecifiedTabIndex_(element) && goog.dom.isTabIndexFocusable_(element);
};
goog.dom.setFocusableTabIndex = function(element, enable) {
  if (enable) {
    element.tabIndex = 0;
  } else {
    element.tabIndex = -1;
    element.removeAttribute("tabIndex");
  }
};
goog.dom.isFocusable = function(element) {
  var focusable;
  if (goog.dom.nativelySupportsFocus_(element)) {
    focusable = !element.disabled && (!goog.dom.hasSpecifiedTabIndex_(element) || goog.dom.isTabIndexFocusable_(element));
  } else {
    focusable = goog.dom.isFocusableTabIndex(element);
  }
  return focusable && goog.userAgent.IE ? goog.dom.hasNonZeroBoundingRect_(element) : focusable;
};
goog.dom.hasSpecifiedTabIndex_ = function(element) {
  var attrNode = element.getAttributeNode("tabindex");
  return goog.isDefAndNotNull(attrNode) && attrNode.specified;
};
goog.dom.isTabIndexFocusable_ = function(element) {
  var index = element.tabIndex;
  return goog.isNumber(index) && index >= 0 && index < 32768;
};
goog.dom.nativelySupportsFocus_ = function(element) {
  return element.tagName == goog.dom.TagName.A || element.tagName == goog.dom.TagName.INPUT || element.tagName == goog.dom.TagName.TEXTAREA || element.tagName == goog.dom.TagName.SELECT || element.tagName == goog.dom.TagName.BUTTON;
};
goog.dom.hasNonZeroBoundingRect_ = function(element) {
  var rect = goog.isFunction(element["getBoundingClientRect"]) ? element.getBoundingClientRect() : {"height":element.offsetHeight, "width":element.offsetWidth};
  return goog.isDefAndNotNull(rect) && rect.height > 0 && rect.width > 0;
};
goog.dom.getTextContent = function(node) {
  var textContent;
  if (goog.dom.BrowserFeature.CAN_USE_INNER_TEXT && "innerText" in node) {
    textContent = goog.string.canonicalizeNewlines(node.innerText);
  } else {
    var buf = [];
    goog.dom.getTextContent_(node, buf, true);
    textContent = buf.join("");
  }
  textContent = textContent.replace(/ \xAD /g, " ").replace(/\xAD/g, "");
  textContent = textContent.replace(/\u200B/g, "");
  if (!goog.dom.BrowserFeature.CAN_USE_INNER_TEXT) {
    textContent = textContent.replace(/ +/g, " ");
  }
  if (textContent != " ") {
    textContent = textContent.replace(/^\s*/, "");
  }
  return textContent;
};
goog.dom.getRawTextContent = function(node) {
  var buf = [];
  goog.dom.getTextContent_(node, buf, false);
  return buf.join("");
};
goog.dom.getTextContent_ = function(node, buf, normalizeWhitespace) {
  if (node.nodeName in goog.dom.TAGS_TO_IGNORE_) {
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      if (normalizeWhitespace) {
        buf.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ""));
      } else {
        buf.push(node.nodeValue);
      }
    } else {
      if (node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
        buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName]);
      } else {
        var child = node.firstChild;
        while (child) {
          goog.dom.getTextContent_(child, buf, normalizeWhitespace);
          child = child.nextSibling;
        }
      }
    }
  }
};
goog.dom.getNodeTextLength = function(node) {
  return goog.dom.getTextContent(node).length;
};
goog.dom.getNodeTextOffset = function(node, opt_offsetParent) {
  var root = opt_offsetParent || goog.dom.getOwnerDocument(node).body;
  var buf = [];
  while (node && node != root) {
    var cur = node;
    while (cur = cur.previousSibling) {
      buf.unshift(goog.dom.getTextContent(cur));
    }
    node = node.parentNode;
  }
  return goog.string.trimLeft(buf.join("")).replace(/ +/g, " ").length;
};
goog.dom.getNodeAtOffset = function(parent, offset, opt_result) {
  var stack = [parent], pos = 0, cur = null;
  while (stack.length > 0 && pos < offset) {
    cur = stack.pop();
    if (cur.nodeName in goog.dom.TAGS_TO_IGNORE_) {
    } else {
      if (cur.nodeType == goog.dom.NodeType.TEXT) {
        var text = cur.nodeValue.replace(/(\r\n|\r|\n)/g, "").replace(/ +/g, " ");
        pos += text.length;
      } else {
        if (cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
          pos += goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length;
        } else {
          for (var i = cur.childNodes.length - 1;i >= 0;i--) {
            stack.push(cur.childNodes[i]);
          }
        }
      }
    }
  }
  if (goog.isObject(opt_result)) {
    opt_result.remainder = cur ? cur.nodeValue.length + offset - pos - 1 : 0;
    opt_result.node = cur;
  }
  return cur;
};
goog.dom.isNodeList = function(val) {
  if (val && typeof val.length == "number") {
    if (goog.isObject(val)) {
      return typeof val.item == "function" || typeof val.item == "string";
    } else {
      if (goog.isFunction(val)) {
        return typeof val.item == "function";
      }
    }
  }
  return false;
};
goog.dom.getAncestorByTagNameAndClass = function(element, opt_tag, opt_class) {
  if (!opt_tag && !opt_class) {
    return null;
  }
  var tagName = opt_tag ? opt_tag.toUpperCase() : null;
  return(goog.dom.getAncestor(element, function(node) {
    return(!tagName || node.nodeName == tagName) && (!opt_class || goog.isString(node.className) && goog.array.contains(node.className.split(/\s+/), opt_class));
  }, true));
};
goog.dom.getAncestorByClass = function(element, className) {
  return goog.dom.getAncestorByTagNameAndClass(element, null, className);
};
goog.dom.getAncestor = function(element, matcher, opt_includeNode, opt_maxSearchSteps) {
  if (!opt_includeNode) {
    element = element.parentNode;
  }
  var ignoreSearchSteps = opt_maxSearchSteps == null;
  var steps = 0;
  while (element && (ignoreSearchSteps || steps <= opt_maxSearchSteps)) {
    if (matcher(element)) {
      return element;
    }
    element = element.parentNode;
    steps++;
  }
  return null;
};
goog.dom.getActiveElement = function(doc) {
  try {
    return doc && doc.activeElement;
  } catch (e) {
  }
  return null;
};
goog.dom.devicePixelRatio_;
goog.dom.getPixelRatio = goog.functions.cacheReturnValue(function() {
  var win = goog.dom.getWindow();
  var isFirefoxMobile = goog.userAgent.GECKO && goog.userAgent.MOBILE;
  if (goog.isDef(win.devicePixelRatio) && !isFirefoxMobile) {
    return win.devicePixelRatio;
  } else {
    if (win.matchMedia) {
      return goog.dom.matchesPixelRatio_(.75) || goog.dom.matchesPixelRatio_(1.5) || goog.dom.matchesPixelRatio_(2) || goog.dom.matchesPixelRatio_(3) || 1;
    }
  }
  return 1;
});
goog.dom.matchesPixelRatio_ = function(pixelRatio) {
  var win = goog.dom.getWindow();
  var query = "(-webkit-min-device-pixel-ratio: " + pixelRatio + ")," + "(min--moz-device-pixel-ratio: " + pixelRatio + ")," + "(min-resolution: " + pixelRatio + "dppx)";
  return win.matchMedia(query).matches ? pixelRatio : 0;
};
goog.dom.DomHelper = function(opt_document) {
  this.document_ = opt_document || goog.global.document || document;
};
goog.dom.DomHelper.prototype.getDomHelper = goog.dom.getDomHelper;
goog.dom.DomHelper.prototype.setDocument = function(document) {
  this.document_ = document;
};
goog.dom.DomHelper.prototype.getDocument = function() {
  return this.document_;
};
goog.dom.DomHelper.prototype.getElement = function(element) {
  return goog.dom.getElementHelper_(this.document_, element);
};
goog.dom.DomHelper.prototype.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(this.document_, id);
};
goog.dom.DomHelper.prototype.$ = goog.dom.DomHelper.prototype.getElement;
goog.dom.DomHelper.prototype.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el);
};
goog.dom.DomHelper.prototype.getElementsByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementsByClass(className, doc);
};
goog.dom.DomHelper.prototype.getElementByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementByClass(className, doc);
};
goog.dom.DomHelper.prototype.getRequiredElementByClass = function(className, opt_root) {
  var root = opt_root || this.document_;
  return goog.dom.getRequiredElementByClass(className, root);
};
goog.dom.DomHelper.prototype.$$ = goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;
goog.dom.DomHelper.prototype.setProperties = goog.dom.setProperties;
goog.dom.DomHelper.prototype.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize(opt_window || this.getWindow());
};
goog.dom.DomHelper.prototype.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(this.getWindow());
};
goog.dom.Appendable;
goog.dom.DomHelper.prototype.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(this.document_, arguments);
};
goog.dom.DomHelper.prototype.$dom = goog.dom.DomHelper.prototype.createDom;
goog.dom.DomHelper.prototype.createElement = function(name) {
  return this.document_.createElement(name);
};
goog.dom.DomHelper.prototype.createTextNode = function(content) {
  return this.document_.createTextNode(String(content));
};
goog.dom.DomHelper.prototype.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(this.document_, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.DomHelper.prototype.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(this.document_, htmlString);
};
goog.dom.DomHelper.prototype.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(this.document_);
};
goog.dom.DomHelper.prototype.getWindow = function() {
  return goog.dom.getWindow_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(this.document_);
};
goog.dom.DomHelper.prototype.getActiveElement = function(opt_doc) {
  return goog.dom.getActiveElement(opt_doc || this.document_);
};
goog.dom.DomHelper.prototype.appendChild = goog.dom.appendChild;
goog.dom.DomHelper.prototype.append = goog.dom.append;
goog.dom.DomHelper.prototype.canHaveChildren = goog.dom.canHaveChildren;
goog.dom.DomHelper.prototype.removeChildren = goog.dom.removeChildren;
goog.dom.DomHelper.prototype.insertSiblingBefore = goog.dom.insertSiblingBefore;
goog.dom.DomHelper.prototype.insertSiblingAfter = goog.dom.insertSiblingAfter;
goog.dom.DomHelper.prototype.insertChildAt = goog.dom.insertChildAt;
goog.dom.DomHelper.prototype.removeNode = goog.dom.removeNode;
goog.dom.DomHelper.prototype.replaceNode = goog.dom.replaceNode;
goog.dom.DomHelper.prototype.flattenElement = goog.dom.flattenElement;
goog.dom.DomHelper.prototype.getChildren = goog.dom.getChildren;
goog.dom.DomHelper.prototype.getFirstElementChild = goog.dom.getFirstElementChild;
goog.dom.DomHelper.prototype.getLastElementChild = goog.dom.getLastElementChild;
goog.dom.DomHelper.prototype.getNextElementSibling = goog.dom.getNextElementSibling;
goog.dom.DomHelper.prototype.getPreviousElementSibling = goog.dom.getPreviousElementSibling;
goog.dom.DomHelper.prototype.getNextNode = goog.dom.getNextNode;
goog.dom.DomHelper.prototype.getPreviousNode = goog.dom.getPreviousNode;
goog.dom.DomHelper.prototype.isNodeLike = goog.dom.isNodeLike;
goog.dom.DomHelper.prototype.isElement = goog.dom.isElement;
goog.dom.DomHelper.prototype.isWindow = goog.dom.isWindow;
goog.dom.DomHelper.prototype.getParentElement = goog.dom.getParentElement;
goog.dom.DomHelper.prototype.contains = goog.dom.contains;
goog.dom.DomHelper.prototype.compareNodeOrder = goog.dom.compareNodeOrder;
goog.dom.DomHelper.prototype.findCommonAncestor = goog.dom.findCommonAncestor;
goog.dom.DomHelper.prototype.getOwnerDocument = goog.dom.getOwnerDocument;
goog.dom.DomHelper.prototype.getFrameContentDocument = goog.dom.getFrameContentDocument;
goog.dom.DomHelper.prototype.getFrameContentWindow = goog.dom.getFrameContentWindow;
goog.dom.DomHelper.prototype.setTextContent = goog.dom.setTextContent;
goog.dom.DomHelper.prototype.getOuterHtml = goog.dom.getOuterHtml;
goog.dom.DomHelper.prototype.findNode = goog.dom.findNode;
goog.dom.DomHelper.prototype.findNodes = goog.dom.findNodes;
goog.dom.DomHelper.prototype.isFocusableTabIndex = goog.dom.isFocusableTabIndex;
goog.dom.DomHelper.prototype.setFocusableTabIndex = goog.dom.setFocusableTabIndex;
goog.dom.DomHelper.prototype.isFocusable = goog.dom.isFocusable;
goog.dom.DomHelper.prototype.getTextContent = goog.dom.getTextContent;
goog.dom.DomHelper.prototype.getNodeTextLength = goog.dom.getNodeTextLength;
goog.dom.DomHelper.prototype.getNodeTextOffset = goog.dom.getNodeTextOffset;
goog.dom.DomHelper.prototype.getNodeAtOffset = goog.dom.getNodeAtOffset;
goog.dom.DomHelper.prototype.isNodeList = goog.dom.isNodeList;
goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass = goog.dom.getAncestorByTagNameAndClass;
goog.dom.DomHelper.prototype.getAncestorByClass = goog.dom.getAncestorByClass;
goog.dom.DomHelper.prototype.getAncestor = goog.dom.getAncestor;
goog.provide("goog.net.jsloader");
goog.provide("goog.net.jsloader.Error");
goog.provide("goog.net.jsloader.ErrorCode");
goog.provide("goog.net.jsloader.Options");
goog.require("goog.array");
goog.require("goog.async.Deferred");
goog.require("goog.debug.Error");
goog.require("goog.dom");
goog.require("goog.dom.TagName");
goog.net.jsloader.GLOBAL_VERIFY_OBJS_ = "closure_verification";
goog.net.jsloader.DEFAULT_TIMEOUT = 5E3;
goog.net.jsloader.Options;
goog.net.jsloader.scriptsToLoad_ = [];
goog.net.jsloader.loadMany = function(uris, opt_options) {
  if (!uris.length) {
    return;
  }
  var isAnotherModuleLoading = goog.net.jsloader.scriptsToLoad_.length;
  goog.array.extend(goog.net.jsloader.scriptsToLoad_, uris);
  if (isAnotherModuleLoading) {
    return;
  }
  uris = goog.net.jsloader.scriptsToLoad_;
  var popAndLoadNextScript = function() {
    var uri = uris.shift();
    var deferred = goog.net.jsloader.load(uri, opt_options);
    if (uris.length) {
      deferred.addBoth(popAndLoadNextScript);
    }
  };
  popAndLoadNextScript();
};
goog.net.jsloader.load = function(uri, opt_options) {
  var options = opt_options || {};
  var doc = options.document || document;
  var script = goog.dom.createElement(goog.dom.TagName.SCRIPT);
  var request = {script_:script, timeout_:undefined};
  var deferred = new goog.async.Deferred(goog.net.jsloader.cancel_, request);
  var timeout = null;
  var timeoutDuration = goog.isDefAndNotNull(options.timeout) ? options.timeout : goog.net.jsloader.DEFAULT_TIMEOUT;
  if (timeoutDuration > 0) {
    timeout = window.setTimeout(function() {
      goog.net.jsloader.cleanup_(script, true);
      deferred.errback(new goog.net.jsloader.Error(goog.net.jsloader.ErrorCode.TIMEOUT, "Timeout reached for loading script " + uri));
    }, timeoutDuration);
    request.timeout_ = timeout;
  }
  script.onload = script.onreadystatechange = function() {
    if (!script.readyState || script.readyState == "loaded" || script.readyState == "complete") {
      var removeScriptNode = options.cleanupWhenDone || false;
      goog.net.jsloader.cleanup_(script, removeScriptNode, timeout);
      deferred.callback(null);
    }
  };
  script.onerror = function() {
    goog.net.jsloader.cleanup_(script, true, timeout);
    deferred.errback(new goog.net.jsloader.Error(goog.net.jsloader.ErrorCode.LOAD_ERROR, "Error while loading script " + uri));
  };
  goog.dom.setProperties(script, {"type":"text/javascript", "charset":"UTF-8", "src":uri});
  var scriptParent = goog.net.jsloader.getScriptParentElement_(doc);
  scriptParent.appendChild(script);
  return deferred;
};
goog.net.jsloader.loadAndVerify = function(uri, verificationObjName, options) {
  if (!goog.global[goog.net.jsloader.GLOBAL_VERIFY_OBJS_]) {
    goog.global[goog.net.jsloader.GLOBAL_VERIFY_OBJS_] = {};
  }
  var verifyObjs = goog.global[goog.net.jsloader.GLOBAL_VERIFY_OBJS_];
  if (goog.isDef(verifyObjs[verificationObjName])) {
    return goog.async.Deferred.fail(new goog.net.jsloader.Error(goog.net.jsloader.ErrorCode.VERIFY_OBJECT_ALREADY_EXISTS, "Verification object " + verificationObjName + " already defined."));
  }
  var sendDeferred = goog.net.jsloader.load(uri, options);
  var deferred = new goog.async.Deferred(goog.bind(sendDeferred.cancel, sendDeferred));
  sendDeferred.addCallback(function() {
    var result = verifyObjs[verificationObjName];
    if (goog.isDef(result)) {
      deferred.callback(result);
      delete verifyObjs[verificationObjName];
    } else {
      deferred.errback(new goog.net.jsloader.Error(goog.net.jsloader.ErrorCode.VERIFY_ERROR, "Script " + uri + " loaded, but verification object " + verificationObjName + " was not defined."));
    }
  });
  sendDeferred.addErrback(function(error) {
    if (goog.isDef(verifyObjs[verificationObjName])) {
      delete verifyObjs[verificationObjName];
    }
    deferred.errback(error);
  });
  return deferred;
};
goog.net.jsloader.getScriptParentElement_ = function(doc) {
  var headElements = doc.getElementsByTagName(goog.dom.TagName.HEAD);
  if (!headElements || goog.array.isEmpty(headElements)) {
    return doc.documentElement;
  } else {
    return headElements[0];
  }
};
goog.net.jsloader.cancel_ = function() {
  var request = this;
  if (request && request.script_) {
    var scriptNode = request.script_;
    if (scriptNode && scriptNode.tagName == "SCRIPT") {
      goog.net.jsloader.cleanup_(scriptNode, true, request.timeout_);
    }
  }
};
goog.net.jsloader.cleanup_ = function(scriptNode, removeScriptNode, opt_timeout) {
  if (goog.isDefAndNotNull(opt_timeout)) {
    goog.global.clearTimeout(opt_timeout);
  }
  scriptNode.onload = goog.nullFunction;
  scriptNode.onerror = goog.nullFunction;
  scriptNode.onreadystatechange = goog.nullFunction;
  if (removeScriptNode) {
    window.setTimeout(function() {
      goog.dom.removeNode(scriptNode);
    }, 0);
  }
};
goog.net.jsloader.ErrorCode = {LOAD_ERROR:0, TIMEOUT:1, VERIFY_ERROR:2, VERIFY_OBJECT_ALREADY_EXISTS:3};
goog.net.jsloader.Error = function(code, opt_message) {
  var msg = "Jsloader error (code #" + code + ")";
  if (opt_message) {
    msg += ": " + opt_message;
  }
  goog.net.jsloader.Error.base(this, "constructor", msg);
  this.code = code;
};
goog.inherits(goog.net.jsloader.Error, goog.debug.Error);
goog.provide("goog.net.Jsonp");
goog.require("goog.Uri");
goog.require("goog.net.jsloader");
goog.net.Jsonp = function(uri, opt_callbackParamName) {
  this.uri_ = new goog.Uri(uri);
  this.callbackParamName_ = opt_callbackParamName ? opt_callbackParamName : "callback";
  this.timeout_ = 5E3;
};
goog.net.Jsonp.CALLBACKS = "_callbacks_";
goog.net.Jsonp.scriptCounter_ = 0;
goog.net.Jsonp.prototype.setRequestTimeout = function(timeout) {
  this.timeout_ = timeout;
};
goog.net.Jsonp.prototype.getRequestTimeout = function() {
  return this.timeout_;
};
goog.net.Jsonp.prototype.send = function(opt_payload, opt_replyCallback, opt_errorCallback, opt_callbackParamValue) {
  var payload = opt_payload || null;
  var id = opt_callbackParamValue || "_" + (goog.net.Jsonp.scriptCounter_++).toString(36) + goog.now().toString(36);
  if (!goog.global[goog.net.Jsonp.CALLBACKS]) {
    goog.global[goog.net.Jsonp.CALLBACKS] = {};
  }
  var uri = this.uri_.clone();
  if (payload) {
    goog.net.Jsonp.addPayloadToUri_(payload, uri);
  }
  if (opt_replyCallback) {
    var reply = goog.net.Jsonp.newReplyHandler_(id, opt_replyCallback);
    goog.global[goog.net.Jsonp.CALLBACKS][id] = reply;
    uri.setParameterValues(this.callbackParamName_, goog.net.Jsonp.CALLBACKS + "." + id);
  }
  var deferred = goog.net.jsloader.load(uri.toString(), {timeout:this.timeout_, cleanupWhenDone:true});
  var error = goog.net.Jsonp.newErrorHandler_(id, payload, opt_errorCallback);
  deferred.addErrback(error);
  return{id_:id, deferred_:deferred};
};
goog.net.Jsonp.prototype.cancel = function(request) {
  if (request) {
    if (request.deferred_) {
      request.deferred_.cancel();
    }
    if (request.id_) {
      goog.net.Jsonp.cleanup_(request.id_, false);
    }
  }
};
goog.net.Jsonp.newErrorHandler_ = function(id, payload, opt_errorCallback) {
  return function() {
    goog.net.Jsonp.cleanup_(id, false);
    if (opt_errorCallback) {
      opt_errorCallback(payload);
    }
  };
};
goog.net.Jsonp.newReplyHandler_ = function(id, replyCallback) {
  return function(var_args) {
    goog.net.Jsonp.cleanup_(id, true);
    replyCallback.apply(undefined, arguments);
  };
};
goog.net.Jsonp.cleanup_ = function(id, deleteReplyHandler) {
  if (goog.global[goog.net.Jsonp.CALLBACKS][id]) {
    if (deleteReplyHandler) {
      delete goog.global[goog.net.Jsonp.CALLBACKS][id];
    } else {
      goog.global[goog.net.Jsonp.CALLBACKS][id] = goog.nullFunction;
    }
  }
};
goog.net.Jsonp.addPayloadToUri_ = function(payload, uri) {
  for (var name in payload) {
    if (!payload.hasOwnProperty || payload.hasOwnProperty(name)) {
      uri.setParameterValues(name, payload[name]);
    }
  }
  return uri;
};
goog.provide("cljs.core.async.impl.protocols");
goog.require("cljs.core");
cljs.core.async.impl.protocols.MAX_QUEUE_SIZE = 1024;
cljs.core.async.impl.protocols.ReadPort = function() {
  var obj28181 = {};
  return obj28181;
}();
cljs.core.async.impl.protocols.take_BANG_ = function take_BANG_(port, fn1_handler) {
  if (function() {
    var and__3665__auto__ = port;
    if (and__3665__auto__) {
      return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2(port, fn1_handler);
  } else {
    var x__4314__auto__ = port == null ? null : port;
    return function() {
      var or__3677__auto__ = cljs.core.async.impl.protocols.take_BANG_[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core.async.impl.protocols.take_BANG_["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ReadPort.take!", port);
        }
      }
    }().call(null, port, fn1_handler);
  }
};
cljs.core.async.impl.protocols.WritePort = function() {
  var obj28183 = {};
  return obj28183;
}();
cljs.core.async.impl.protocols.put_BANG_ = function put_BANG_(port, val, fn1_handler) {
  if (function() {
    var and__3665__auto__ = port;
    if (and__3665__auto__) {
      return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return port.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3(port, val, fn1_handler);
  } else {
    var x__4314__auto__ = port == null ? null : port;
    return function() {
      var or__3677__auto__ = cljs.core.async.impl.protocols.put_BANG_[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core.async.impl.protocols.put_BANG_["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "WritePort.put!", port);
        }
      }
    }().call(null, port, val, fn1_handler);
  }
};
cljs.core.async.impl.protocols.Channel = function() {
  var obj28185 = {};
  return obj28185;
}();
cljs.core.async.impl.protocols.close_BANG_ = function close_BANG_(chan) {
  if (function() {
    var and__3665__auto__ = chan;
    if (and__3665__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1(chan);
  } else {
    var x__4314__auto__ = chan == null ? null : chan;
    return function() {
      var or__3677__auto__ = cljs.core.async.impl.protocols.close_BANG_[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core.async.impl.protocols.close_BANG_["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.close!", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.closed_QMARK_ = function closed_QMARK_(chan) {
  if (function() {
    var and__3665__auto__ = chan;
    if (and__3665__auto__) {
      return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return chan.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1(chan);
  } else {
    var x__4314__auto__ = chan == null ? null : chan;
    return function() {
      var or__3677__auto__ = cljs.core.async.impl.protocols.closed_QMARK_[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core.async.impl.protocols.closed_QMARK_["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Channel.closed?", chan);
        }
      }
    }().call(null, chan);
  }
};
cljs.core.async.impl.protocols.Handler = function() {
  var obj28187 = {};
  return obj28187;
}();
cljs.core.async.impl.protocols.active_QMARK_ = function active_QMARK_(h) {
  if (function() {
    var and__3665__auto__ = h;
    if (and__3665__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1(h);
  } else {
    var x__4314__auto__ = h == null ? null : h;
    return function() {
      var or__3677__auto__ = cljs.core.async.impl.protocols.active_QMARK_[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core.async.impl.protocols.active_QMARK_["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.active?", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.commit = function commit(h) {
  if (function() {
    var and__3665__auto__ = h;
    if (and__3665__auto__) {
      return h.cljs$core$async$impl$protocols$Handler$commit$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return h.cljs$core$async$impl$protocols$Handler$commit$arity$1(h);
  } else {
    var x__4314__auto__ = h == null ? null : h;
    return function() {
      var or__3677__auto__ = cljs.core.async.impl.protocols.commit[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core.async.impl.protocols.commit["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Handler.commit", h);
        }
      }
    }().call(null, h);
  }
};
cljs.core.async.impl.protocols.Buffer = function() {
  var obj28189 = {};
  return obj28189;
}();
cljs.core.async.impl.protocols.full_QMARK_ = function full_QMARK_(b) {
  if (function() {
    var and__3665__auto__ = b;
    if (and__3665__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1(b);
  } else {
    var x__4314__auto__ = b == null ? null : b;
    return function() {
      var or__3677__auto__ = cljs.core.async.impl.protocols.full_QMARK_[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core.async.impl.protocols.full_QMARK_["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.full?", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.remove_BANG_ = function remove_BANG_(b) {
  if (function() {
    var and__3665__auto__ = b;
    if (and__3665__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1(b);
  } else {
    var x__4314__auto__ = b == null ? null : b;
    return function() {
      var or__3677__auto__ = cljs.core.async.impl.protocols.remove_BANG_[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core.async.impl.protocols.remove_BANG_["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.remove!", b);
        }
      }
    }().call(null, b);
  }
};
cljs.core.async.impl.protocols.add_BANG__STAR_ = function add_BANG__STAR_(b, itm) {
  if (function() {
    var and__3665__auto__ = b;
    if (and__3665__auto__) {
      return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return b.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2(b, itm);
  } else {
    var x__4314__auto__ = b == null ? null : b;
    return function() {
      var or__3677__auto__ = cljs.core.async.impl.protocols.add_BANG__STAR_[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core.async.impl.protocols.add_BANG__STAR_["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Buffer.add!*", b);
        }
      }
    }().call(null, b, itm);
  }
};
cljs.core.async.impl.protocols.add_BANG_ = function() {
  var add_BANG_ = null;
  var add_BANG___1 = function(b) {
    return b;
  };
  var add_BANG___2 = function(b, itm) {
    if (!(itm == null)) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "itm", "itm", -713282527, null))))));
    }
    return cljs.core.async.impl.protocols.add_BANG__STAR_.call(null, b, itm);
  };
  add_BANG_ = function(b, itm) {
    switch(arguments.length) {
      case 1:
        return add_BANG___1.call(this, b);
      case 2:
        return add_BANG___2.call(this, b, itm);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  add_BANG_.cljs$core$IFn$_invoke$arity$1 = add_BANG___1;
  add_BANG_.cljs$core$IFn$_invoke$arity$2 = add_BANG___2;
  return add_BANG_;
}();
cljs.core.async.impl.protocols.UnblockingBuffer = function() {
  var obj28191 = {};
  return obj28191;
}();
goog.provide("cljs.core.async.impl.buffers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.buffers.acopy = function acopy(src, src_start, dest, dest_start, len) {
  var cnt = 0;
  while (true) {
    if (cnt < len) {
      dest[dest_start + cnt] = src[src_start + cnt];
      var G__28192 = cnt + 1;
      cnt = G__28192;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.RingBuffer = function(head, tail, length, arr) {
  this.head = head;
  this.tail = tail;
  this.length = length;
  this.arr = arr;
};
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/RingBuffer";
cljs.core.async.impl.buffers.RingBuffer.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core.async.impl.buffers/RingBuffer");
};
cljs.core.async.impl.buffers.RingBuffer.prototype.pop = function() {
  var self__ = this;
  var _ = this;
  if (self__.length === 0) {
    return null;
  } else {
    var x = self__.arr[self__.tail];
    self__.arr[self__.tail] = null;
    self__.tail = (self__.tail + 1) % self__.arr.length;
    self__.length = self__.length - 1;
    return x;
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unshift = function(x) {
  var self__ = this;
  var _ = this;
  self__.arr[self__.head] = x;
  self__.head = (self__.head + 1) % self__.arr.length;
  self__.length = self__.length + 1;
  return null;
};
cljs.core.async.impl.buffers.RingBuffer.prototype.unbounded_unshift = function(x) {
  var self__ = this;
  var this$ = this;
  if (self__.length + 1 === self__.arr.length) {
    this$.resize();
  } else {
  }
  return this$.unshift(x);
};
cljs.core.async.impl.buffers.RingBuffer.prototype.resize = function() {
  var self__ = this;
  var _ = this;
  var new_arr_size = self__.arr.length * 2;
  var new_arr = new Array(new_arr_size);
  if (self__.tail < self__.head) {
    cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.length);
    self__.tail = 0;
    self__.head = self__.length;
    return self__.arr = new_arr;
  } else {
    if (self__.tail > self__.head) {
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, self__.tail, new_arr, 0, self__.arr.length - self__.tail);
      cljs.core.async.impl.buffers.acopy.call(null, self__.arr, 0, new_arr, self__.arr.length - self__.tail, self__.head);
      self__.tail = 0;
      self__.head = self__.length;
      return self__.arr = new_arr;
    } else {
      if (self__.tail === self__.head) {
        self__.tail = 0;
        self__.head = 0;
        return self__.arr = new_arr;
      } else {
        return null;
      }
    }
  }
};
cljs.core.async.impl.buffers.RingBuffer.prototype.cleanup = function(keep_QMARK_) {
  var self__ = this;
  var this$ = this;
  var n__4547__auto__ = self__.length;
  var x = 0;
  while (true) {
    if (x < n__4547__auto__) {
      var v_28193 = this$.pop();
      if (keep_QMARK_.call(null, v_28193)) {
        this$.unshift(v_28193);
      } else {
      }
      var G__28194 = x + 1;
      x = G__28194;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.async.impl.buffers.__GT_RingBuffer = function __GT_RingBuffer(head, tail, length, arr) {
  return new cljs.core.async.impl.buffers.RingBuffer(head, tail, length, arr);
};
cljs.core.async.impl.buffers.ring_buffer = function ring_buffer(n) {
  if (n > 0) {
  } else {
    throw new Error("Assert failed: Can't create a ring buffer of size 0\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3e", "\x3e", 1085014381, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null), 0))));
  }
  return new cljs.core.async.impl.buffers.RingBuffer(0, 0, 0, new Array(n));
};
cljs.core.async.impl.buffers.FixedBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/FixedBuffer";
cljs.core.async.impl.buffers.FixedBuffer.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core.async.impl.buffers/FixedBuffer");
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length === self__.n;
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.FixedBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  self__.buf.unbounded_unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.__GT_FixedBuffer = function __GT_FixedBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(buf, n);
};
cljs.core.async.impl.buffers.fixed_buffer = function fixed_buffer(n) {
  return new cljs.core.async.impl.buffers.FixedBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.DroppingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/DroppingBuffer";
cljs.core.async.impl.buffers.DroppingBuffer.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core.async.impl.buffers/DroppingBuffer");
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
  } else {
    self__.buf.unshift(itm);
  }
  return this$__$1;
};
cljs.core.async.impl.buffers.DroppingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.__GT_DroppingBuffer = function __GT_DroppingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(buf, n);
};
cljs.core.async.impl.buffers.dropping_buffer = function dropping_buffer(n) {
  return new cljs.core.async.impl.buffers.DroppingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
cljs.core.async.impl.buffers.SlidingBuffer = function(buf, n) {
  this.buf = buf;
  this.n = n;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$type = true;
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorStr = "cljs.core.async.impl.buffers/SlidingBuffer";
cljs.core.async.impl.buffers.SlidingBuffer.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core.async.impl.buffers/SlidingBuffer");
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.length;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$ = true;
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$full_QMARK_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return false;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$remove_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.buf.pop();
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$Buffer$add_BANG__STAR_$arity$2 = function(this$, itm) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.buf.length === self__.n) {
    cljs.core.async.impl.protocols.remove_BANG_.call(null, this$__$1);
  } else {
  }
  self__.buf.unshift(itm);
  return this$__$1;
};
cljs.core.async.impl.buffers.SlidingBuffer.prototype.cljs$core$async$impl$protocols$UnblockingBuffer$ = true;
cljs.core.async.impl.buffers.__GT_SlidingBuffer = function __GT_SlidingBuffer(buf, n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(buf, n);
};
cljs.core.async.impl.buffers.sliding_buffer = function sliding_buffer(n) {
  return new cljs.core.async.impl.buffers.SlidingBuffer(cljs.core.async.impl.buffers.ring_buffer.call(null, n), n);
};
goog.provide("cljs.core.async.impl.dispatch");
goog.require("cljs.core");
goog.require("goog.async.nextTick");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
cljs.core.async.impl.dispatch.tasks = cljs.core.async.impl.buffers.ring_buffer.call(null, 32);
cljs.core.async.impl.dispatch.running_QMARK_ = false;
cljs.core.async.impl.dispatch.queued_QMARK_ = false;
cljs.core.async.impl.dispatch.TASK_BATCH_SIZE = 1024;
cljs.core.async.impl.dispatch.process_messages = function process_messages() {
  cljs.core.async.impl.dispatch.running_QMARK_ = true;
  cljs.core.async.impl.dispatch.queued_QMARK_ = false;
  var count_28195 = 0;
  while (true) {
    var m_28196 = cljs.core.async.impl.dispatch.tasks.pop();
    if (m_28196 == null) {
    } else {
      m_28196.call(null);
      if (count_28195 < cljs.core.async.impl.dispatch.TASK_BATCH_SIZE) {
        var G__28197 = count_28195 + 1;
        count_28195 = G__28197;
        continue;
      } else {
      }
    }
    break;
  }
  cljs.core.async.impl.dispatch.running_QMARK_ = false;
  if (cljs.core.async.impl.dispatch.tasks.length > 0) {
    return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
  } else {
    return null;
  }
};
cljs.core.async.impl.dispatch.queue_dispatcher = function queue_dispatcher() {
  if (cljs.core.truth_(function() {
    var and__3665__auto__ = cljs.core.async.impl.dispatch.queued_QMARK_;
    if (cljs.core.truth_(and__3665__auto__)) {
      return cljs.core.async.impl.dispatch.running_QMARK_;
    } else {
      return and__3665__auto__;
    }
  }())) {
    return null;
  } else {
    cljs.core.async.impl.dispatch.queued_QMARK_ = true;
    return goog.async.nextTick(cljs.core.async.impl.dispatch.process_messages);
  }
};
cljs.core.async.impl.dispatch.run = function run(f) {
  cljs.core.async.impl.dispatch.tasks.unbounded_unshift(f);
  return cljs.core.async.impl.dispatch.queue_dispatcher.call(null);
};
cljs.core.async.impl.dispatch.queue_delay = function queue_delay(f, delay) {
  return setTimeout(f, delay);
};
goog.provide("cljs.core.async.impl.channels");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.channels.box = function box(val) {
  if (typeof cljs.core.async.impl.channels.t28201 !== "undefined") {
  } else {
    cljs.core.async.impl.channels.t28201 = function(val, box, meta28202) {
      this.val = val;
      this.box = box;
      this.meta28202 = meta28202;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
    };
    cljs.core.async.impl.channels.t28201.cljs$lang$type = true;
    cljs.core.async.impl.channels.t28201.cljs$lang$ctorStr = "cljs.core.async.impl.channels/t28201";
    cljs.core.async.impl.channels.t28201.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
      return cljs.core._write.call(null, writer__4255__auto__, "cljs.core.async.impl.channels/t28201");
    };
    cljs.core.async.impl.channels.t28201.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.val;
    };
    cljs.core.async.impl.channels.t28201.prototype.cljs$core$IMeta$_meta$arity$1 = function(_28203) {
      var self__ = this;
      var _28203__$1 = this;
      return self__.meta28202;
    };
    cljs.core.async.impl.channels.t28201.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_28203, meta28202__$1) {
      var self__ = this;
      var _28203__$1 = this;
      return new cljs.core.async.impl.channels.t28201(self__.val, self__.box, meta28202__$1);
    };
    cljs.core.async.impl.channels.__GT_t28201 = function __GT_t28201(val__$1, box__$1, meta28202) {
      return new cljs.core.async.impl.channels.t28201(val__$1, box__$1, meta28202);
    };
  }
  return new cljs.core.async.impl.channels.t28201(val, box, null);
};
cljs.core.async.impl.channels.PutBox = function(handler, val) {
  this.handler = handler;
  this.val = val;
};
cljs.core.async.impl.channels.PutBox.cljs$lang$type = true;
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorStr = "cljs.core.async.impl.channels/PutBox";
cljs.core.async.impl.channels.PutBox.cljs$lang$ctorPrWriter = function(this__4257__auto__, writer__4258__auto__, opts__4259__auto__) {
  return cljs.core._write.call(null, writer__4258__auto__, "cljs.core.async.impl.channels/PutBox");
};
cljs.core.async.impl.channels.__GT_PutBox = function __GT_PutBox(handler, val) {
  return new cljs.core.async.impl.channels.PutBox(handler, val);
};
cljs.core.async.impl.channels.put_active_QMARK_ = function put_active_QMARK_(box) {
  return cljs.core.async.impl.protocols.active_QMARK_.call(null, box.handler);
};
cljs.core.async.impl.channels.MAX_DIRTY = 64;
cljs.core.async.impl.channels.MMC = function() {
  var obj28205 = {};
  return obj28205;
}();
cljs.core.async.impl.channels.abort = function abort(this$) {
  if (function() {
    var and__3665__auto__ = this$;
    if (and__3665__auto__) {
      return this$.cljs$core$async$impl$channels$MMC$abort$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return this$.cljs$core$async$impl$channels$MMC$abort$arity$1(this$);
  } else {
    var x__4314__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3677__auto__ = cljs.core.async.impl.channels.abort[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core.async.impl.channels.abort["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "MMC.abort", this$);
        }
      }
    }().call(null, this$);
  }
};
cljs.core.async.impl.channels.ManyToManyChannel = function(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  this.takes = takes;
  this.dirty_takes = dirty_takes;
  this.puts = puts;
  this.dirty_puts = dirty_puts;
  this.buf = buf;
  this.closed = closed;
  this.add_BANG_ = add_BANG_;
};
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$type = true;
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorStr = "cljs.core.async.impl.channels/ManyToManyChannel";
cljs.core.async.impl.channels.ManyToManyChannel.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core.async.impl.channels/ManyToManyChannel");
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.closed;
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.closed) {
    return null;
  } else {
    self__.closed = true;
    if (cljs.core.truth_(function() {
      var and__3665__auto__ = self__.buf;
      if (cljs.core.truth_(and__3665__auto__)) {
        return self__.puts.length === 0;
      } else {
        return and__3665__auto__;
      }
    }())) {
      self__.add_BANG_.call(null, self__.buf);
    } else {
    }
    while (true) {
      var taker_28206 = self__.takes.pop();
      if (taker_28206 == null) {
      } else {
        if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_28206)) {
          var take_cb_28207 = cljs.core.async.impl.protocols.commit.call(null, taker_28206);
          var val_28208 = cljs.core.truth_(function() {
            var and__3665__auto__ = self__.buf;
            if (cljs.core.truth_(and__3665__auto__)) {
              return cljs.core.count.call(null, self__.buf) > 0;
            } else {
              return and__3665__auto__;
            }
          }()) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
          cljs.core.async.impl.dispatch.run.call(null, function(take_cb_28207, val_28208, taker_28206, this$__$1) {
            return function() {
              return take_cb_28207.call(null, val_28208);
            };
          }(take_cb_28207, val_28208, taker_28206, this$__$1));
        } else {
        }
        continue;
      }
      break;
    }
    return null;
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(this$, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return null;
  } else {
    if (!(self__.buf == null) && cljs.core.count.call(null, self__.buf) > 0) {
      var _ = cljs.core.async.impl.protocols.commit.call(null, handler);
      var retval = cljs.core.async.impl.channels.box.call(null, cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf));
      while (true) {
        if (cljs.core.truth_(cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf))) {
        } else {
          var putter_28209 = self__.puts.pop();
          if (putter_28209 == null) {
          } else {
            var put_handler_28210 = putter_28209.handler;
            var val_28211 = putter_28209.val;
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_28210)) {
              var put_cb_28212 = cljs.core.async.impl.protocols.commit.call(null, put_handler_28210);
              cljs.core.async.impl.protocols.commit.call(null, handler);
              cljs.core.async.impl.dispatch.run.call(null, function(put_cb_28212, put_handler_28210, val_28211, putter_28209, _, retval, this$__$1) {
                return function() {
                  return put_cb_28212.call(null, true);
                };
              }(put_cb_28212, put_handler_28210, val_28211, putter_28209, _, retval, this$__$1));
              if (cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val_28211))) {
                cljs.core.async.impl.channels.abort.call(null, this$__$1);
              } else {
              }
            } else {
            }
            continue;
          }
        }
        break;
      }
      return retval;
    } else {
      var putter = function() {
        while (true) {
          var putter = self__.puts.pop();
          if (cljs.core.truth_(putter)) {
            if (cljs.core.async.impl.protocols.active_QMARK_.call(null, putter.handler)) {
              return putter;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(putter)) {
        var put_cb = cljs.core.async.impl.protocols.commit.call(null, putter.handler);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb, putter, this$__$1) {
          return function() {
            return put_cb.call(null, true);
          };
        }(put_cb, putter, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, putter.val);
      } else {
        if (cljs.core.truth_(self__.closed)) {
          if (cljs.core.truth_(self__.buf)) {
            self__.add_BANG_.call(null, self__.buf);
          } else {
          }
          if (cljs.core.truth_(function() {
            var and__3665__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, handler);
            if (cljs.core.truth_(and__3665__auto__)) {
              return cljs.core.async.impl.protocols.commit.call(null, handler);
            } else {
              return and__3665__auto__;
            }
          }())) {
            var has_val = function() {
              var and__3665__auto__ = self__.buf;
              if (cljs.core.truth_(and__3665__auto__)) {
                return cljs.core.count.call(null, self__.buf) > 0;
              } else {
                return and__3665__auto__;
              }
            }();
            var val = cljs.core.truth_(has_val) ? cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf) : null;
            return cljs.core.async.impl.channels.box.call(null, val);
          } else {
            return null;
          }
        } else {
          if (self__.dirty_takes > cljs.core.async.impl.channels.MAX_DIRTY) {
            self__.dirty_takes = 0;
            self__.takes.cleanup(cljs.core.async.impl.protocols.active_QMARK_);
          } else {
            self__.dirty_takes = self__.dirty_takes + 1;
          }
          if (self__.takes.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
          } else {
            throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("No more than " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) + " pending takes are allowed on a single channel.") + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", -280799999, null), new cljs.core.Symbol(null, 
            "takes", "takes", 298247964, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null)))));
          }
          self__.takes.unbounded_unshift(handler);
          return null;
        }
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(this$, val, handler) {
  var self__ = this;
  var this$__$1 = this;
  if (!(val == null)) {
  } else {
    throw new Error("Assert failed: Can't put nil in on a channel\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not", "not", 1044554643, null), cljs.core.list(new cljs.core.Symbol(null, "nil?", "nil?", 1612038930, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null))))));
  }
  var closed__$1 = self__.closed;
  if (closed__$1 || !cljs.core.async.impl.protocols.active_QMARK_.call(null, handler)) {
    return cljs.core.async.impl.channels.box.call(null, !closed__$1);
  } else {
    if (cljs.core.truth_(function() {
      var and__3665__auto__ = self__.buf;
      if (cljs.core.truth_(and__3665__auto__)) {
        return cljs.core.not.call(null, cljs.core.async.impl.protocols.full_QMARK_.call(null, self__.buf));
      } else {
        return and__3665__auto__;
      }
    }())) {
      cljs.core.async.impl.protocols.commit.call(null, handler);
      var done_QMARK_ = cljs.core.reduced_QMARK_.call(null, self__.add_BANG_.call(null, self__.buf, val));
      while (true) {
        if (self__.takes.length > 0 && cljs.core.count.call(null, self__.buf) > 0) {
          var taker_28213 = self__.takes.pop();
          if (cljs.core.async.impl.protocols.active_QMARK_.call(null, taker_28213)) {
            var take_cb_28214 = cljs.core.async.impl.protocols.commit.call(null, taker_28213);
            var val_28215__$1 = cljs.core.async.impl.protocols.remove_BANG_.call(null, self__.buf);
            cljs.core.async.impl.dispatch.run.call(null, function(take_cb_28214, val_28215__$1, taker_28213, done_QMARK_, closed__$1, this$__$1) {
              return function() {
                return take_cb_28214.call(null, val_28215__$1);
              };
            }(take_cb_28214, val_28215__$1, taker_28213, done_QMARK_, closed__$1, this$__$1));
          } else {
            continue;
          }
        } else {
        }
        break;
      }
      if (done_QMARK_) {
        cljs.core.async.impl.channels.abort.call(null, this$__$1);
      } else {
      }
      return cljs.core.async.impl.channels.box.call(null, true);
    } else {
      var taker = function() {
        while (true) {
          var taker = self__.takes.pop();
          if (cljs.core.truth_(taker)) {
            if (cljs.core.truth_(cljs.core.async.impl.protocols.active_QMARK_.call(null, taker))) {
              return taker;
            } else {
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(taker)) {
        var take_cb = cljs.core.async.impl.protocols.commit.call(null, taker);
        cljs.core.async.impl.protocols.commit.call(null, handler);
        cljs.core.async.impl.dispatch.run.call(null, function(take_cb, taker, closed__$1, this$__$1) {
          return function() {
            return take_cb.call(null, val);
          };
        }(take_cb, taker, closed__$1, this$__$1));
        return cljs.core.async.impl.channels.box.call(null, true);
      } else {
        if (self__.dirty_puts > cljs.core.async.impl.channels.MAX_DIRTY) {
          self__.dirty_puts = 0;
          self__.puts.cleanup(cljs.core.async.impl.channels.put_active_QMARK_);
        } else {
          self__.dirty_puts = self__.dirty_puts + 1;
        }
        if (self__.puts.length < cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) {
        } else {
          throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("No more than " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.async.impl.protocols.MAX_QUEUE_SIZE) + " pending puts are allowed on a single channel. Consider using a windowed buffer.") + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "\x3c", "\x3c", 993667236, null), cljs.core.list(new cljs.core.Symbol(null, ".-length", ".-length", 
          -280799999, null), new cljs.core.Symbol(null, "puts", "puts", -1883877054, null)), new cljs.core.Symbol("impl", "MAX-QUEUE-SIZE", "impl/MAX-QUEUE-SIZE", 1508600732, null)))));
        }
        self__.puts.unbounded_unshift(new cljs.core.async.impl.channels.PutBox(handler, val));
        return null;
      }
    }
  }
};
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$ = true;
cljs.core.async.impl.channels.ManyToManyChannel.prototype.cljs$core$async$impl$channels$MMC$abort$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  while (true) {
    var putter_28216 = self__.puts.pop();
    if (putter_28216 == null) {
    } else {
      var put_handler_28217 = putter_28216.handler;
      var val_28218 = putter_28216.val;
      if (cljs.core.async.impl.protocols.active_QMARK_.call(null, put_handler_28217)) {
        var put_cb_28219 = cljs.core.async.impl.protocols.commit.call(null, put_handler_28217);
        cljs.core.async.impl.dispatch.run.call(null, function(put_cb_28219, put_handler_28217, val_28218, putter_28216, this$__$1) {
          return function() {
            return put_cb_28219.call(null, true);
          };
        }(put_cb_28219, put_handler_28217, val_28218, putter_28216, this$__$1));
      } else {
        continue;
      }
    }
    break;
  }
  self__.puts.cleanup(cljs.core.constantly.call(null, false));
  return cljs.core.async.impl.protocols.close_BANG_.call(null, this$__$1);
};
cljs.core.async.impl.channels.__GT_ManyToManyChannel = function __GT_ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_) {
  return new cljs.core.async.impl.channels.ManyToManyChannel(takes, dirty_takes, puts, dirty_puts, buf, closed, add_BANG_);
};
cljs.core.async.impl.channels.ex_handler = function ex_handler(ex) {
  console.log(ex);
  return null;
};
cljs.core.async.impl.channels.handle = function handle(buf, exh, t) {
  var else$ = function() {
    var or__3677__auto__ = exh;
    if (cljs.core.truth_(or__3677__auto__)) {
      return or__3677__auto__;
    } else {
      return cljs.core.async.impl.channels.ex_handler;
    }
  }().call(null, t);
  if (else$ == null) {
    return buf;
  } else {
    return cljs.core.async.impl.protocols.add_BANG_.call(null, buf, else$);
  }
};
cljs.core.async.impl.channels.chan = function() {
  var chan = null;
  var chan__1 = function(buf) {
    return chan.call(null, buf, null);
  };
  var chan__2 = function(buf, xform) {
    return chan.call(null, buf, xform, null);
  };
  var chan__3 = function(buf, xform, exh) {
    return new cljs.core.async.impl.channels.ManyToManyChannel(cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, cljs.core.async.impl.buffers.ring_buffer.call(null, 32), 0, buf, false, function() {
      var add_BANG_ = cljs.core.truth_(xform) ? xform.call(null, cljs.core.async.impl.protocols.add_BANG_) : cljs.core.async.impl.protocols.add_BANG_;
      return function(add_BANG_) {
        return function() {
          var G__28224 = null;
          var G__28224__1 = function(buf__$1) {
            try {
              return add_BANG_.call(null, buf__$1);
            } catch (e28222) {
              var t = e28222;
              return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
            }
          };
          var G__28224__2 = function(buf__$1, val) {
            try {
              return add_BANG_.call(null, buf__$1, val);
            } catch (e28223) {
              var t = e28223;
              return cljs.core.async.impl.channels.handle.call(null, buf__$1, exh, t);
            }
          };
          G__28224 = function(buf__$1, val) {
            switch(arguments.length) {
              case 1:
                return G__28224__1.call(this, buf__$1);
              case 2:
                return G__28224__2.call(this, buf__$1, val);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__28224.cljs$core$IFn$_invoke$arity$1 = G__28224__1;
          G__28224.cljs$core$IFn$_invoke$arity$2 = G__28224__2;
          return G__28224;
        }();
      }(add_BANG_);
    }());
  };
  chan = function(buf, xform, exh) {
    switch(arguments.length) {
      case 1:
        return chan__1.call(this, buf);
      case 2:
        return chan__2.call(this, buf, xform);
      case 3:
        return chan__3.call(this, buf, xform, exh);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  chan.cljs$core$IFn$_invoke$arity$2 = chan__2;
  chan.cljs$core$IFn$_invoke$arity$3 = chan__3;
  return chan;
}();
goog.provide("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.ioc_helpers.FN_IDX = 0;
cljs.core.async.impl.ioc_helpers.STATE_IDX = 1;
cljs.core.async.impl.ioc_helpers.VALUE_IDX = 2;
cljs.core.async.impl.ioc_helpers.BINDINGS_IDX = 3;
cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES = 4;
cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION = 5;
cljs.core.async.impl.ioc_helpers.USER_START_IDX = 6;
cljs.core.async.impl.ioc_helpers.aset_object = function aset_object(arr, idx, o) {
  return arr[idx][o];
};
cljs.core.async.impl.ioc_helpers.aget_object = function aget_object(arr, idx) {
  return arr[idx];
};
cljs.core.async.impl.ioc_helpers.finished_QMARK_ = function finished_QMARK_(state_array) {
  return cljs.core.keyword_identical_QMARK_.call(null, state_array[cljs.core.async.impl.ioc_helpers.STATE_IDX], new cljs.core.Keyword(null, "finished", "finished", -1018867731));
};
cljs.core.async.impl.ioc_helpers.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.impl.ioc_helpers.t28141 !== "undefined") {
  } else {
    cljs.core.async.impl.ioc_helpers.t28141 = function(f, fn_handler, meta28142) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta28142 = meta28142;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.impl.ioc_helpers.t28141.cljs$lang$type = true;
    cljs.core.async.impl.ioc_helpers.t28141.cljs$lang$ctorStr = "cljs.core.async.impl.ioc-helpers/t28141";
    cljs.core.async.impl.ioc_helpers.t28141.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
      return cljs.core._write.call(null, writer__4255__auto__, "cljs.core.async.impl.ioc-helpers/t28141");
    };
    cljs.core.async.impl.ioc_helpers.t28141.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.impl.ioc_helpers.t28141.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.impl.ioc_helpers.t28141.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.impl.ioc_helpers.t28141.prototype.cljs$core$IMeta$_meta$arity$1 = function(_28143) {
      var self__ = this;
      var _28143__$1 = this;
      return self__.meta28142;
    };
    cljs.core.async.impl.ioc_helpers.t28141.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_28143, meta28142__$1) {
      var self__ = this;
      var _28143__$1 = this;
      return new cljs.core.async.impl.ioc_helpers.t28141(self__.f, self__.fn_handler, meta28142__$1);
    };
    cljs.core.async.impl.ioc_helpers.__GT_t28141 = function __GT_t28141(f__$1, fn_handler__$1, meta28142) {
      return new cljs.core.async.impl.ioc_helpers.t28141(f__$1, fn_handler__$1, meta28142);
    };
  }
  return new cljs.core.async.impl.ioc_helpers.t28141(f, fn_handler, null);
};
cljs.core.async.impl.ioc_helpers.run_state_machine = function run_state_machine(state) {
  return cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.FN_IDX).call(null, state);
};
cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped = function run_state_machine_wrapped(state) {
  try {
    return cljs.core.async.impl.ioc_helpers.run_state_machine.call(null, state);
  } catch (e28145) {
    if (e28145 instanceof Object) {
      var ex = e28145;
      cljs.core.async.impl.protocols.close_BANG_.call(null, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.USER_START_IDX));
      throw ex;
    } else {
      throw e28145;
    }
  }
};
cljs.core.async.impl.ioc_helpers.take_BANG_ = function take_BANG_(state, blk, c) {
  var temp__4220__auto__ = cljs.core.async.impl.protocols.take_BANG_.call(null, c, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(x) {
    var statearr_28148_28150 = state;
    statearr_28148_28150[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = x;
    statearr_28148_28150[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4220__auto__)) {
    var cb = temp__4220__auto__;
    var statearr_28149_28151 = state;
    statearr_28149_28151[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_28149_28151[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.put_BANG_ = function put_BANG_(state, blk, c, val) {
  var temp__4220__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, c, val, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(ret_val) {
    var statearr_28154_28156 = state;
    statearr_28154_28156[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = ret_val;
    statearr_28154_28156[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
  }));
  if (cljs.core.truth_(temp__4220__auto__)) {
    var cb = temp__4220__auto__;
    var statearr_28155_28157 = state;
    statearr_28155_28157[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
    statearr_28155_28157[cljs.core.async.impl.ioc_helpers.STATE_IDX] = blk;
    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
  } else {
    return null;
  }
};
cljs.core.async.impl.ioc_helpers.return_chan = function return_chan(state, value) {
  var c = state[cljs.core.async.impl.ioc_helpers.USER_START_IDX];
  if (value == null) {
  } else {
    cljs.core.async.impl.protocols.put_BANG_.call(null, c, value, cljs.core.async.impl.ioc_helpers.fn_handler.call(null, function(c) {
      return function() {
        return null;
      };
    }(c)));
  }
  cljs.core.async.impl.protocols.close_BANG_.call(null, c);
  return c;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame = function(catch_block, catch_exception, finally_block, continue_block, prev, __meta, __extmap) {
  this.catch_block = catch_block;
  this.catch_exception = catch_exception;
  this.finally_block = finally_block;
  this.continue_block = continue_block;
  this.prev = prev;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
  if (arguments.length > 5) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__4273__auto__, k__4274__auto__) {
  var self__ = this;
  var this__4273__auto____$1 = this;
  return cljs.core._lookup.call(null, this__4273__auto____$1, k__4274__auto__, null);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__4275__auto__, k28159, else__4276__auto__) {
  var self__ = this;
  var this__4275__auto____$1 = this;
  var G__28161 = k28159 instanceof cljs.core.Keyword ? k28159.fqn : null;
  switch(G__28161) {
    case "prev":
      return self__.prev;
      break;
    case "continue-block":
      return self__.continue_block;
      break;
    case "finally-block":
      return self__.finally_block;
      break;
    case "catch-exception":
      return self__.catch_exception;
      break;
    case "catch-block":
      return self__.catch_block;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k28159, else__4276__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__4287__auto__, writer__4288__auto__, opts__4289__auto__) {
  var self__ = this;
  var this__4287__auto____$1 = this;
  var pr_pair__4290__auto__ = function(this__4287__auto____$1) {
    return function(keyval__4291__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__4288__auto__, cljs.core.pr_writer, "", " ", "", opts__4289__auto__, keyval__4291__auto__);
    };
  }(this__4287__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__4288__auto__, pr_pair__4290__auto__, "#cljs.core.async.impl.ioc-helpers.ExceptionFrame{", ", ", "}", opts__4289__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__4271__auto__) {
  var self__ = this;
  var this__4271__auto____$1 = this;
  return self__.__meta;
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__4267__auto__) {
  var self__ = this;
  var this__4267__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICounted$_count$arity$1 = function(this__4277__auto__) {
  var self__ = this;
  var this__4277__auto____$1 = this;
  return 5 + cljs.core.count.call(null, self__.__extmap);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IHash$_hash$arity$1 = function(this__4268__auto__) {
  var self__ = this;
  var this__4268__auto____$1 = this;
  var h__4088__auto__ = self__.__hash;
  if (!(h__4088__auto__ == null)) {
    return h__4088__auto__;
  } else {
    var h__4088__auto____$1 = cljs.core.hash_imap.call(null, this__4268__auto____$1);
    self__.__hash = h__4088__auto____$1;
    return h__4088__auto____$1;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__4269__auto__, other__4270__auto__) {
  var self__ = this;
  var this__4269__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__3665__auto__ = other__4270__auto__;
    if (cljs.core.truth_(and__3665__auto__)) {
      return this__4269__auto____$1.constructor === other__4270__auto__.constructor && cljs.core.equiv_map.call(null, this__4269__auto____$1, other__4270__auto__);
    } else {
      return and__3665__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__4282__auto__, k__4283__auto__) {
  var self__ = this;
  var this__4282__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), 
  null], null), null), k__4283__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__4282__auto____$1), self__.__meta), k__4283__auto__);
  } else {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__4283__auto__)), null);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__4280__auto__, k__4281__auto__, G__28158) {
  var self__ = this;
  var this__4280__auto____$1 = this;
  var pred__28162 = cljs.core.keyword_identical_QMARK_;
  var expr__28163 = k__4281__auto__;
  if (cljs.core.truth_(pred__28162.call(null, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), expr__28163))) {
    return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(G__28158, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__28162.call(null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), expr__28163))) {
      return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, G__28158, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__28162.call(null, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), expr__28163))) {
        return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, G__28158, self__.continue_block, self__.prev, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__28162.call(null, new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), expr__28163))) {
          return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, G__28158, self__.prev, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__28162.call(null, new cljs.core.Keyword(null, "prev", "prev", -1597069226), expr__28163))) {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, G__28158, self__.__meta, self__.__extmap, null);
          } else {
            return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__4281__auto__, G__28158), null);
          }
        }
      }
    }
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__4285__auto__) {
  var self__ = this;
  var this__4285__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), self__.catch_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), self__.catch_exception], 
  null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), self__.finally_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), self__.continue_block], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prev", 
  "prev", -1597069226), self__.prev], null)], null), self__.__extmap));
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__4272__auto__, G__28158) {
  var self__ = this;
  var this__4272__auto____$1 = this;
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(self__.catch_block, self__.catch_exception, self__.finally_block, self__.continue_block, self__.prev, G__28158, self__.__extmap, self__.__hash);
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__4278__auto__, entry__4279__auto__) {
  var self__ = this;
  var this__4278__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__4279__auto__)) {
    return cljs.core._assoc.call(null, this__4278__auto____$1, cljs.core._nth.call(null, entry__4279__auto__, 0), cljs.core._nth.call(null, entry__4279__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__4278__auto____$1, entry__4279__auto__);
  }
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$type = true;
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrSeq = function(this__4307__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.ExceptionFrame.cljs$lang$ctorPrWriter = function(this__4307__auto__, writer__4308__auto__) {
  return cljs.core._write.call(null, writer__4308__auto__, "cljs.core.async.impl.ioc-helpers/ExceptionFrame");
};
cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame = function __GT_ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame(catch_block, catch_exception, finally_block, continue_block, prev);
};
cljs.core.async.impl.ioc_helpers.map__GT_ExceptionFrame = function map__GT_ExceptionFrame(G__28160) {
  return new cljs.core.async.impl.ioc_helpers.ExceptionFrame((new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(G__28160), (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(G__28160), (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(G__28160), (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(G__28160), 
  (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(G__28160), null, cljs.core.dissoc.call(null, G__28160, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850), new cljs.core.Keyword(null, "prev", "prev", -1597069226)));
};
cljs.core.async.impl.ioc_helpers.add_exception_frame = function add_exception_frame(state, catch_block, catch_exception, finally_block, continue_block) {
  var statearr_28167 = state;
  statearr_28167[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.async.impl.ioc_helpers.__GT_ExceptionFrame.call(null, catch_block, catch_exception, finally_block, continue_block, cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES));
  return statearr_28167;
};
cljs.core.async.impl.ioc_helpers.process_exception = function process_exception(state) {
  while (true) {
    var exception_frame = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES);
    var catch_block = (new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var catch_exception = (new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795)).cljs$core$IFn$_invoke$arity$1(exception_frame);
    var exception = cljs.core.async.impl.ioc_helpers.aget_object.call(null, state, cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION);
    if (cljs.core.truth_(function() {
      var and__3665__auto__ = exception;
      if (cljs.core.truth_(and__3665__auto__)) {
        return cljs.core.not.call(null, exception_frame);
      } else {
        return and__3665__auto__;
      }
    }())) {
      throw exception;
    } else {
      if (cljs.core.truth_(function() {
        var and__3665__auto__ = exception;
        if (cljs.core.truth_(and__3665__auto__)) {
          var and__3665__auto____$1 = catch_block;
          if (cljs.core.truth_(and__3665__auto____$1)) {
            return exception instanceof catch_exception;
          } else {
            return and__3665__auto____$1;
          }
        } else {
          return and__3665__auto__;
        }
      }())) {
        var statearr_28173 = state;
        statearr_28173[cljs.core.async.impl.ioc_helpers.STATE_IDX] = catch_block;
        statearr_28173[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = exception;
        statearr_28173[cljs.core.async.impl.ioc_helpers.CURRENT_EXCEPTION] = null;
        statearr_28173[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "catch-block", "catch-block", 1175212748), null, new cljs.core.Keyword(null, "catch-exception", "catch-exception", -1997306795), null);
        return statearr_28173;
      } else {
        if (cljs.core.truth_(function() {
          var and__3665__auto__ = exception;
          if (cljs.core.truth_(and__3665__auto__)) {
            return cljs.core.not.call(null, catch_block) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame));
          } else {
            return and__3665__auto__;
          }
        }())) {
          var statearr_28174_28178 = state;
          statearr_28174_28178[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
          var G__28179 = state;
          state = G__28179;
          continue;
        } else {
          if (cljs.core.truth_(function() {
            var and__3665__auto__ = exception;
            if (cljs.core.truth_(and__3665__auto__)) {
              var and__3665__auto____$1 = cljs.core.not.call(null, catch_block);
              if (and__3665__auto____$1) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__3665__auto____$1;
              }
            } else {
              return and__3665__auto__;
            }
          }())) {
            var statearr_28175 = state;
            statearr_28175[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
            statearr_28175[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
            return statearr_28175;
          } else {
            if (cljs.core.truth_(function() {
              var and__3665__auto__ = cljs.core.not.call(null, exception);
              if (and__3665__auto__) {
                return(new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              } else {
                return and__3665__auto__;
              }
            }())) {
              var statearr_28176 = state;
              statearr_28176[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame);
              statearr_28176[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = cljs.core.assoc.call(null, exception_frame, new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472), null);
              return statearr_28176;
            } else {
              if (cljs.core.not.call(null, exception) && cljs.core.not.call(null, (new cljs.core.Keyword(null, "finally-block", "finally-block", 832982472)).cljs$core$IFn$_invoke$arity$1(exception_frame))) {
                var statearr_28177 = state;
                statearr_28177[cljs.core.async.impl.ioc_helpers.STATE_IDX] = (new cljs.core.Keyword(null, "continue-block", "continue-block", -1852047850)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                statearr_28177[cljs.core.async.impl.ioc_helpers.EXCEPTION_FRAMES] = (new cljs.core.Keyword(null, "prev", "prev", -1597069226)).cljs$core$IFn$_invoke$arity$1(exception_frame);
                return statearr_28177;
              } else {
                throw new Error("No matching clause");
              }
            }
          }
        }
      }
    }
    break;
  }
};
goog.provide("cljs.core.async.impl.timers");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.protocols");
cljs.core.async.impl.timers.MAX_LEVEL = 15;
cljs.core.async.impl.timers.P = 1 / 2;
cljs.core.async.impl.timers.random_level = function() {
  var random_level = null;
  var random_level__0 = function() {
    return random_level.call(null, 0);
  };
  var random_level__1 = function(level) {
    while (true) {
      if (Math.random() < cljs.core.async.impl.timers.P && level < cljs.core.async.impl.timers.MAX_LEVEL) {
        var G__28114 = level + 1;
        level = G__28114;
        continue;
      } else {
        return level;
      }
      break;
    }
  };
  random_level = function(level) {
    switch(arguments.length) {
      case 0:
        return random_level__0.call(this);
      case 1:
        return random_level__1.call(this, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_level.cljs$core$IFn$_invoke$arity$0 = random_level__0;
  random_level.cljs$core$IFn$_invoke$arity$1 = random_level__1;
  return random_level;
}();
cljs.core.async.impl.timers.SkipListNode = function(key, val, forward) {
  this.key = key;
  this.val = val;
  this.forward = forward;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipListNode.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipListNode";
cljs.core.async.impl.timers.SkipListNode.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core.async.impl.timers/SkipListNode");
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipListNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.async.impl.timers.__GT_SkipListNode = function __GT_SkipListNode(key, val, forward) {
  return new cljs.core.async.impl.timers.SkipListNode(key, val, forward);
};
cljs.core.async.impl.timers.skip_list_node = function() {
  var skip_list_node = null;
  var skip_list_node__1 = function(level) {
    return skip_list_node.call(null, null, null, level);
  };
  var skip_list_node__3 = function(k, v, level) {
    var arr = new Array(level + 1);
    var i_28115 = 0;
    while (true) {
      if (i_28115 < arr.length) {
        arr[i_28115] = null;
        var G__28116 = i_28115 + 1;
        i_28115 = G__28116;
        continue;
      } else {
      }
      break;
    }
    return new cljs.core.async.impl.timers.SkipListNode(k, v, arr);
  };
  skip_list_node = function(k, v, level) {
    switch(arguments.length) {
      case 1:
        return skip_list_node__1.call(this, k);
      case 3:
        return skip_list_node__3.call(this, k, v, level);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  skip_list_node.cljs$core$IFn$_invoke$arity$1 = skip_list_node__1;
  skip_list_node.cljs$core$IFn$_invoke$arity$3 = skip_list_node__3;
  return skip_list_node;
}();
cljs.core.async.impl.timers.least_greater_node = function() {
  var least_greater_node = null;
  var least_greater_node__3 = function(x, k, level) {
    return least_greater_node.call(null, x, k, level, null);
  };
  var least_greater_node__4 = function(x, k, level, update) {
    while (true) {
      if (!(level < 0)) {
        var x__$1 = function() {
          var x__$1 = x;
          while (true) {
            var temp__4220__auto__ = x__$1.forward[level];
            if (cljs.core.truth_(temp__4220__auto__)) {
              var x_SINGLEQUOTE_ = temp__4220__auto__;
              if (x_SINGLEQUOTE_.key < k) {
                var G__28117 = x_SINGLEQUOTE_;
                x__$1 = G__28117;
                continue;
              } else {
                return x__$1;
              }
            } else {
              return x__$1;
            }
            break;
          }
        }();
        if (update == null) {
        } else {
          update[level] = x__$1;
        }
        var G__28118 = x__$1;
        var G__28119 = k;
        var G__28120 = level - 1;
        var G__28121 = update;
        x = G__28118;
        k = G__28119;
        level = G__28120;
        update = G__28121;
        continue;
      } else {
        return x;
      }
      break;
    }
  };
  least_greater_node = function(x, k, level, update) {
    switch(arguments.length) {
      case 3:
        return least_greater_node__3.call(this, x, k, level);
      case 4:
        return least_greater_node__4.call(this, x, k, level, update);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  least_greater_node.cljs$core$IFn$_invoke$arity$3 = least_greater_node__3;
  least_greater_node.cljs$core$IFn$_invoke$arity$4 = least_greater_node__4;
  return least_greater_node;
}();
cljs.core.async.impl.timers.SkipList = function(header, level) {
  this.header = header;
  this.level = level;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2155872256;
};
cljs.core.async.impl.timers.SkipList.cljs$lang$type = true;
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorStr = "cljs.core.async.impl.timers/SkipList";
cljs.core.async.impl.timers.SkipList.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
  return cljs.core._write.call(null, writer__4255__auto__, "cljs.core.async.impl.timers/SkipList");
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(coll__$1) {
    return function(keyval) {
      return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
    };
  }(coll__$1);
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "{", ", ", "}", opts, coll__$1);
};
cljs.core.async.impl.timers.SkipList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var iter = function(coll__$1) {
    return function iter(node) {
      return new cljs.core.LazySeq(null, function(coll__$1) {
        return function() {
          if (node == null) {
            return null;
          } else {
            return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node.key, node.val], null), iter.call(null, node.forward[0]));
          }
        };
      }(coll__$1), null, null);
    };
  }(coll__$1);
  return iter.call(null, self__.header.forward[0]);
};
cljs.core.async.impl.timers.SkipList.prototype.put = function(k, v) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    return x__$1.val = v;
  } else {
    var new_level = cljs.core.async.impl.timers.random_level.call(null);
    if (new_level > self__.level) {
      var i_28122 = self__.level + 1;
      while (true) {
        if (i_28122 <= new_level + 1) {
          update[i_28122] = self__.header;
          var G__28123 = i_28122 + 1;
          i_28122 = G__28123;
          continue;
        } else {
        }
        break;
      }
      self__.level = new_level;
    } else {
    }
    var x__$2 = cljs.core.async.impl.timers.skip_list_node.call(null, k, v, new Array(new_level));
    var i = 0;
    while (true) {
      if (i <= self__.level) {
        var links = update[i].forward;
        x__$2.forward[i] = links[i];
        return links[i] = x__$2;
      } else {
        return null;
      }
      break;
    }
  }
};
cljs.core.async.impl.timers.SkipList.prototype.remove = function(k) {
  var self__ = this;
  var coll = this;
  var update = new Array(cljs.core.async.impl.timers.MAX_LEVEL);
  var x = cljs.core.async.impl.timers.least_greater_node.call(null, self__.header, k, self__.level, update);
  var x__$1 = x.forward[0];
  if (!(x__$1 == null) && x__$1.key === k) {
    var i_28124 = 0;
    while (true) {
      if (i_28124 <= self__.level) {
        var links_28125 = update[i_28124].forward;
        if (links_28125[i_28124] === x__$1) {
          links_28125[i_28124] = x__$1.forward[i_28124];
          var G__28126 = i_28124 + 1;
          i_28124 = G__28126;
          continue;
        } else {
          var G__28127 = i_28124 + 1;
          i_28124 = G__28127;
          continue;
        }
      } else {
      }
      break;
    }
    while (true) {
      if (self__.level > 0 && self__.header.forward[self__.level] == null) {
        self__.level = self__.level - 1;
        continue;
      } else {
        return null;
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.ceilingEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (x_SINGLEQUOTE_ == null) {
            return null;
          } else {
            if (x_SINGLEQUOTE_.key >= k) {
              return x_SINGLEQUOTE_;
            } else {
              var G__28128 = x_SINGLEQUOTE_;
              x__$1 = G__28128;
              continue;
            }
          }
          break;
        }
      }();
      if (!(nx == null)) {
        var G__28129 = nx;
        var G__28130 = level__$1 - 1;
        x = G__28129;
        level__$1 = G__28130;
        continue;
      } else {
        var G__28131 = x;
        var G__28132 = level__$1 - 1;
        x = G__28131;
        level__$1 = G__28132;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.SkipList.prototype.floorEntry = function(k) {
  var self__ = this;
  var coll = this;
  var x = self__.header;
  var level__$1 = self__.level;
  while (true) {
    if (!(level__$1 < 0)) {
      var nx = function() {
        var x__$1 = x;
        while (true) {
          var x_SINGLEQUOTE_ = x__$1.forward[level__$1];
          if (!(x_SINGLEQUOTE_ == null)) {
            if (x_SINGLEQUOTE_.key > k) {
              return x__$1;
            } else {
              var G__28133 = x_SINGLEQUOTE_;
              x__$1 = G__28133;
              continue;
            }
          } else {
            if (level__$1 === 0) {
              return x__$1;
            } else {
              return null;
            }
          }
          break;
        }
      }();
      if (cljs.core.truth_(nx)) {
        var G__28134 = nx;
        var G__28135 = level__$1 - 1;
        x = G__28134;
        level__$1 = G__28135;
        continue;
      } else {
        var G__28136 = x;
        var G__28137 = level__$1 - 1;
        x = G__28136;
        level__$1 = G__28137;
        continue;
      }
    } else {
      if (x === self__.header) {
        return null;
      } else {
        return x;
      }
    }
    break;
  }
};
cljs.core.async.impl.timers.__GT_SkipList = function __GT_SkipList(header, level) {
  return new cljs.core.async.impl.timers.SkipList(header, level);
};
cljs.core.async.impl.timers.skip_list = function skip_list() {
  return new cljs.core.async.impl.timers.SkipList(cljs.core.async.impl.timers.skip_list_node.call(null, 0), 0);
};
cljs.core.async.impl.timers.timeouts_map = cljs.core.async.impl.timers.skip_list.call(null);
cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS = 10;
cljs.core.async.impl.timers.timeout = function timeout(msecs) {
  var timeout__$1 = (new Date).valueOf() + msecs;
  var me = cljs.core.async.impl.timers.timeouts_map.ceilingEntry(timeout__$1);
  var or__3677__auto__ = cljs.core.truth_(function() {
    var and__3665__auto__ = me;
    if (cljs.core.truth_(and__3665__auto__)) {
      return me.key < timeout__$1 + cljs.core.async.impl.timers.TIMEOUT_RESOLUTION_MS;
    } else {
      return and__3665__auto__;
    }
  }()) ? me.val : null;
  if (cljs.core.truth_(or__3677__auto__)) {
    return or__3677__auto__;
  } else {
    var timeout_channel = cljs.core.async.impl.channels.chan.call(null, null);
    cljs.core.async.impl.timers.timeouts_map.put(timeout__$1, timeout_channel);
    cljs.core.async.impl.dispatch.queue_delay.call(null, function(timeout_channel, or__3677__auto__, timeout__$1, me) {
      return function() {
        cljs.core.async.impl.timers.timeouts_map.remove(timeout__$1);
        return cljs.core.async.impl.protocols.close_BANG_.call(null, timeout_channel);
      };
    }(timeout_channel, or__3677__auto__, timeout__$1, me), msecs);
    return timeout_channel;
  }
};
goog.provide("cljs.core.async");
goog.require("cljs.core");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.channels");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.protocols");
goog.require("cljs.core.async.impl.timers");
goog.require("cljs.core.async.impl.dispatch");
goog.require("cljs.core.async.impl.ioc_helpers");
goog.require("cljs.core.async.impl.buffers");
goog.require("cljs.core.async.impl.timers");
cljs.core.async.fn_handler = function fn_handler(f) {
  if (typeof cljs.core.async.t25029 !== "undefined") {
  } else {
    cljs.core.async.t25029 = function(f, fn_handler, meta25030) {
      this.f = f;
      this.fn_handler = fn_handler;
      this.meta25030 = meta25030;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t25029.cljs$lang$type = true;
    cljs.core.async.t25029.cljs$lang$ctorStr = "cljs.core.async/t25029";
    cljs.core.async.t25029.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
      return cljs.core._write.call(null, writer__4255__auto__, "cljs.core.async/t25029");
    };
    cljs.core.async.t25029.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t25029.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return true;
    };
    cljs.core.async.t25029.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return self__.f;
    };
    cljs.core.async.t25029.prototype.cljs$core$IMeta$_meta$arity$1 = function(_25031) {
      var self__ = this;
      var _25031__$1 = this;
      return self__.meta25030;
    };
    cljs.core.async.t25029.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_25031, meta25030__$1) {
      var self__ = this;
      var _25031__$1 = this;
      return new cljs.core.async.t25029(self__.f, self__.fn_handler, meta25030__$1);
    };
    cljs.core.async.__GT_t25029 = function __GT_t25029(f__$1, fn_handler__$1, meta25030) {
      return new cljs.core.async.t25029(f__$1, fn_handler__$1, meta25030);
    };
  }
  return new cljs.core.async.t25029(f, fn_handler, null);
};
cljs.core.async.buffer = function buffer(n) {
  return cljs.core.async.impl.buffers.fixed_buffer.call(null, n);
};
cljs.core.async.dropping_buffer = function dropping_buffer(n) {
  return cljs.core.async.impl.buffers.dropping_buffer.call(null, n);
};
cljs.core.async.sliding_buffer = function sliding_buffer(n) {
  return cljs.core.async.impl.buffers.sliding_buffer.call(null, n);
};
cljs.core.async.unblocking_buffer_QMARK_ = function unblocking_buffer_QMARK_(buff) {
  var G__25033 = buff;
  if (G__25033) {
    var bit__4341__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3677__auto__ = bit__4341__auto__;
      if (cljs.core.truth_(or__3677__auto__)) {
        return or__3677__auto__;
      } else {
        return G__25033.cljs$core$async$impl$protocols$UnblockingBuffer$;
      }
    }())) {
      return true;
    } else {
      if (!G__25033.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__25033);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.UnblockingBuffer, G__25033);
  }
};
cljs.core.async.chan = function() {
  var chan = null;
  var chan__0 = function() {
    return chan.call(null, null);
  };
  var chan__1 = function(buf_or_n) {
    return chan.call(null, buf_or_n, null, null);
  };
  var chan__2 = function(buf_or_n, xform) {
    return chan.call(null, buf_or_n, xform, null);
  };
  var chan__3 = function(buf_or_n, xform, ex_handler) {
    var buf_or_n__$1 = cljs.core._EQ_.call(null, buf_or_n, 0) ? null : buf_or_n;
    if (cljs.core.truth_(xform)) {
      if (cljs.core.truth_(buf_or_n__$1)) {
      } else {
        throw new Error("Assert failed: buffer must be supplied when transducer is\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, new cljs.core.Symbol(null, "buf-or-n", "buf-or-n", -1646815050, null))));
      }
    } else {
    }
    return cljs.core.async.impl.channels.chan.call(null, typeof buf_or_n__$1 === "number" ? cljs.core.async.buffer.call(null, buf_or_n__$1) : buf_or_n__$1, xform, ex_handler);
  };
  chan = function(buf_or_n, xform, ex_handler) {
    switch(arguments.length) {
      case 0:
        return chan__0.call(this);
      case 1:
        return chan__1.call(this, buf_or_n);
      case 2:
        return chan__2.call(this, buf_or_n, xform);
      case 3:
        return chan__3.call(this, buf_or_n, xform, ex_handler);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chan.cljs$core$IFn$_invoke$arity$0 = chan__0;
  chan.cljs$core$IFn$_invoke$arity$1 = chan__1;
  chan.cljs$core$IFn$_invoke$arity$2 = chan__2;
  chan.cljs$core$IFn$_invoke$arity$3 = chan__3;
  return chan;
}();
cljs.core.async.timeout = function timeout(msecs) {
  return cljs.core.async.impl.timers.timeout.call(null, msecs);
};
cljs.core.async._LT__BANG_ = function _LT__BANG_(port) {
  throw new Error("\x3c! used not in (go ...) block");
};
cljs.core.async.take_BANG_ = function() {
  var take_BANG_ = null;
  var take_BANG___2 = function(port, fn1) {
    return take_BANG_.call(null, port, fn1, true);
  };
  var take_BANG___3 = function(port, fn1, on_caller_QMARK_) {
    var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(ret)) {
      var val_25034 = cljs.core.deref.call(null, ret);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, val_25034);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function(val_25034, ret) {
          return function() {
            return fn1.call(null, val_25034);
          };
        }(val_25034, ret));
      }
    } else {
    }
    return null;
  };
  take_BANG_ = function(port, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return take_BANG___2.call(this, port, fn1);
      case 3:
        return take_BANG___3.call(this, port, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_BANG_.cljs$core$IFn$_invoke$arity$2 = take_BANG___2;
  take_BANG_.cljs$core$IFn$_invoke$arity$3 = take_BANG___3;
  return take_BANG_;
}();
cljs.core.async.nop = function nop(_) {
  return null;
};
cljs.core.async.fhnop = cljs.core.async.fn_handler.call(null, cljs.core.async.nop);
cljs.core.async._GT__BANG_ = function _GT__BANG_(port, val) {
  throw new Error("\x3e! used not in (go ...) block");
};
cljs.core.async.put_BANG_ = function() {
  var put_BANG_ = null;
  var put_BANG___2 = function(port, val) {
    var temp__4220__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fhnop);
    if (cljs.core.truth_(temp__4220__auto__)) {
      var ret = temp__4220__auto__;
      return cljs.core.deref.call(null, ret);
    } else {
      return true;
    }
  };
  var put_BANG___3 = function(port, val, fn1) {
    return put_BANG_.call(null, port, val, fn1, true);
  };
  var put_BANG___4 = function(port, val, fn1, on_caller_QMARK_) {
    var temp__4220__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null, port, val, cljs.core.async.fn_handler.call(null, fn1));
    if (cljs.core.truth_(temp__4220__auto__)) {
      var retb = temp__4220__auto__;
      var ret = cljs.core.deref.call(null, retb);
      if (cljs.core.truth_(on_caller_QMARK_)) {
        fn1.call(null, ret);
      } else {
        cljs.core.async.impl.dispatch.run.call(null, function(ret, retb, temp__4220__auto__) {
          return function() {
            return fn1.call(null, ret);
          };
        }(ret, retb, temp__4220__auto__));
      }
      return ret;
    } else {
      return true;
    }
  };
  put_BANG_ = function(port, val, fn1, on_caller_QMARK_) {
    switch(arguments.length) {
      case 2:
        return put_BANG___2.call(this, port, val);
      case 3:
        return put_BANG___3.call(this, port, val, fn1);
      case 4:
        return put_BANG___4.call(this, port, val, fn1, on_caller_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  put_BANG_.cljs$core$IFn$_invoke$arity$2 = put_BANG___2;
  put_BANG_.cljs$core$IFn$_invoke$arity$3 = put_BANG___3;
  put_BANG_.cljs$core$IFn$_invoke$arity$4 = put_BANG___4;
  return put_BANG_;
}();
cljs.core.async.close_BANG_ = function close_BANG_(port) {
  return cljs.core.async.impl.protocols.close_BANG_.call(null, port);
};
cljs.core.async.random_array = function random_array(n) {
  var a = new Array(n);
  var n__4547__auto___25035 = n;
  var x_25036 = 0;
  while (true) {
    if (x_25036 < n__4547__auto___25035) {
      a[x_25036] = 0;
      var G__25037 = x_25036 + 1;
      x_25036 = G__25037;
      continue;
    } else {
    }
    break;
  }
  var i = 1;
  while (true) {
    if (cljs.core._EQ_.call(null, i, n)) {
      return a;
    } else {
      var j = cljs.core.rand_int.call(null, i);
      a[i] = a[j];
      a[j] = i;
      var G__25038 = i + 1;
      i = G__25038;
      continue;
    }
    break;
  }
};
cljs.core.async.alt_flag = function alt_flag() {
  var flag = cljs.core.atom.call(null, true);
  if (typeof cljs.core.async.t25042 !== "undefined") {
  } else {
    cljs.core.async.t25042 = function(flag, alt_flag, meta25043) {
      this.flag = flag;
      this.alt_flag = alt_flag;
      this.meta25043 = meta25043;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t25042.cljs$lang$type = true;
    cljs.core.async.t25042.cljs$lang$ctorStr = "cljs.core.async/t25042";
    cljs.core.async.t25042.cljs$lang$ctorPrWriter = function(flag) {
      return function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
        return cljs.core._write.call(null, writer__4255__auto__, "cljs.core.async/t25042");
      };
    }(flag);
    cljs.core.async.t25042.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t25042.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        return cljs.core.deref.call(null, self__.flag);
      };
    }(flag);
    cljs.core.async.t25042.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(flag) {
      return function(_) {
        var self__ = this;
        var ___$1 = this;
        cljs.core.reset_BANG_.call(null, self__.flag, null);
        return true;
      };
    }(flag);
    cljs.core.async.t25042.prototype.cljs$core$IMeta$_meta$arity$1 = function(flag) {
      return function(_25044) {
        var self__ = this;
        var _25044__$1 = this;
        return self__.meta25043;
      };
    }(flag);
    cljs.core.async.t25042.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(flag) {
      return function(_25044, meta25043__$1) {
        var self__ = this;
        var _25044__$1 = this;
        return new cljs.core.async.t25042(self__.flag, self__.alt_flag, meta25043__$1);
      };
    }(flag);
    cljs.core.async.__GT_t25042 = function(flag) {
      return function __GT_t25042(flag__$1, alt_flag__$1, meta25043) {
        return new cljs.core.async.t25042(flag__$1, alt_flag__$1, meta25043);
      };
    }(flag);
  }
  return new cljs.core.async.t25042(flag, alt_flag, null);
};
cljs.core.async.alt_handler = function alt_handler(flag, cb) {
  if (typeof cljs.core.async.t25048 !== "undefined") {
  } else {
    cljs.core.async.t25048 = function(cb, flag, alt_handler, meta25049) {
      this.cb = cb;
      this.flag = flag;
      this.alt_handler = alt_handler;
      this.meta25049 = meta25049;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t25048.cljs$lang$type = true;
    cljs.core.async.t25048.cljs$lang$ctorStr = "cljs.core.async/t25048";
    cljs.core.async.t25048.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
      return cljs.core._write.call(null, writer__4255__auto__, "cljs.core.async/t25048");
    };
    cljs.core.async.t25048.prototype.cljs$core$async$impl$protocols$Handler$ = true;
    cljs.core.async.t25048.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.flag);
    };
    cljs.core.async.t25048.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      cljs.core.async.impl.protocols.commit.call(null, self__.flag);
      return self__.cb;
    };
    cljs.core.async.t25048.prototype.cljs$core$IMeta$_meta$arity$1 = function(_25050) {
      var self__ = this;
      var _25050__$1 = this;
      return self__.meta25049;
    };
    cljs.core.async.t25048.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_25050, meta25049__$1) {
      var self__ = this;
      var _25050__$1 = this;
      return new cljs.core.async.t25048(self__.cb, self__.flag, self__.alt_handler, meta25049__$1);
    };
    cljs.core.async.__GT_t25048 = function __GT_t25048(cb__$1, flag__$1, alt_handler__$1, meta25049) {
      return new cljs.core.async.t25048(cb__$1, flag__$1, alt_handler__$1, meta25049);
    };
  }
  return new cljs.core.async.t25048(cb, flag, alt_handler, null);
};
cljs.core.async.do_alts = function do_alts(fret, ports, opts) {
  var flag = cljs.core.async.alt_flag.call(null);
  var n = cljs.core.count.call(null, ports);
  var idxs = cljs.core.async.random_array.call(null, n);
  var priority = (new cljs.core.Keyword(null, "priority", "priority", 1431093715)).cljs$core$IFn$_invoke$arity$1(opts);
  var ret = function() {
    var i = 0;
    while (true) {
      if (i < n) {
        var idx = cljs.core.truth_(priority) ? i : idxs[i];
        var port = cljs.core.nth.call(null, ports, idx);
        var wport = cljs.core.vector_QMARK_.call(null, port) ? port.call(null, 0) : null;
        var vbox = cljs.core.truth_(wport) ? function() {
          var val = port.call(null, 1);
          return cljs.core.async.impl.protocols.put_BANG_.call(null, wport, val, cljs.core.async.alt_handler.call(null, flag, function(i, val, idx, port, wport, flag, n, idxs, priority) {
            return function(p1__25051_SHARP_) {
              return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__25051_SHARP_, wport], null));
            };
          }(i, val, idx, port, wport, flag, n, idxs, priority)));
        }() : cljs.core.async.impl.protocols.take_BANG_.call(null, port, cljs.core.async.alt_handler.call(null, flag, function(i, idx, port, wport, flag, n, idxs, priority) {
          return function(p1__25052_SHARP_) {
            return fret.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__25052_SHARP_, port], null));
          };
        }(i, idx, port, wport, flag, n, idxs, priority)));
        if (cljs.core.truth_(vbox)) {
          return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null, vbox), function() {
            var or__3677__auto__ = wport;
            if (cljs.core.truth_(or__3677__auto__)) {
              return or__3677__auto__;
            } else {
              return port;
            }
          }()], null));
        } else {
          var G__25053 = i + 1;
          i = G__25053;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  }();
  var or__3677__auto__ = ret;
  if (cljs.core.truth_(or__3677__auto__)) {
    return or__3677__auto__;
  } else {
    if (cljs.core.contains_QMARK_.call(null, opts, new cljs.core.Keyword(null, "default", "default", -1987822328))) {
      var temp__4222__auto__ = function() {
        var and__3665__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null, flag);
        if (cljs.core.truth_(and__3665__auto__)) {
          return cljs.core.async.impl.protocols.commit.call(null, flag);
        } else {
          return and__3665__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4222__auto__)) {
        var got = temp__4222__auto__;
        return cljs.core.async.impl.channels.box.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.Keyword(null, "default", "default", -1987822328)).cljs$core$IFn$_invoke$arity$1(opts), new cljs.core.Keyword(null, "default", "default", -1987822328)], null));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
};
cljs.core.async.alts_BANG_ = function() {
  var alts_BANG___delegate = function(ports, p__25054) {
    var map__25056 = p__25054;
    var map__25056__$1 = cljs.core.seq_QMARK_.call(null, map__25056) ? cljs.core.apply.call(null, cljs.core.hash_map, map__25056) : map__25056;
    var opts = map__25056__$1;
    throw new Error("alts! used not in (go ...) block");
  };
  var alts_BANG_ = function(ports, var_args) {
    var p__25054 = null;
    if (arguments.length > 1) {
      p__25054 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return alts_BANG___delegate.call(this, ports, p__25054);
  };
  alts_BANG_.cljs$lang$maxFixedArity = 1;
  alts_BANG_.cljs$lang$applyTo = function(arglist__25057) {
    var ports = cljs.core.first(arglist__25057);
    var p__25054 = cljs.core.rest(arglist__25057);
    return alts_BANG___delegate(ports, p__25054);
  };
  alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = alts_BANG___delegate;
  return alts_BANG_;
}();
cljs.core.async.pipe = function() {
  var pipe = null;
  var pipe__2 = function(from, to) {
    return pipe.call(null, from, to, true);
  };
  var pipe__3 = function(from, to, close_QMARK_) {
    var c__5860__auto___25152 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto___25152) {
      return function() {
        var f__5861__auto__ = function() {
          var switch__5845__auto__ = function(c__5860__auto___25152) {
            return function(state_25128) {
              var state_val_25129 = state_25128[1];
              if (state_val_25129 === 7) {
                var inst_25124 = state_25128[2];
                var state_25128__$1 = state_25128;
                var statearr_25130_25153 = state_25128__$1;
                statearr_25130_25153[2] = inst_25124;
                statearr_25130_25153[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_25129 === 1) {
                  var state_25128__$1 = state_25128;
                  var statearr_25131_25154 = state_25128__$1;
                  statearr_25131_25154[2] = null;
                  statearr_25131_25154[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_25129 === 4) {
                    var inst_25107 = state_25128[7];
                    var inst_25107__$1 = state_25128[2];
                    var inst_25108 = inst_25107__$1 == null;
                    var state_25128__$1 = function() {
                      var statearr_25132 = state_25128;
                      statearr_25132[7] = inst_25107__$1;
                      return statearr_25132;
                    }();
                    if (cljs.core.truth_(inst_25108)) {
                      var statearr_25133_25155 = state_25128__$1;
                      statearr_25133_25155[1] = 5;
                    } else {
                      var statearr_25134_25156 = state_25128__$1;
                      statearr_25134_25156[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_25129 === 13) {
                      var state_25128__$1 = state_25128;
                      var statearr_25135_25157 = state_25128__$1;
                      statearr_25135_25157[2] = null;
                      statearr_25135_25157[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_25129 === 6) {
                        var inst_25107 = state_25128[7];
                        var state_25128__$1 = state_25128;
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_25128__$1, 11, to, inst_25107);
                      } else {
                        if (state_val_25129 === 3) {
                          var inst_25126 = state_25128[2];
                          var state_25128__$1 = state_25128;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_25128__$1, inst_25126);
                        } else {
                          if (state_val_25129 === 12) {
                            var state_25128__$1 = state_25128;
                            var statearr_25136_25158 = state_25128__$1;
                            statearr_25136_25158[2] = null;
                            statearr_25136_25158[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_25129 === 2) {
                              var state_25128__$1 = state_25128;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_25128__$1, 4, from);
                            } else {
                              if (state_val_25129 === 11) {
                                var inst_25117 = state_25128[2];
                                var state_25128__$1 = state_25128;
                                if (cljs.core.truth_(inst_25117)) {
                                  var statearr_25137_25159 = state_25128__$1;
                                  statearr_25137_25159[1] = 12;
                                } else {
                                  var statearr_25138_25160 = state_25128__$1;
                                  statearr_25138_25160[1] = 13;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_25129 === 9) {
                                  var state_25128__$1 = state_25128;
                                  var statearr_25139_25161 = state_25128__$1;
                                  statearr_25139_25161[2] = null;
                                  statearr_25139_25161[1] = 10;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_25129 === 5) {
                                    var state_25128__$1 = state_25128;
                                    if (cljs.core.truth_(close_QMARK_)) {
                                      var statearr_25140_25162 = state_25128__$1;
                                      statearr_25140_25162[1] = 8;
                                    } else {
                                      var statearr_25141_25163 = state_25128__$1;
                                      statearr_25141_25163[1] = 9;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_25129 === 14) {
                                      var inst_25122 = state_25128[2];
                                      var state_25128__$1 = state_25128;
                                      var statearr_25142_25164 = state_25128__$1;
                                      statearr_25142_25164[2] = inst_25122;
                                      statearr_25142_25164[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_25129 === 10) {
                                        var inst_25114 = state_25128[2];
                                        var state_25128__$1 = state_25128;
                                        var statearr_25143_25165 = state_25128__$1;
                                        statearr_25143_25165[2] = inst_25114;
                                        statearr_25143_25165[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_25129 === 8) {
                                          var inst_25111 = cljs.core.async.close_BANG_.call(null, to);
                                          var state_25128__$1 = state_25128;
                                          var statearr_25144_25166 = state_25128__$1;
                                          statearr_25144_25166[2] = inst_25111;
                                          statearr_25144_25166[1] = 10;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5860__auto___25152);
          return function(switch__5845__auto__, c__5860__auto___25152) {
            return function() {
              var state_machine__5846__auto__ = null;
              var state_machine__5846__auto____0 = function() {
                var statearr_25148 = [null, null, null, null, null, null, null, null];
                statearr_25148[0] = state_machine__5846__auto__;
                statearr_25148[1] = 1;
                return statearr_25148;
              };
              var state_machine__5846__auto____1 = function(state_25128) {
                while (true) {
                  var ret_value__5847__auto__ = function() {
                    try {
                      while (true) {
                        var result__5848__auto__ = switch__5845__auto__.call(null, state_25128);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__5848__auto__;
                        }
                        break;
                      }
                    } catch (e25149) {
                      if (e25149 instanceof Object) {
                        var ex__5849__auto__ = e25149;
                        var statearr_25150_25167 = state_25128;
                        statearr_25150_25167[5] = ex__5849__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_25128);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e25149;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__25168 = state_25128;
                    state_25128 = G__25168;
                    continue;
                  } else {
                    return ret_value__5847__auto__;
                  }
                  break;
                }
              };
              state_machine__5846__auto__ = function(state_25128) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5846__auto____0.call(this);
                  case 1:
                    return state_machine__5846__auto____1.call(this, state_25128);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
              return state_machine__5846__auto__;
            }();
          }(switch__5845__auto__, c__5860__auto___25152);
        }();
        var state__5862__auto__ = function() {
          var statearr_25151 = f__5861__auto__.call(null);
          statearr_25151[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___25152;
          return statearr_25151;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
      };
    }(c__5860__auto___25152));
    return to;
  };
  pipe = function(from, to, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return pipe__2.call(this, from, to);
      case 3:
        return pipe__3.call(this, from, to, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipe.cljs$core$IFn$_invoke$arity$2 = pipe__2;
  pipe.cljs$core$IFn$_invoke$arity$3 = pipe__3;
  return pipe;
}();
cljs.core.async.pipeline_STAR_ = function pipeline_STAR_(n, to, xf, from, close_QMARK_, ex_handler, type) {
  if (n > 0) {
  } else {
    throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "pos?", "pos?", -244377722, null), new cljs.core.Symbol(null, "n", "n", -2092305744, null)))));
  }
  var jobs = cljs.core.async.chan.call(null, n);
  var results = cljs.core.async.chan.call(null, n);
  var process = function(jobs, results) {
    return function(p__25352) {
      var vec__25353 = p__25352;
      var v = cljs.core.nth.call(null, vec__25353, 0, null);
      var p = cljs.core.nth.call(null, vec__25353, 1, null);
      var job = vec__25353;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1, xf, ex_handler);
        var c__5860__auto___25535 = cljs.core.async.chan.call(null, 1);
        cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto___25535, res, vec__25353, v, p, job, jobs, results) {
          return function() {
            var f__5861__auto__ = function() {
              var switch__5845__auto__ = function(c__5860__auto___25535, res, vec__25353, v, p, job, jobs, results) {
                return function(state_25358) {
                  var state_val_25359 = state_25358[1];
                  if (state_val_25359 === 2) {
                    var inst_25355 = state_25358[2];
                    var inst_25356 = cljs.core.async.close_BANG_.call(null, res);
                    var state_25358__$1 = function() {
                      var statearr_25360 = state_25358;
                      statearr_25360[7] = inst_25355;
                      return statearr_25360;
                    }();
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_25358__$1, inst_25356);
                  } else {
                    if (state_val_25359 === 1) {
                      var state_25358__$1 = state_25358;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_25358__$1, 2, res, v);
                    } else {
                      return null;
                    }
                  }
                };
              }(c__5860__auto___25535, res, vec__25353, v, p, job, jobs, results);
              return function(switch__5845__auto__, c__5860__auto___25535, res, vec__25353, v, p, job, jobs, results) {
                return function() {
                  var state_machine__5846__auto__ = null;
                  var state_machine__5846__auto____0 = function() {
                    var statearr_25364 = [null, null, null, null, null, null, null, null];
                    statearr_25364[0] = state_machine__5846__auto__;
                    statearr_25364[1] = 1;
                    return statearr_25364;
                  };
                  var state_machine__5846__auto____1 = function(state_25358) {
                    while (true) {
                      var ret_value__5847__auto__ = function() {
                        try {
                          while (true) {
                            var result__5848__auto__ = switch__5845__auto__.call(null, state_25358);
                            if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                              continue;
                            } else {
                              return result__5848__auto__;
                            }
                            break;
                          }
                        } catch (e25365) {
                          if (e25365 instanceof Object) {
                            var ex__5849__auto__ = e25365;
                            var statearr_25366_25536 = state_25358;
                            statearr_25366_25536[5] = ex__5849__auto__;
                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_25358);
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            throw e25365;
                          }
                        }
                      }();
                      if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        var G__25537 = state_25358;
                        state_25358 = G__25537;
                        continue;
                      } else {
                        return ret_value__5847__auto__;
                      }
                      break;
                    }
                  };
                  state_machine__5846__auto__ = function(state_25358) {
                    switch(arguments.length) {
                      case 0:
                        return state_machine__5846__auto____0.call(this);
                      case 1:
                        return state_machine__5846__auto____1.call(this, state_25358);
                    }
                    throw new Error("Invalid arity: " + arguments.length);
                  };
                  state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
                  state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
                  return state_machine__5846__auto__;
                }();
              }(switch__5845__auto__, c__5860__auto___25535, res, vec__25353, v, p, job, jobs, results);
            }();
            var state__5862__auto__ = function() {
              var statearr_25367 = f__5861__auto__.call(null);
              statearr_25367[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___25535;
              return statearr_25367;
            }();
            return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
          };
        }(c__5860__auto___25535, res, vec__25353, v, p, job, jobs, results));
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results);
  var async = function(jobs, results, process) {
    return function(p__25368) {
      var vec__25369 = p__25368;
      var v = cljs.core.nth.call(null, vec__25369, 0, null);
      var p = cljs.core.nth.call(null, vec__25369, 1, null);
      var job = vec__25369;
      if (job == null) {
        cljs.core.async.close_BANG_.call(null, results);
        return null;
      } else {
        var res = cljs.core.async.chan.call(null, 1);
        xf.call(null, v, res);
        cljs.core.async.put_BANG_.call(null, p, res);
        return true;
      }
    };
  }(jobs, results, process);
  var n__4547__auto___25538 = n;
  var __25539 = 0;
  while (true) {
    if (__25539 < n__4547__auto___25538) {
      var G__25370_25540 = type instanceof cljs.core.Keyword ? type.fqn : null;
      switch(G__25370_25540) {
        case "async":
          var c__5860__auto___25542 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__25539, c__5860__auto___25542, G__25370_25540, n__4547__auto___25538, jobs, results, process, async) {
            return function() {
              var f__5861__auto__ = function() {
                var switch__5845__auto__ = function(__25539, c__5860__auto___25542, G__25370_25540, n__4547__auto___25538, jobs, results, process, async) {
                  return function(state_25383) {
                    var state_val_25384 = state_25383[1];
                    if (state_val_25384 === 7) {
                      var inst_25379 = state_25383[2];
                      var state_25383__$1 = state_25383;
                      var statearr_25385_25543 = state_25383__$1;
                      statearr_25385_25543[2] = inst_25379;
                      statearr_25385_25543[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_25384 === 6) {
                        var state_25383__$1 = state_25383;
                        var statearr_25386_25544 = state_25383__$1;
                        statearr_25386_25544[2] = null;
                        statearr_25386_25544[1] = 7;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_25384 === 5) {
                          var state_25383__$1 = state_25383;
                          var statearr_25387_25545 = state_25383__$1;
                          statearr_25387_25545[2] = null;
                          statearr_25387_25545[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_25384 === 4) {
                            var inst_25373 = state_25383[2];
                            var inst_25374 = async.call(null, inst_25373);
                            var state_25383__$1 = state_25383;
                            if (cljs.core.truth_(inst_25374)) {
                              var statearr_25388_25546 = state_25383__$1;
                              statearr_25388_25546[1] = 5;
                            } else {
                              var statearr_25389_25547 = state_25383__$1;
                              statearr_25389_25547[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_25384 === 3) {
                              var inst_25381 = state_25383[2];
                              var state_25383__$1 = state_25383;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_25383__$1, inst_25381);
                            } else {
                              if (state_val_25384 === 2) {
                                var state_25383__$1 = state_25383;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_25383__$1, 4, jobs);
                              } else {
                                if (state_val_25384 === 1) {
                                  var state_25383__$1 = state_25383;
                                  var statearr_25390_25548 = state_25383__$1;
                                  statearr_25390_25548[2] = null;
                                  statearr_25390_25548[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__25539, c__5860__auto___25542, G__25370_25540, n__4547__auto___25538, jobs, results, process, async);
                return function(__25539, switch__5845__auto__, c__5860__auto___25542, G__25370_25540, n__4547__auto___25538, jobs, results, process, async) {
                  return function() {
                    var state_machine__5846__auto__ = null;
                    var state_machine__5846__auto____0 = function() {
                      var statearr_25394 = [null, null, null, null, null, null, null];
                      statearr_25394[0] = state_machine__5846__auto__;
                      statearr_25394[1] = 1;
                      return statearr_25394;
                    };
                    var state_machine__5846__auto____1 = function(state_25383) {
                      while (true) {
                        var ret_value__5847__auto__ = function() {
                          try {
                            while (true) {
                              var result__5848__auto__ = switch__5845__auto__.call(null, state_25383);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__5848__auto__;
                              }
                              break;
                            }
                          } catch (e25395) {
                            if (e25395 instanceof Object) {
                              var ex__5849__auto__ = e25395;
                              var statearr_25396_25549 = state_25383;
                              statearr_25396_25549[5] = ex__5849__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_25383);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e25395;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__25550 = state_25383;
                          state_25383 = G__25550;
                          continue;
                        } else {
                          return ret_value__5847__auto__;
                        }
                        break;
                      }
                    };
                    state_machine__5846__auto__ = function(state_25383) {
                      switch(arguments.length) {
                        case 0:
                          return state_machine__5846__auto____0.call(this);
                        case 1:
                          return state_machine__5846__auto____1.call(this, state_25383);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
                    state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
                    return state_machine__5846__auto__;
                  }();
                }(__25539, switch__5845__auto__, c__5860__auto___25542, G__25370_25540, n__4547__auto___25538, jobs, results, process, async);
              }();
              var state__5862__auto__ = function() {
                var statearr_25397 = f__5861__auto__.call(null);
                statearr_25397[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___25542;
                return statearr_25397;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
            };
          }(__25539, c__5860__auto___25542, G__25370_25540, n__4547__auto___25538, jobs, results, process, async));
          break;
        case "compute":
          var c__5860__auto___25551 = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(__25539, c__5860__auto___25551, G__25370_25540, n__4547__auto___25538, jobs, results, process, async) {
            return function() {
              var f__5861__auto__ = function() {
                var switch__5845__auto__ = function(__25539, c__5860__auto___25551, G__25370_25540, n__4547__auto___25538, jobs, results, process, async) {
                  return function(state_25410) {
                    var state_val_25411 = state_25410[1];
                    if (state_val_25411 === 7) {
                      var inst_25406 = state_25410[2];
                      var state_25410__$1 = state_25410;
                      var statearr_25412_25552 = state_25410__$1;
                      statearr_25412_25552[2] = inst_25406;
                      statearr_25412_25552[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_25411 === 6) {
                        var state_25410__$1 = state_25410;
                        var statearr_25413_25553 = state_25410__$1;
                        statearr_25413_25553[2] = null;
                        statearr_25413_25553[1] = 7;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_25411 === 5) {
                          var state_25410__$1 = state_25410;
                          var statearr_25414_25554 = state_25410__$1;
                          statearr_25414_25554[2] = null;
                          statearr_25414_25554[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_25411 === 4) {
                            var inst_25400 = state_25410[2];
                            var inst_25401 = process.call(null, inst_25400);
                            var state_25410__$1 = state_25410;
                            if (cljs.core.truth_(inst_25401)) {
                              var statearr_25415_25555 = state_25410__$1;
                              statearr_25415_25555[1] = 5;
                            } else {
                              var statearr_25416_25556 = state_25410__$1;
                              statearr_25416_25556[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_25411 === 3) {
                              var inst_25408 = state_25410[2];
                              var state_25410__$1 = state_25410;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_25410__$1, inst_25408);
                            } else {
                              if (state_val_25411 === 2) {
                                var state_25410__$1 = state_25410;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_25410__$1, 4, jobs);
                              } else {
                                if (state_val_25411 === 1) {
                                  var state_25410__$1 = state_25410;
                                  var statearr_25417_25557 = state_25410__$1;
                                  statearr_25417_25557[2] = null;
                                  statearr_25417_25557[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  };
                }(__25539, c__5860__auto___25551, G__25370_25540, n__4547__auto___25538, jobs, results, process, async);
                return function(__25539, switch__5845__auto__, c__5860__auto___25551, G__25370_25540, n__4547__auto___25538, jobs, results, process, async) {
                  return function() {
                    var state_machine__5846__auto__ = null;
                    var state_machine__5846__auto____0 = function() {
                      var statearr_25421 = [null, null, null, null, null, null, null];
                      statearr_25421[0] = state_machine__5846__auto__;
                      statearr_25421[1] = 1;
                      return statearr_25421;
                    };
                    var state_machine__5846__auto____1 = function(state_25410) {
                      while (true) {
                        var ret_value__5847__auto__ = function() {
                          try {
                            while (true) {
                              var result__5848__auto__ = switch__5845__auto__.call(null, state_25410);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__5848__auto__;
                              }
                              break;
                            }
                          } catch (e25422) {
                            if (e25422 instanceof Object) {
                              var ex__5849__auto__ = e25422;
                              var statearr_25423_25558 = state_25410;
                              statearr_25423_25558[5] = ex__5849__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_25410);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e25422;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__25559 = state_25410;
                          state_25410 = G__25559;
                          continue;
                        } else {
                          return ret_value__5847__auto__;
                        }
                        break;
                      }
                    };
                    state_machine__5846__auto__ = function(state_25410) {
                      switch(arguments.length) {
                        case 0:
                          return state_machine__5846__auto____0.call(this);
                        case 1:
                          return state_machine__5846__auto____1.call(this, state_25410);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
                    state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
                    return state_machine__5846__auto__;
                  }();
                }(__25539, switch__5845__auto__, c__5860__auto___25551, G__25370_25540, n__4547__auto___25538, jobs, results, process, async);
              }();
              var state__5862__auto__ = function() {
                var statearr_25424 = f__5861__auto__.call(null);
                statearr_25424[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___25551;
                return statearr_25424;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
            };
          }(__25539, c__5860__auto___25551, G__25370_25540, n__4547__auto___25538, jobs, results, process, async));
          break;
        default:
          throw new Error("No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(type));;
      }
      var G__25560 = __25539 + 1;
      __25539 = G__25560;
      continue;
    } else {
    }
    break;
  }
  var c__5860__auto___25561 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto___25561, jobs, results, process, async) {
    return function() {
      var f__5861__auto__ = function() {
        var switch__5845__auto__ = function(c__5860__auto___25561, jobs, results, process, async) {
          return function(state_25446) {
            var state_val_25447 = state_25446[1];
            if (state_val_25447 === 9) {
              var inst_25439 = state_25446[2];
              var state_25446__$1 = function() {
                var statearr_25448 = state_25446;
                statearr_25448[7] = inst_25439;
                return statearr_25448;
              }();
              var statearr_25449_25562 = state_25446__$1;
              statearr_25449_25562[2] = null;
              statearr_25449_25562[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_25447 === 8) {
                var inst_25432 = state_25446[8];
                var inst_25437 = state_25446[2];
                var state_25446__$1 = function() {
                  var statearr_25450 = state_25446;
                  statearr_25450[9] = inst_25437;
                  return statearr_25450;
                }();
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_25446__$1, 9, results, inst_25432);
              } else {
                if (state_val_25447 === 7) {
                  var inst_25442 = state_25446[2];
                  var state_25446__$1 = state_25446;
                  var statearr_25451_25563 = state_25446__$1;
                  statearr_25451_25563[2] = inst_25442;
                  statearr_25451_25563[1] = 3;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_25447 === 6) {
                    var inst_25432 = state_25446[8];
                    var inst_25427 = state_25446[10];
                    var inst_25432__$1 = cljs.core.async.chan.call(null, 1);
                    var inst_25433 = cljs.core.PersistentVector.EMPTY_NODE;
                    var inst_25434 = [inst_25427, inst_25432__$1];
                    var inst_25435 = new cljs.core.PersistentVector(null, 2, 5, inst_25433, inst_25434, null);
                    var state_25446__$1 = function() {
                      var statearr_25452 = state_25446;
                      statearr_25452[8] = inst_25432__$1;
                      return statearr_25452;
                    }();
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_25446__$1, 8, jobs, inst_25435);
                  } else {
                    if (state_val_25447 === 5) {
                      var inst_25430 = cljs.core.async.close_BANG_.call(null, jobs);
                      var state_25446__$1 = state_25446;
                      var statearr_25453_25564 = state_25446__$1;
                      statearr_25453_25564[2] = inst_25430;
                      statearr_25453_25564[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_25447 === 4) {
                        var inst_25427 = state_25446[10];
                        var inst_25427__$1 = state_25446[2];
                        var inst_25428 = inst_25427__$1 == null;
                        var state_25446__$1 = function() {
                          var statearr_25454 = state_25446;
                          statearr_25454[10] = inst_25427__$1;
                          return statearr_25454;
                        }();
                        if (cljs.core.truth_(inst_25428)) {
                          var statearr_25455_25565 = state_25446__$1;
                          statearr_25455_25565[1] = 5;
                        } else {
                          var statearr_25456_25566 = state_25446__$1;
                          statearr_25456_25566[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_25447 === 3) {
                          var inst_25444 = state_25446[2];
                          var state_25446__$1 = state_25446;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_25446__$1, inst_25444);
                        } else {
                          if (state_val_25447 === 2) {
                            var state_25446__$1 = state_25446;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_25446__$1, 4, from);
                          } else {
                            if (state_val_25447 === 1) {
                              var state_25446__$1 = state_25446;
                              var statearr_25457_25567 = state_25446__$1;
                              statearr_25457_25567[2] = null;
                              statearr_25457_25567[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5860__auto___25561, jobs, results, process, async);
        return function(switch__5845__auto__, c__5860__auto___25561, jobs, results, process, async) {
          return function() {
            var state_machine__5846__auto__ = null;
            var state_machine__5846__auto____0 = function() {
              var statearr_25461 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_25461[0] = state_machine__5846__auto__;
              statearr_25461[1] = 1;
              return statearr_25461;
            };
            var state_machine__5846__auto____1 = function(state_25446) {
              while (true) {
                var ret_value__5847__auto__ = function() {
                  try {
                    while (true) {
                      var result__5848__auto__ = switch__5845__auto__.call(null, state_25446);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__5848__auto__;
                      }
                      break;
                    }
                  } catch (e25462) {
                    if (e25462 instanceof Object) {
                      var ex__5849__auto__ = e25462;
                      var statearr_25463_25568 = state_25446;
                      statearr_25463_25568[5] = ex__5849__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_25446);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e25462;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__25569 = state_25446;
                  state_25446 = G__25569;
                  continue;
                } else {
                  return ret_value__5847__auto__;
                }
                break;
              }
            };
            state_machine__5846__auto__ = function(state_25446) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5846__auto____0.call(this);
                case 1:
                  return state_machine__5846__auto____1.call(this, state_25446);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
            return state_machine__5846__auto__;
          }();
        }(switch__5845__auto__, c__5860__auto___25561, jobs, results, process, async);
      }();
      var state__5862__auto__ = function() {
        var statearr_25464 = f__5861__auto__.call(null);
        statearr_25464[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___25561;
        return statearr_25464;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
    };
  }(c__5860__auto___25561, jobs, results, process, async));
  var c__5860__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto__, jobs, results, process, async) {
    return function() {
      var f__5861__auto__ = function() {
        var switch__5845__auto__ = function(c__5860__auto__, jobs, results, process, async) {
          return function(state_25502) {
            var state_val_25503 = state_25502[1];
            if (state_val_25503 === 7) {
              var inst_25498 = state_25502[2];
              var state_25502__$1 = state_25502;
              var statearr_25504_25570 = state_25502__$1;
              statearr_25504_25570[2] = inst_25498;
              statearr_25504_25570[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_25503 === 20) {
                var state_25502__$1 = state_25502;
                var statearr_25505_25571 = state_25502__$1;
                statearr_25505_25571[2] = null;
                statearr_25505_25571[1] = 21;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_25503 === 1) {
                  var state_25502__$1 = state_25502;
                  var statearr_25506_25572 = state_25502__$1;
                  statearr_25506_25572[2] = null;
                  statearr_25506_25572[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_25503 === 4) {
                    var inst_25467 = state_25502[7];
                    var inst_25467__$1 = state_25502[2];
                    var inst_25468 = inst_25467__$1 == null;
                    var state_25502__$1 = function() {
                      var statearr_25507 = state_25502;
                      statearr_25507[7] = inst_25467__$1;
                      return statearr_25507;
                    }();
                    if (cljs.core.truth_(inst_25468)) {
                      var statearr_25508_25573 = state_25502__$1;
                      statearr_25508_25573[1] = 5;
                    } else {
                      var statearr_25509_25574 = state_25502__$1;
                      statearr_25509_25574[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_25503 === 15) {
                      var inst_25480 = state_25502[8];
                      var state_25502__$1 = state_25502;
                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_25502__$1, 18, to, inst_25480);
                    } else {
                      if (state_val_25503 === 21) {
                        var inst_25493 = state_25502[2];
                        var state_25502__$1 = state_25502;
                        var statearr_25510_25575 = state_25502__$1;
                        statearr_25510_25575[2] = inst_25493;
                        statearr_25510_25575[1] = 13;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_25503 === 13) {
                          var inst_25495 = state_25502[2];
                          var state_25502__$1 = function() {
                            var statearr_25511 = state_25502;
                            statearr_25511[9] = inst_25495;
                            return statearr_25511;
                          }();
                          var statearr_25512_25576 = state_25502__$1;
                          statearr_25512_25576[2] = null;
                          statearr_25512_25576[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_25503 === 6) {
                            var inst_25467 = state_25502[7];
                            var state_25502__$1 = state_25502;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_25502__$1, 11, inst_25467);
                          } else {
                            if (state_val_25503 === 17) {
                              var inst_25488 = state_25502[2];
                              var state_25502__$1 = state_25502;
                              if (cljs.core.truth_(inst_25488)) {
                                var statearr_25513_25577 = state_25502__$1;
                                statearr_25513_25577[1] = 19;
                              } else {
                                var statearr_25514_25578 = state_25502__$1;
                                statearr_25514_25578[1] = 20;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_25503 === 3) {
                                var inst_25500 = state_25502[2];
                                var state_25502__$1 = state_25502;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_25502__$1, inst_25500);
                              } else {
                                if (state_val_25503 === 12) {
                                  var inst_25477 = state_25502[10];
                                  var state_25502__$1 = state_25502;
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_25502__$1, 14, inst_25477);
                                } else {
                                  if (state_val_25503 === 2) {
                                    var state_25502__$1 = state_25502;
                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_25502__$1, 4, results);
                                  } else {
                                    if (state_val_25503 === 19) {
                                      var state_25502__$1 = state_25502;
                                      var statearr_25515_25579 = state_25502__$1;
                                      statearr_25515_25579[2] = null;
                                      statearr_25515_25579[1] = 12;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_25503 === 11) {
                                        var inst_25477 = state_25502[2];
                                        var state_25502__$1 = function() {
                                          var statearr_25516 = state_25502;
                                          statearr_25516[10] = inst_25477;
                                          return statearr_25516;
                                        }();
                                        var statearr_25517_25580 = state_25502__$1;
                                        statearr_25517_25580[2] = null;
                                        statearr_25517_25580[1] = 12;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_25503 === 9) {
                                          var state_25502__$1 = state_25502;
                                          var statearr_25518_25581 = state_25502__$1;
                                          statearr_25518_25581[2] = null;
                                          statearr_25518_25581[1] = 10;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_25503 === 5) {
                                            var state_25502__$1 = state_25502;
                                            if (cljs.core.truth_(close_QMARK_)) {
                                              var statearr_25519_25582 = state_25502__$1;
                                              statearr_25519_25582[1] = 8;
                                            } else {
                                              var statearr_25520_25583 = state_25502__$1;
                                              statearr_25520_25583[1] = 9;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_25503 === 14) {
                                              var inst_25482 = state_25502[11];
                                              var inst_25480 = state_25502[8];
                                              var inst_25480__$1 = state_25502[2];
                                              var inst_25481 = inst_25480__$1 == null;
                                              var inst_25482__$1 = cljs.core.not.call(null, inst_25481);
                                              var state_25502__$1 = function() {
                                                var statearr_25521 = state_25502;
                                                statearr_25521[11] = inst_25482__$1;
                                                statearr_25521[8] = inst_25480__$1;
                                                return statearr_25521;
                                              }();
                                              if (inst_25482__$1) {
                                                var statearr_25522_25584 = state_25502__$1;
                                                statearr_25522_25584[1] = 15;
                                              } else {
                                                var statearr_25523_25585 = state_25502__$1;
                                                statearr_25523_25585[1] = 16;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_25503 === 16) {
                                                var inst_25482 = state_25502[11];
                                                var state_25502__$1 = state_25502;
                                                var statearr_25524_25586 = state_25502__$1;
                                                statearr_25524_25586[2] = inst_25482;
                                                statearr_25524_25586[1] = 17;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_25503 === 10) {
                                                  var inst_25474 = state_25502[2];
                                                  var state_25502__$1 = state_25502;
                                                  var statearr_25525_25587 = state_25502__$1;
                                                  statearr_25525_25587[2] = inst_25474;
                                                  statearr_25525_25587[1] = 7;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_25503 === 18) {
                                                    var inst_25485 = state_25502[2];
                                                    var state_25502__$1 = state_25502;
                                                    var statearr_25526_25588 = state_25502__$1;
                                                    statearr_25526_25588[2] = inst_25485;
                                                    statearr_25526_25588[1] = 17;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_25503 === 8) {
                                                      var inst_25471 = cljs.core.async.close_BANG_.call(null, to);
                                                      var state_25502__$1 = state_25502;
                                                      var statearr_25527_25589 = state_25502__$1;
                                                      statearr_25527_25589[2] = inst_25471;
                                                      statearr_25527_25589[1] = 10;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5860__auto__, jobs, results, process, async);
        return function(switch__5845__auto__, c__5860__auto__, jobs, results, process, async) {
          return function() {
            var state_machine__5846__auto__ = null;
            var state_machine__5846__auto____0 = function() {
              var statearr_25531 = [null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_25531[0] = state_machine__5846__auto__;
              statearr_25531[1] = 1;
              return statearr_25531;
            };
            var state_machine__5846__auto____1 = function(state_25502) {
              while (true) {
                var ret_value__5847__auto__ = function() {
                  try {
                    while (true) {
                      var result__5848__auto__ = switch__5845__auto__.call(null, state_25502);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__5848__auto__;
                      }
                      break;
                    }
                  } catch (e25532) {
                    if (e25532 instanceof Object) {
                      var ex__5849__auto__ = e25532;
                      var statearr_25533_25590 = state_25502;
                      statearr_25533_25590[5] = ex__5849__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_25502);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e25532;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__25591 = state_25502;
                  state_25502 = G__25591;
                  continue;
                } else {
                  return ret_value__5847__auto__;
                }
                break;
              }
            };
            state_machine__5846__auto__ = function(state_25502) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5846__auto____0.call(this);
                case 1:
                  return state_machine__5846__auto____1.call(this, state_25502);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
            return state_machine__5846__auto__;
          }();
        }(switch__5845__auto__, c__5860__auto__, jobs, results, process, async);
      }();
      var state__5862__auto__ = function() {
        var statearr_25534 = f__5861__auto__.call(null);
        statearr_25534[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto__;
        return statearr_25534;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
    };
  }(c__5860__auto__, jobs, results, process, async));
  return c__5860__auto__;
};
cljs.core.async.pipeline_async = function() {
  var pipeline_async = null;
  var pipeline_async__4 = function(n, to, af, from) {
    return pipeline_async.call(null, n, to, af, from, true);
  };
  var pipeline_async__5 = function(n, to, af, from, close_QMARK_) {
    return cljs.core.async.pipeline_STAR_.call(null, n, to, af, from, close_QMARK_, null, new cljs.core.Keyword(null, "async", "async", 1050769601));
  };
  pipeline_async = function(n, to, af, from, close_QMARK_) {
    switch(arguments.length) {
      case 4:
        return pipeline_async__4.call(this, n, to, af, from);
      case 5:
        return pipeline_async__5.call(this, n, to, af, from, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipeline_async.cljs$core$IFn$_invoke$arity$4 = pipeline_async__4;
  pipeline_async.cljs$core$IFn$_invoke$arity$5 = pipeline_async__5;
  return pipeline_async;
}();
cljs.core.async.pipeline = function() {
  var pipeline = null;
  var pipeline__4 = function(n, to, xf, from) {
    return pipeline.call(null, n, to, xf, from, true);
  };
  var pipeline__5 = function(n, to, xf, from, close_QMARK_) {
    return pipeline.call(null, n, to, xf, from, close_QMARK_, null);
  };
  var pipeline__6 = function(n, to, xf, from, close_QMARK_, ex_handler) {
    return cljs.core.async.pipeline_STAR_.call(null, n, to, xf, from, close_QMARK_, ex_handler, new cljs.core.Keyword(null, "compute", "compute", 1555393130));
  };
  pipeline = function(n, to, xf, from, close_QMARK_, ex_handler) {
    switch(arguments.length) {
      case 4:
        return pipeline__4.call(this, n, to, xf, from);
      case 5:
        return pipeline__5.call(this, n, to, xf, from, close_QMARK_);
      case 6:
        return pipeline__6.call(this, n, to, xf, from, close_QMARK_, ex_handler);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pipeline.cljs$core$IFn$_invoke$arity$4 = pipeline__4;
  pipeline.cljs$core$IFn$_invoke$arity$5 = pipeline__5;
  pipeline.cljs$core$IFn$_invoke$arity$6 = pipeline__6;
  return pipeline;
}();
cljs.core.async.split = function() {
  var split = null;
  var split__2 = function(p, ch) {
    return split.call(null, p, ch, null, null);
  };
  var split__4 = function(p, ch, t_buf_or_n, f_buf_or_n) {
    var tc = cljs.core.async.chan.call(null, t_buf_or_n);
    var fc = cljs.core.async.chan.call(null, f_buf_or_n);
    var c__5860__auto___25692 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto___25692, tc, fc) {
      return function() {
        var f__5861__auto__ = function() {
          var switch__5845__auto__ = function(c__5860__auto___25692, tc, fc) {
            return function(state_25667) {
              var state_val_25668 = state_25667[1];
              if (state_val_25668 === 7) {
                var inst_25663 = state_25667[2];
                var state_25667__$1 = state_25667;
                var statearr_25669_25693 = state_25667__$1;
                statearr_25669_25693[2] = inst_25663;
                statearr_25669_25693[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_25668 === 1) {
                  var state_25667__$1 = state_25667;
                  var statearr_25670_25694 = state_25667__$1;
                  statearr_25670_25694[2] = null;
                  statearr_25670_25694[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_25668 === 4) {
                    var inst_25644 = state_25667[7];
                    var inst_25644__$1 = state_25667[2];
                    var inst_25645 = inst_25644__$1 == null;
                    var state_25667__$1 = function() {
                      var statearr_25671 = state_25667;
                      statearr_25671[7] = inst_25644__$1;
                      return statearr_25671;
                    }();
                    if (cljs.core.truth_(inst_25645)) {
                      var statearr_25672_25695 = state_25667__$1;
                      statearr_25672_25695[1] = 5;
                    } else {
                      var statearr_25673_25696 = state_25667__$1;
                      statearr_25673_25696[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_25668 === 13) {
                      var state_25667__$1 = state_25667;
                      var statearr_25674_25697 = state_25667__$1;
                      statearr_25674_25697[2] = null;
                      statearr_25674_25697[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_25668 === 6) {
                        var inst_25644 = state_25667[7];
                        var inst_25650 = p.call(null, inst_25644);
                        var state_25667__$1 = state_25667;
                        if (cljs.core.truth_(inst_25650)) {
                          var statearr_25675_25698 = state_25667__$1;
                          statearr_25675_25698[1] = 9;
                        } else {
                          var statearr_25676_25699 = state_25667__$1;
                          statearr_25676_25699[1] = 10;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_25668 === 3) {
                          var inst_25665 = state_25667[2];
                          var state_25667__$1 = state_25667;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_25667__$1, inst_25665);
                        } else {
                          if (state_val_25668 === 12) {
                            var state_25667__$1 = state_25667;
                            var statearr_25677_25700 = state_25667__$1;
                            statearr_25677_25700[2] = null;
                            statearr_25677_25700[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_25668 === 2) {
                              var state_25667__$1 = state_25667;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_25667__$1, 4, ch);
                            } else {
                              if (state_val_25668 === 11) {
                                var inst_25644 = state_25667[7];
                                var inst_25654 = state_25667[2];
                                var state_25667__$1 = state_25667;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_25667__$1, 8, inst_25654, inst_25644);
                              } else {
                                if (state_val_25668 === 9) {
                                  var state_25667__$1 = state_25667;
                                  var statearr_25678_25701 = state_25667__$1;
                                  statearr_25678_25701[2] = tc;
                                  statearr_25678_25701[1] = 11;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_25668 === 5) {
                                    var inst_25647 = cljs.core.async.close_BANG_.call(null, tc);
                                    var inst_25648 = cljs.core.async.close_BANG_.call(null, fc);
                                    var state_25667__$1 = function() {
                                      var statearr_25679 = state_25667;
                                      statearr_25679[8] = inst_25647;
                                      return statearr_25679;
                                    }();
                                    var statearr_25680_25702 = state_25667__$1;
                                    statearr_25680_25702[2] = inst_25648;
                                    statearr_25680_25702[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_25668 === 14) {
                                      var inst_25661 = state_25667[2];
                                      var state_25667__$1 = state_25667;
                                      var statearr_25681_25703 = state_25667__$1;
                                      statearr_25681_25703[2] = inst_25661;
                                      statearr_25681_25703[1] = 7;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_25668 === 10) {
                                        var state_25667__$1 = state_25667;
                                        var statearr_25682_25704 = state_25667__$1;
                                        statearr_25682_25704[2] = fc;
                                        statearr_25682_25704[1] = 11;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_25668 === 8) {
                                          var inst_25656 = state_25667[2];
                                          var state_25667__$1 = state_25667;
                                          if (cljs.core.truth_(inst_25656)) {
                                            var statearr_25683_25705 = state_25667__$1;
                                            statearr_25683_25705[1] = 12;
                                          } else {
                                            var statearr_25684_25706 = state_25667__$1;
                                            statearr_25684_25706[1] = 13;
                                          }
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          return null;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5860__auto___25692, tc, fc);
          return function(switch__5845__auto__, c__5860__auto___25692, tc, fc) {
            return function() {
              var state_machine__5846__auto__ = null;
              var state_machine__5846__auto____0 = function() {
                var statearr_25688 = [null, null, null, null, null, null, null, null, null];
                statearr_25688[0] = state_machine__5846__auto__;
                statearr_25688[1] = 1;
                return statearr_25688;
              };
              var state_machine__5846__auto____1 = function(state_25667) {
                while (true) {
                  var ret_value__5847__auto__ = function() {
                    try {
                      while (true) {
                        var result__5848__auto__ = switch__5845__auto__.call(null, state_25667);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__5848__auto__;
                        }
                        break;
                      }
                    } catch (e25689) {
                      if (e25689 instanceof Object) {
                        var ex__5849__auto__ = e25689;
                        var statearr_25690_25707 = state_25667;
                        statearr_25690_25707[5] = ex__5849__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_25667);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e25689;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__25708 = state_25667;
                    state_25667 = G__25708;
                    continue;
                  } else {
                    return ret_value__5847__auto__;
                  }
                  break;
                }
              };
              state_machine__5846__auto__ = function(state_25667) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5846__auto____0.call(this);
                  case 1:
                    return state_machine__5846__auto____1.call(this, state_25667);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
              return state_machine__5846__auto__;
            }();
          }(switch__5845__auto__, c__5860__auto___25692, tc, fc);
        }();
        var state__5862__auto__ = function() {
          var statearr_25691 = f__5861__auto__.call(null);
          statearr_25691[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___25692;
          return statearr_25691;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
      };
    }(c__5860__auto___25692, tc, fc));
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc, fc], null);
  };
  split = function(p, ch, t_buf_or_n, f_buf_or_n) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, p, ch);
      case 4:
        return split__4.call(this, p, ch, t_buf_or_n, f_buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$4 = split__4;
  return split;
}();
cljs.core.async.reduce = function reduce(f, init, ch) {
  var c__5860__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto__) {
    return function() {
      var f__5861__auto__ = function() {
        var switch__5845__auto__ = function(c__5860__auto__) {
          return function(state_25755) {
            var state_val_25756 = state_25755[1];
            if (state_val_25756 === 7) {
              var inst_25751 = state_25755[2];
              var state_25755__$1 = state_25755;
              var statearr_25757_25773 = state_25755__$1;
              statearr_25757_25773[2] = inst_25751;
              statearr_25757_25773[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_25756 === 6) {
                var inst_25744 = state_25755[7];
                var inst_25741 = state_25755[8];
                var inst_25748 = f.call(null, inst_25741, inst_25744);
                var inst_25741__$1 = inst_25748;
                var state_25755__$1 = function() {
                  var statearr_25758 = state_25755;
                  statearr_25758[8] = inst_25741__$1;
                  return statearr_25758;
                }();
                var statearr_25759_25774 = state_25755__$1;
                statearr_25759_25774[2] = null;
                statearr_25759_25774[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_25756 === 5) {
                  var inst_25741 = state_25755[8];
                  var state_25755__$1 = state_25755;
                  var statearr_25760_25775 = state_25755__$1;
                  statearr_25760_25775[2] = inst_25741;
                  statearr_25760_25775[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_25756 === 4) {
                    var inst_25744 = state_25755[7];
                    var inst_25744__$1 = state_25755[2];
                    var inst_25745 = inst_25744__$1 == null;
                    var state_25755__$1 = function() {
                      var statearr_25761 = state_25755;
                      statearr_25761[7] = inst_25744__$1;
                      return statearr_25761;
                    }();
                    if (cljs.core.truth_(inst_25745)) {
                      var statearr_25762_25776 = state_25755__$1;
                      statearr_25762_25776[1] = 5;
                    } else {
                      var statearr_25763_25777 = state_25755__$1;
                      statearr_25763_25777[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_25756 === 3) {
                      var inst_25753 = state_25755[2];
                      var state_25755__$1 = state_25755;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_25755__$1, inst_25753);
                    } else {
                      if (state_val_25756 === 2) {
                        var state_25755__$1 = state_25755;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_25755__$1, 4, ch);
                      } else {
                        if (state_val_25756 === 1) {
                          var inst_25741 = init;
                          var state_25755__$1 = function() {
                            var statearr_25764 = state_25755;
                            statearr_25764[8] = inst_25741;
                            return statearr_25764;
                          }();
                          var statearr_25765_25778 = state_25755__$1;
                          statearr_25765_25778[2] = null;
                          statearr_25765_25778[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5860__auto__);
        return function(switch__5845__auto__, c__5860__auto__) {
          return function() {
            var state_machine__5846__auto__ = null;
            var state_machine__5846__auto____0 = function() {
              var statearr_25769 = [null, null, null, null, null, null, null, null, null];
              statearr_25769[0] = state_machine__5846__auto__;
              statearr_25769[1] = 1;
              return statearr_25769;
            };
            var state_machine__5846__auto____1 = function(state_25755) {
              while (true) {
                var ret_value__5847__auto__ = function() {
                  try {
                    while (true) {
                      var result__5848__auto__ = switch__5845__auto__.call(null, state_25755);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__5848__auto__;
                      }
                      break;
                    }
                  } catch (e25770) {
                    if (e25770 instanceof Object) {
                      var ex__5849__auto__ = e25770;
                      var statearr_25771_25779 = state_25755;
                      statearr_25771_25779[5] = ex__5849__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_25755);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e25770;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__25780 = state_25755;
                  state_25755 = G__25780;
                  continue;
                } else {
                  return ret_value__5847__auto__;
                }
                break;
              }
            };
            state_machine__5846__auto__ = function(state_25755) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5846__auto____0.call(this);
                case 1:
                  return state_machine__5846__auto____1.call(this, state_25755);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
            return state_machine__5846__auto__;
          }();
        }(switch__5845__auto__, c__5860__auto__);
      }();
      var state__5862__auto__ = function() {
        var statearr_25772 = f__5861__auto__.call(null);
        statearr_25772[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto__;
        return statearr_25772;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
    };
  }(c__5860__auto__));
  return c__5860__auto__;
};
cljs.core.async.onto_chan = function() {
  var onto_chan = null;
  var onto_chan__2 = function(ch, coll) {
    return onto_chan.call(null, ch, coll, true);
  };
  var onto_chan__3 = function(ch, coll, close_QMARK_) {
    var c__5860__auto__ = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto__) {
      return function() {
        var f__5861__auto__ = function() {
          var switch__5845__auto__ = function(c__5860__auto__) {
            return function(state_25854) {
              var state_val_25855 = state_25854[1];
              if (state_val_25855 === 7) {
                var inst_25836 = state_25854[2];
                var state_25854__$1 = state_25854;
                var statearr_25856_25879 = state_25854__$1;
                statearr_25856_25879[2] = inst_25836;
                statearr_25856_25879[1] = 6;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_25855 === 1) {
                  var inst_25830 = cljs.core.seq.call(null, coll);
                  var inst_25831 = inst_25830;
                  var state_25854__$1 = function() {
                    var statearr_25857 = state_25854;
                    statearr_25857[7] = inst_25831;
                    return statearr_25857;
                  }();
                  var statearr_25858_25880 = state_25854__$1;
                  statearr_25858_25880[2] = null;
                  statearr_25858_25880[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_25855 === 4) {
                    var inst_25831 = state_25854[7];
                    var inst_25834 = cljs.core.first.call(null, inst_25831);
                    var state_25854__$1 = state_25854;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_25854__$1, 7, ch, inst_25834);
                  } else {
                    if (state_val_25855 === 13) {
                      var inst_25848 = state_25854[2];
                      var state_25854__$1 = state_25854;
                      var statearr_25859_25881 = state_25854__$1;
                      statearr_25859_25881[2] = inst_25848;
                      statearr_25859_25881[1] = 10;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_25855 === 6) {
                        var inst_25839 = state_25854[2];
                        var state_25854__$1 = state_25854;
                        if (cljs.core.truth_(inst_25839)) {
                          var statearr_25860_25882 = state_25854__$1;
                          statearr_25860_25882[1] = 8;
                        } else {
                          var statearr_25861_25883 = state_25854__$1;
                          statearr_25861_25883[1] = 9;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_25855 === 3) {
                          var inst_25852 = state_25854[2];
                          var state_25854__$1 = state_25854;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_25854__$1, inst_25852);
                        } else {
                          if (state_val_25855 === 12) {
                            var state_25854__$1 = state_25854;
                            var statearr_25862_25884 = state_25854__$1;
                            statearr_25862_25884[2] = null;
                            statearr_25862_25884[1] = 13;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_25855 === 2) {
                              var inst_25831 = state_25854[7];
                              var state_25854__$1 = state_25854;
                              if (cljs.core.truth_(inst_25831)) {
                                var statearr_25863_25885 = state_25854__$1;
                                statearr_25863_25885[1] = 4;
                              } else {
                                var statearr_25864_25886 = state_25854__$1;
                                statearr_25864_25886[1] = 5;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_25855 === 11) {
                                var inst_25845 = cljs.core.async.close_BANG_.call(null, ch);
                                var state_25854__$1 = state_25854;
                                var statearr_25865_25887 = state_25854__$1;
                                statearr_25865_25887[2] = inst_25845;
                                statearr_25865_25887[1] = 13;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_25855 === 9) {
                                  var state_25854__$1 = state_25854;
                                  if (cljs.core.truth_(close_QMARK_)) {
                                    var statearr_25866_25888 = state_25854__$1;
                                    statearr_25866_25888[1] = 11;
                                  } else {
                                    var statearr_25867_25889 = state_25854__$1;
                                    statearr_25867_25889[1] = 12;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_25855 === 5) {
                                    var inst_25831 = state_25854[7];
                                    var state_25854__$1 = state_25854;
                                    var statearr_25868_25890 = state_25854__$1;
                                    statearr_25868_25890[2] = inst_25831;
                                    statearr_25868_25890[1] = 6;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_25855 === 10) {
                                      var inst_25850 = state_25854[2];
                                      var state_25854__$1 = state_25854;
                                      var statearr_25869_25891 = state_25854__$1;
                                      statearr_25869_25891[2] = inst_25850;
                                      statearr_25869_25891[1] = 3;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_25855 === 8) {
                                        var inst_25831 = state_25854[7];
                                        var inst_25841 = cljs.core.next.call(null, inst_25831);
                                        var inst_25831__$1 = inst_25841;
                                        var state_25854__$1 = function() {
                                          var statearr_25870 = state_25854;
                                          statearr_25870[7] = inst_25831__$1;
                                          return statearr_25870;
                                        }();
                                        var statearr_25871_25892 = state_25854__$1;
                                        statearr_25871_25892[2] = null;
                                        statearr_25871_25892[1] = 2;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        return null;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5860__auto__);
          return function(switch__5845__auto__, c__5860__auto__) {
            return function() {
              var state_machine__5846__auto__ = null;
              var state_machine__5846__auto____0 = function() {
                var statearr_25875 = [null, null, null, null, null, null, null, null];
                statearr_25875[0] = state_machine__5846__auto__;
                statearr_25875[1] = 1;
                return statearr_25875;
              };
              var state_machine__5846__auto____1 = function(state_25854) {
                while (true) {
                  var ret_value__5847__auto__ = function() {
                    try {
                      while (true) {
                        var result__5848__auto__ = switch__5845__auto__.call(null, state_25854);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__5848__auto__;
                        }
                        break;
                      }
                    } catch (e25876) {
                      if (e25876 instanceof Object) {
                        var ex__5849__auto__ = e25876;
                        var statearr_25877_25893 = state_25854;
                        statearr_25877_25893[5] = ex__5849__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_25854);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e25876;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__25894 = state_25854;
                    state_25854 = G__25894;
                    continue;
                  } else {
                    return ret_value__5847__auto__;
                  }
                  break;
                }
              };
              state_machine__5846__auto__ = function(state_25854) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5846__auto____0.call(this);
                  case 1:
                    return state_machine__5846__auto____1.call(this, state_25854);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
              return state_machine__5846__auto__;
            }();
          }(switch__5845__auto__, c__5860__auto__);
        }();
        var state__5862__auto__ = function() {
          var statearr_25878 = f__5861__auto__.call(null);
          statearr_25878[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto__;
          return statearr_25878;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
      };
    }(c__5860__auto__));
    return c__5860__auto__;
  };
  onto_chan = function(ch, coll, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return onto_chan__2.call(this, ch, coll);
      case 3:
        return onto_chan__3.call(this, ch, coll, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  onto_chan.cljs$core$IFn$_invoke$arity$2 = onto_chan__2;
  onto_chan.cljs$core$IFn$_invoke$arity$3 = onto_chan__3;
  return onto_chan;
}();
cljs.core.async.to_chan = function to_chan(coll) {
  var ch = cljs.core.async.chan.call(null, cljs.core.bounded_count.call(null, 100, coll));
  cljs.core.async.onto_chan.call(null, ch, coll);
  return ch;
};
cljs.core.async.Mux = function() {
  var obj25896 = {};
  return obj25896;
}();
cljs.core.async.muxch_STAR_ = function muxch_STAR_(_) {
  if (function() {
    var and__3665__auto__ = _;
    if (and__3665__auto__) {
      return _.cljs$core$async$Mux$muxch_STAR_$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
  } else {
    var x__4314__auto__ = _ == null ? null : _;
    return function() {
      var or__3677__auto__ = cljs.core.async.muxch_STAR_[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core.async.muxch_STAR_["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mux.muxch*", _);
        }
      }
    }().call(null, _);
  }
};
cljs.core.async.Mult = function() {
  var obj25898 = {};
  return obj25898;
}();
cljs.core.async.tap_STAR_ = function tap_STAR_(m, ch, close_QMARK_) {
  if (function() {
    var and__3665__auto__ = m;
    if (and__3665__auto__) {
      return m.cljs$core$async$Mult$tap_STAR_$arity$3;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$tap_STAR_$arity$3(m, ch, close_QMARK_);
  } else {
    var x__4314__auto__ = m == null ? null : m;
    return function() {
      var or__3677__auto__ = cljs.core.async.tap_STAR_[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core.async.tap_STAR_["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.tap*", m);
        }
      }
    }().call(null, m, ch, close_QMARK_);
  }
};
cljs.core.async.untap_STAR_ = function untap_STAR_(m, ch) {
  if (function() {
    var and__3665__auto__ = m;
    if (and__3665__auto__) {
      return m.cljs$core$async$Mult$untap_STAR_$arity$2;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_STAR_$arity$2(m, ch);
  } else {
    var x__4314__auto__ = m == null ? null : m;
    return function() {
      var or__3677__auto__ = cljs.core.async.untap_STAR_[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core.async.untap_STAR_["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.untap_all_STAR_ = function untap_all_STAR_(m) {
  if (function() {
    var and__3665__auto__ = m;
    if (and__3665__auto__) {
      return m.cljs$core$async$Mult$untap_all_STAR_$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
  } else {
    var x__4314__auto__ = m == null ? null : m;
    return function() {
      var or__3677__auto__ = cljs.core.async.untap_all_STAR_[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core.async.untap_all_STAR_["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mult.untap-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.mult = function mult(ch) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var m = function() {
    if (typeof cljs.core.async.t26120 !== "undefined") {
    } else {
      cljs.core.async.t26120 = function(cs, ch, mult, meta26121) {
        this.cs = cs;
        this.ch = ch;
        this.mult = mult;
        this.meta26121 = meta26121;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t26120.cljs$lang$type = true;
      cljs.core.async.t26120.cljs$lang$ctorStr = "cljs.core.async/t26120";
      cljs.core.async.t26120.cljs$lang$ctorPrWriter = function(cs) {
        return function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
          return cljs.core._write.call(null, writer__4255__auto__, "cljs.core.async/t26120");
        };
      }(cs);
      cljs.core.async.t26120.prototype.cljs$core$async$Mult$ = true;
      cljs.core.async.t26120.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = function(cs) {
        return function(_, ch__$2, close_QMARK_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch__$2, close_QMARK_);
          return null;
        };
      }(cs);
      cljs.core.async.t26120.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = function(cs) {
        return function(_, ch__$2) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch__$2);
          return null;
        };
      }(cs);
      cljs.core.async.t26120.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return null;
        };
      }(cs);
      cljs.core.async.t26120.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t26120.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.ch;
        };
      }(cs);
      cljs.core.async.t26120.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs) {
        return function(_26122) {
          var self__ = this;
          var _26122__$1 = this;
          return self__.meta26121;
        };
      }(cs);
      cljs.core.async.t26120.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs) {
        return function(_26122, meta26121__$1) {
          var self__ = this;
          var _26122__$1 = this;
          return new cljs.core.async.t26120(self__.cs, self__.ch, self__.mult, meta26121__$1);
        };
      }(cs);
      cljs.core.async.__GT_t26120 = function(cs) {
        return function __GT_t26120(cs__$1, ch__$1, mult__$1, meta26121) {
          return new cljs.core.async.t26120(cs__$1, ch__$1, mult__$1, meta26121);
        };
      }(cs);
    }
    return new cljs.core.async.t26120(cs, ch, mult, null);
  }();
  var dchan = cljs.core.async.chan.call(null, 1);
  var dctr = cljs.core.atom.call(null, null);
  var done = function(cs, m, dchan, dctr) {
    return function(_) {
      if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
        return cljs.core.async.put_BANG_.call(null, dchan, true);
      } else {
        return null;
      }
    };
  }(cs, m, dchan, dctr);
  var c__5860__auto___26341 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto___26341, cs, m, dchan, dctr, done) {
    return function() {
      var f__5861__auto__ = function() {
        var switch__5845__auto__ = function(c__5860__auto___26341, cs, m, dchan, dctr, done) {
          return function(state_26253) {
            var state_val_26254 = state_26253[1];
            if (state_val_26254 === 7) {
              var inst_26249 = state_26253[2];
              var state_26253__$1 = state_26253;
              var statearr_26255_26342 = state_26253__$1;
              statearr_26255_26342[2] = inst_26249;
              statearr_26255_26342[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_26254 === 20) {
                var inst_26154 = state_26253[7];
                var inst_26164 = cljs.core.first.call(null, inst_26154);
                var inst_26165 = cljs.core.nth.call(null, inst_26164, 0, null);
                var inst_26166 = cljs.core.nth.call(null, inst_26164, 1, null);
                var state_26253__$1 = function() {
                  var statearr_26256 = state_26253;
                  statearr_26256[8] = inst_26165;
                  return statearr_26256;
                }();
                if (cljs.core.truth_(inst_26166)) {
                  var statearr_26257_26343 = state_26253__$1;
                  statearr_26257_26343[1] = 22;
                } else {
                  var statearr_26258_26344 = state_26253__$1;
                  statearr_26258_26344[1] = 23;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_26254 === 27) {
                  var inst_26125 = state_26253[9];
                  var inst_26194 = state_26253[10];
                  var inst_26201 = state_26253[11];
                  var inst_26196 = state_26253[12];
                  var inst_26201__$1 = cljs.core._nth.call(null, inst_26194, inst_26196);
                  var inst_26202 = cljs.core.async.put_BANG_.call(null, inst_26201__$1, inst_26125, done);
                  var state_26253__$1 = function() {
                    var statearr_26259 = state_26253;
                    statearr_26259[11] = inst_26201__$1;
                    return statearr_26259;
                  }();
                  if (cljs.core.truth_(inst_26202)) {
                    var statearr_26260_26345 = state_26253__$1;
                    statearr_26260_26345[1] = 30;
                  } else {
                    var statearr_26261_26346 = state_26253__$1;
                    statearr_26261_26346[1] = 31;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_26254 === 1) {
                    var state_26253__$1 = state_26253;
                    var statearr_26262_26347 = state_26253__$1;
                    statearr_26262_26347[2] = null;
                    statearr_26262_26347[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_26254 === 24) {
                      var inst_26154 = state_26253[7];
                      var inst_26171 = state_26253[2];
                      var inst_26172 = cljs.core.next.call(null, inst_26154);
                      var inst_26134 = inst_26172;
                      var inst_26135 = null;
                      var inst_26136 = 0;
                      var inst_26137 = 0;
                      var state_26253__$1 = function() {
                        var statearr_26263 = state_26253;
                        statearr_26263[13] = inst_26135;
                        statearr_26263[14] = inst_26137;
                        statearr_26263[15] = inst_26171;
                        statearr_26263[16] = inst_26134;
                        statearr_26263[17] = inst_26136;
                        return statearr_26263;
                      }();
                      var statearr_26264_26348 = state_26253__$1;
                      statearr_26264_26348[2] = null;
                      statearr_26264_26348[1] = 8;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_26254 === 39) {
                        var state_26253__$1 = state_26253;
                        var statearr_26268_26349 = state_26253__$1;
                        statearr_26268_26349[2] = null;
                        statearr_26268_26349[1] = 41;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_26254 === 4) {
                          var inst_26125 = state_26253[9];
                          var inst_26125__$1 = state_26253[2];
                          var inst_26126 = inst_26125__$1 == null;
                          var state_26253__$1 = function() {
                            var statearr_26269 = state_26253;
                            statearr_26269[9] = inst_26125__$1;
                            return statearr_26269;
                          }();
                          if (cljs.core.truth_(inst_26126)) {
                            var statearr_26270_26350 = state_26253__$1;
                            statearr_26270_26350[1] = 5;
                          } else {
                            var statearr_26271_26351 = state_26253__$1;
                            statearr_26271_26351[1] = 6;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_26254 === 15) {
                            var inst_26135 = state_26253[13];
                            var inst_26137 = state_26253[14];
                            var inst_26134 = state_26253[16];
                            var inst_26136 = state_26253[17];
                            var inst_26150 = state_26253[2];
                            var inst_26151 = inst_26137 + 1;
                            var tmp26265 = inst_26135;
                            var tmp26266 = inst_26134;
                            var tmp26267 = inst_26136;
                            var inst_26134__$1 = tmp26266;
                            var inst_26135__$1 = tmp26265;
                            var inst_26136__$1 = tmp26267;
                            var inst_26137__$1 = inst_26151;
                            var state_26253__$1 = function() {
                              var statearr_26272 = state_26253;
                              statearr_26272[18] = inst_26150;
                              statearr_26272[13] = inst_26135__$1;
                              statearr_26272[14] = inst_26137__$1;
                              statearr_26272[16] = inst_26134__$1;
                              statearr_26272[17] = inst_26136__$1;
                              return statearr_26272;
                            }();
                            var statearr_26273_26352 = state_26253__$1;
                            statearr_26273_26352[2] = null;
                            statearr_26273_26352[1] = 8;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_26254 === 21) {
                              var inst_26175 = state_26253[2];
                              var state_26253__$1 = state_26253;
                              var statearr_26277_26353 = state_26253__$1;
                              statearr_26277_26353[2] = inst_26175;
                              statearr_26277_26353[1] = 18;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_26254 === 31) {
                                var inst_26201 = state_26253[11];
                                var inst_26205 = done.call(null, null);
                                var inst_26206 = cljs.core.async.untap_STAR_.call(null, m, inst_26201);
                                var state_26253__$1 = function() {
                                  var statearr_26278 = state_26253;
                                  statearr_26278[19] = inst_26205;
                                  return statearr_26278;
                                }();
                                var statearr_26279_26354 = state_26253__$1;
                                statearr_26279_26354[2] = inst_26206;
                                statearr_26279_26354[1] = 32;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_26254 === 32) {
                                  var inst_26195 = state_26253[20];
                                  var inst_26193 = state_26253[21];
                                  var inst_26194 = state_26253[10];
                                  var inst_26196 = state_26253[12];
                                  var inst_26208 = state_26253[2];
                                  var inst_26209 = inst_26196 + 1;
                                  var tmp26274 = inst_26195;
                                  var tmp26275 = inst_26193;
                                  var tmp26276 = inst_26194;
                                  var inst_26193__$1 = tmp26275;
                                  var inst_26194__$1 = tmp26276;
                                  var inst_26195__$1 = tmp26274;
                                  var inst_26196__$1 = inst_26209;
                                  var state_26253__$1 = function() {
                                    var statearr_26280 = state_26253;
                                    statearr_26280[20] = inst_26195__$1;
                                    statearr_26280[21] = inst_26193__$1;
                                    statearr_26280[22] = inst_26208;
                                    statearr_26280[10] = inst_26194__$1;
                                    statearr_26280[12] = inst_26196__$1;
                                    return statearr_26280;
                                  }();
                                  var statearr_26281_26355 = state_26253__$1;
                                  statearr_26281_26355[2] = null;
                                  statearr_26281_26355[1] = 25;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_26254 === 40) {
                                    var inst_26221 = state_26253[23];
                                    var inst_26225 = done.call(null, null);
                                    var inst_26226 = cljs.core.async.untap_STAR_.call(null, m, inst_26221);
                                    var state_26253__$1 = function() {
                                      var statearr_26282 = state_26253;
                                      statearr_26282[24] = inst_26225;
                                      return statearr_26282;
                                    }();
                                    var statearr_26283_26356 = state_26253__$1;
                                    statearr_26283_26356[2] = inst_26226;
                                    statearr_26283_26356[1] = 41;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_26254 === 33) {
                                      var inst_26212 = state_26253[25];
                                      var inst_26214 = cljs.core.chunked_seq_QMARK_.call(null, inst_26212);
                                      var state_26253__$1 = state_26253;
                                      if (inst_26214) {
                                        var statearr_26284_26357 = state_26253__$1;
                                        statearr_26284_26357[1] = 36;
                                      } else {
                                        var statearr_26285_26358 = state_26253__$1;
                                        statearr_26285_26358[1] = 37;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_26254 === 13) {
                                        var inst_26144 = state_26253[26];
                                        var inst_26147 = cljs.core.async.close_BANG_.call(null, inst_26144);
                                        var state_26253__$1 = state_26253;
                                        var statearr_26286_26359 = state_26253__$1;
                                        statearr_26286_26359[2] = inst_26147;
                                        statearr_26286_26359[1] = 15;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_26254 === 22) {
                                          var inst_26165 = state_26253[8];
                                          var inst_26168 = cljs.core.async.close_BANG_.call(null, inst_26165);
                                          var state_26253__$1 = state_26253;
                                          var statearr_26287_26360 = state_26253__$1;
                                          statearr_26287_26360[2] = inst_26168;
                                          statearr_26287_26360[1] = 24;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_26254 === 36) {
                                            var inst_26212 = state_26253[25];
                                            var inst_26216 = cljs.core.chunk_first.call(null, inst_26212);
                                            var inst_26217 = cljs.core.chunk_rest.call(null, inst_26212);
                                            var inst_26218 = cljs.core.count.call(null, inst_26216);
                                            var inst_26193 = inst_26217;
                                            var inst_26194 = inst_26216;
                                            var inst_26195 = inst_26218;
                                            var inst_26196 = 0;
                                            var state_26253__$1 = function() {
                                              var statearr_26288 = state_26253;
                                              statearr_26288[20] = inst_26195;
                                              statearr_26288[21] = inst_26193;
                                              statearr_26288[10] = inst_26194;
                                              statearr_26288[12] = inst_26196;
                                              return statearr_26288;
                                            }();
                                            var statearr_26289_26361 = state_26253__$1;
                                            statearr_26289_26361[2] = null;
                                            statearr_26289_26361[1] = 25;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_26254 === 41) {
                                              var inst_26212 = state_26253[25];
                                              var inst_26228 = state_26253[2];
                                              var inst_26229 = cljs.core.next.call(null, inst_26212);
                                              var inst_26193 = inst_26229;
                                              var inst_26194 = null;
                                              var inst_26195 = 0;
                                              var inst_26196 = 0;
                                              var state_26253__$1 = function() {
                                                var statearr_26290 = state_26253;
                                                statearr_26290[27] = inst_26228;
                                                statearr_26290[20] = inst_26195;
                                                statearr_26290[21] = inst_26193;
                                                statearr_26290[10] = inst_26194;
                                                statearr_26290[12] = inst_26196;
                                                return statearr_26290;
                                              }();
                                              var statearr_26291_26362 = state_26253__$1;
                                              statearr_26291_26362[2] = null;
                                              statearr_26291_26362[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_26254 === 43) {
                                                var state_26253__$1 = state_26253;
                                                var statearr_26292_26363 = state_26253__$1;
                                                statearr_26292_26363[2] = null;
                                                statearr_26292_26363[1] = 44;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_26254 === 29) {
                                                  var inst_26237 = state_26253[2];
                                                  var state_26253__$1 = state_26253;
                                                  var statearr_26293_26364 = state_26253__$1;
                                                  statearr_26293_26364[2] = inst_26237;
                                                  statearr_26293_26364[1] = 26;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_26254 === 44) {
                                                    var inst_26246 = state_26253[2];
                                                    var state_26253__$1 = function() {
                                                      var statearr_26294 = state_26253;
                                                      statearr_26294[28] = inst_26246;
                                                      return statearr_26294;
                                                    }();
                                                    var statearr_26295_26365 = state_26253__$1;
                                                    statearr_26295_26365[2] = null;
                                                    statearr_26295_26365[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_26254 === 6) {
                                                      var inst_26185 = state_26253[29];
                                                      var inst_26184 = cljs.core.deref.call(null, cs);
                                                      var inst_26185__$1 = cljs.core.keys.call(null, inst_26184);
                                                      var inst_26186 = cljs.core.count.call(null, inst_26185__$1);
                                                      var inst_26187 = cljs.core.reset_BANG_.call(null, dctr, inst_26186);
                                                      var inst_26192 = cljs.core.seq.call(null, inst_26185__$1);
                                                      var inst_26193 = inst_26192;
                                                      var inst_26194 = null;
                                                      var inst_26195 = 0;
                                                      var inst_26196 = 0;
                                                      var state_26253__$1 = function() {
                                                        var statearr_26296 = state_26253;
                                                        statearr_26296[29] = inst_26185__$1;
                                                        statearr_26296[20] = inst_26195;
                                                        statearr_26296[21] = inst_26193;
                                                        statearr_26296[30] = inst_26187;
                                                        statearr_26296[10] = inst_26194;
                                                        statearr_26296[12] = inst_26196;
                                                        return statearr_26296;
                                                      }();
                                                      var statearr_26297_26366 = state_26253__$1;
                                                      statearr_26297_26366[2] = null;
                                                      statearr_26297_26366[1] = 25;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_26254 === 28) {
                                                        var inst_26212 = state_26253[25];
                                                        var inst_26193 = state_26253[21];
                                                        var inst_26212__$1 = cljs.core.seq.call(null, inst_26193);
                                                        var state_26253__$1 = function() {
                                                          var statearr_26298 = state_26253;
                                                          statearr_26298[25] = inst_26212__$1;
                                                          return statearr_26298;
                                                        }();
                                                        if (inst_26212__$1) {
                                                          var statearr_26299_26367 = state_26253__$1;
                                                          statearr_26299_26367[1] = 33;
                                                        } else {
                                                          var statearr_26300_26368 = state_26253__$1;
                                                          statearr_26300_26368[1] = 34;
                                                        }
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_26254 === 25) {
                                                          var inst_26195 = state_26253[20];
                                                          var inst_26196 = state_26253[12];
                                                          var inst_26198 = inst_26196 < inst_26195;
                                                          var inst_26199 = inst_26198;
                                                          var state_26253__$1 = state_26253;
                                                          if (cljs.core.truth_(inst_26199)) {
                                                            var statearr_26301_26369 = state_26253__$1;
                                                            statearr_26301_26369[1] = 27;
                                                          } else {
                                                            var statearr_26302_26370 = state_26253__$1;
                                                            statearr_26302_26370[1] = 28;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_26254 === 34) {
                                                            var state_26253__$1 = state_26253;
                                                            var statearr_26303_26371 = state_26253__$1;
                                                            statearr_26303_26371[2] = null;
                                                            statearr_26303_26371[1] = 35;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_26254 === 17) {
                                                              var state_26253__$1 = state_26253;
                                                              var statearr_26304_26372 = state_26253__$1;
                                                              statearr_26304_26372[2] = null;
                                                              statearr_26304_26372[1] = 18;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_26254 === 3) {
                                                                var inst_26251 = state_26253[2];
                                                                var state_26253__$1 = state_26253;
                                                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_26253__$1, inst_26251);
                                                              } else {
                                                                if (state_val_26254 === 12) {
                                                                  var inst_26180 = state_26253[2];
                                                                  var state_26253__$1 = state_26253;
                                                                  var statearr_26305_26373 = state_26253__$1;
                                                                  statearr_26305_26373[2] = inst_26180;
                                                                  statearr_26305_26373[1] = 9;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_26254 === 2) {
                                                                    var state_26253__$1 = state_26253;
                                                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_26253__$1, 4, ch);
                                                                  } else {
                                                                    if (state_val_26254 === 23) {
                                                                      var state_26253__$1 = state_26253;
                                                                      var statearr_26306_26374 = state_26253__$1;
                                                                      statearr_26306_26374[2] = null;
                                                                      statearr_26306_26374[1] = 24;
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_26254 === 35) {
                                                                        var inst_26235 = state_26253[2];
                                                                        var state_26253__$1 = state_26253;
                                                                        var statearr_26307_26375 = state_26253__$1;
                                                                        statearr_26307_26375[2] = inst_26235;
                                                                        statearr_26307_26375[1] = 29;
                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                      } else {
                                                                        if (state_val_26254 === 19) {
                                                                          var inst_26154 = state_26253[7];
                                                                          var inst_26158 = cljs.core.chunk_first.call(null, inst_26154);
                                                                          var inst_26159 = cljs.core.chunk_rest.call(null, inst_26154);
                                                                          var inst_26160 = cljs.core.count.call(null, inst_26158);
                                                                          var inst_26134 = inst_26159;
                                                                          var inst_26135 = inst_26158;
                                                                          var inst_26136 = inst_26160;
                                                                          var inst_26137 = 0;
                                                                          var state_26253__$1 = function() {
                                                                            var statearr_26308 = state_26253;
                                                                            statearr_26308[13] = inst_26135;
                                                                            statearr_26308[14] = inst_26137;
                                                                            statearr_26308[16] = inst_26134;
                                                                            statearr_26308[17] = inst_26136;
                                                                            return statearr_26308;
                                                                          }();
                                                                          var statearr_26309_26376 = state_26253__$1;
                                                                          statearr_26309_26376[2] = null;
                                                                          statearr_26309_26376[1] = 8;
                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                        } else {
                                                                          if (state_val_26254 === 11) {
                                                                            var inst_26134 = state_26253[16];
                                                                            var inst_26154 = state_26253[7];
                                                                            var inst_26154__$1 = cljs.core.seq.call(null, inst_26134);
                                                                            var state_26253__$1 = function() {
                                                                              var statearr_26310 = state_26253;
                                                                              statearr_26310[7] = inst_26154__$1;
                                                                              return statearr_26310;
                                                                            }();
                                                                            if (inst_26154__$1) {
                                                                              var statearr_26311_26377 = state_26253__$1;
                                                                              statearr_26311_26377[1] = 16;
                                                                            } else {
                                                                              var statearr_26312_26378 = state_26253__$1;
                                                                              statearr_26312_26378[1] = 17;
                                                                            }
                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                          } else {
                                                                            if (state_val_26254 === 9) {
                                                                              var inst_26182 = state_26253[2];
                                                                              var state_26253__$1 = state_26253;
                                                                              var statearr_26313_26379 = state_26253__$1;
                                                                              statearr_26313_26379[2] = inst_26182;
                                                                              statearr_26313_26379[1] = 7;
                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                            } else {
                                                                              if (state_val_26254 === 5) {
                                                                                var inst_26132 = cljs.core.deref.call(null, cs);
                                                                                var inst_26133 = cljs.core.seq.call(null, inst_26132);
                                                                                var inst_26134 = inst_26133;
                                                                                var inst_26135 = null;
                                                                                var inst_26136 = 0;
                                                                                var inst_26137 = 0;
                                                                                var state_26253__$1 = function() {
                                                                                  var statearr_26314 = state_26253;
                                                                                  statearr_26314[13] = inst_26135;
                                                                                  statearr_26314[14] = inst_26137;
                                                                                  statearr_26314[16] = inst_26134;
                                                                                  statearr_26314[17] = inst_26136;
                                                                                  return statearr_26314;
                                                                                }();
                                                                                var statearr_26315_26380 = state_26253__$1;
                                                                                statearr_26315_26380[2] = null;
                                                                                statearr_26315_26380[1] = 8;
                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                              } else {
                                                                                if (state_val_26254 === 14) {
                                                                                  var state_26253__$1 = state_26253;
                                                                                  var statearr_26316_26381 = state_26253__$1;
                                                                                  statearr_26316_26381[2] = null;
                                                                                  statearr_26316_26381[1] = 15;
                                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                } else {
                                                                                  if (state_val_26254 === 45) {
                                                                                    var inst_26243 = state_26253[2];
                                                                                    var state_26253__$1 = state_26253;
                                                                                    var statearr_26317_26382 = state_26253__$1;
                                                                                    statearr_26317_26382[2] = inst_26243;
                                                                                    statearr_26317_26382[1] = 44;
                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                  } else {
                                                                                    if (state_val_26254 === 26) {
                                                                                      var inst_26185 = state_26253[29];
                                                                                      var inst_26239 = state_26253[2];
                                                                                      var inst_26240 = cljs.core.seq.call(null, inst_26185);
                                                                                      var state_26253__$1 = function() {
                                                                                        var statearr_26318 = state_26253;
                                                                                        statearr_26318[31] = inst_26239;
                                                                                        return statearr_26318;
                                                                                      }();
                                                                                      if (inst_26240) {
                                                                                        var statearr_26319_26383 = state_26253__$1;
                                                                                        statearr_26319_26383[1] = 42;
                                                                                      } else {
                                                                                        var statearr_26320_26384 = state_26253__$1;
                                                                                        statearr_26320_26384[1] = 43;
                                                                                      }
                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                    } else {
                                                                                      if (state_val_26254 === 16) {
                                                                                        var inst_26154 = state_26253[7];
                                                                                        var inst_26156 = cljs.core.chunked_seq_QMARK_.call(null, inst_26154);
                                                                                        var state_26253__$1 = state_26253;
                                                                                        if (inst_26156) {
                                                                                          var statearr_26321_26385 = state_26253__$1;
                                                                                          statearr_26321_26385[1] = 19;
                                                                                        } else {
                                                                                          var statearr_26322_26386 = state_26253__$1;
                                                                                          statearr_26322_26386[1] = 20;
                                                                                        }
                                                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                      } else {
                                                                                        if (state_val_26254 === 38) {
                                                                                          var inst_26232 = state_26253[2];
                                                                                          var state_26253__$1 = state_26253;
                                                                                          var statearr_26323_26387 = state_26253__$1;
                                                                                          statearr_26323_26387[2] = inst_26232;
                                                                                          statearr_26323_26387[1] = 35;
                                                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                        } else {
                                                                                          if (state_val_26254 === 30) {
                                                                                            var state_26253__$1 = state_26253;
                                                                                            var statearr_26324_26388 = state_26253__$1;
                                                                                            statearr_26324_26388[2] = null;
                                                                                            statearr_26324_26388[1] = 32;
                                                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                          } else {
                                                                                            if (state_val_26254 === 10) {
                                                                                              var inst_26135 = state_26253[13];
                                                                                              var inst_26137 = state_26253[14];
                                                                                              var inst_26143 = cljs.core._nth.call(null, inst_26135, inst_26137);
                                                                                              var inst_26144 = cljs.core.nth.call(null, inst_26143, 0, null);
                                                                                              var inst_26145 = cljs.core.nth.call(null, inst_26143, 1, null);
                                                                                              var state_26253__$1 = function() {
                                                                                                var statearr_26325 = state_26253;
                                                                                                statearr_26325[26] = inst_26144;
                                                                                                return statearr_26325;
                                                                                              }();
                                                                                              if (cljs.core.truth_(inst_26145)) {
                                                                                                var statearr_26326_26389 = state_26253__$1;
                                                                                                statearr_26326_26389[1] = 13;
                                                                                              } else {
                                                                                                var statearr_26327_26390 = state_26253__$1;
                                                                                                statearr_26327_26390[1] = 14;
                                                                                              }
                                                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                            } else {
                                                                                              if (state_val_26254 === 18) {
                                                                                                var inst_26178 = state_26253[2];
                                                                                                var state_26253__$1 = state_26253;
                                                                                                var statearr_26328_26391 = state_26253__$1;
                                                                                                statearr_26328_26391[2] = inst_26178;
                                                                                                statearr_26328_26391[1] = 12;
                                                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                              } else {
                                                                                                if (state_val_26254 === 42) {
                                                                                                  var state_26253__$1 = state_26253;
                                                                                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_26253__$1, 45, dchan);
                                                                                                } else {
                                                                                                  if (state_val_26254 === 37) {
                                                                                                    var inst_26212 = state_26253[25];
                                                                                                    var inst_26125 = state_26253[9];
                                                                                                    var inst_26221 = state_26253[23];
                                                                                                    var inst_26221__$1 = cljs.core.first.call(null, inst_26212);
                                                                                                    var inst_26222 = cljs.core.async.put_BANG_.call(null, inst_26221__$1, inst_26125, done);
                                                                                                    var state_26253__$1 = function() {
                                                                                                      var statearr_26329 = state_26253;
                                                                                                      statearr_26329[23] = inst_26221__$1;
                                                                                                      return statearr_26329;
                                                                                                    }();
                                                                                                    if (cljs.core.truth_(inst_26222)) {
                                                                                                      var statearr_26330_26392 = state_26253__$1;
                                                                                                      statearr_26330_26392[1] = 39;
                                                                                                    } else {
                                                                                                      var statearr_26331_26393 = state_26253__$1;
                                                                                                      statearr_26331_26393[1] = 40;
                                                                                                    }
                                                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                  } else {
                                                                                                    if (state_val_26254 === 8) {
                                                                                                      var inst_26137 = state_26253[14];
                                                                                                      var inst_26136 = state_26253[17];
                                                                                                      var inst_26139 = inst_26137 < inst_26136;
                                                                                                      var inst_26140 = inst_26139;
                                                                                                      var state_26253__$1 = state_26253;
                                                                                                      if (cljs.core.truth_(inst_26140)) {
                                                                                                        var statearr_26332_26394 = state_26253__$1;
                                                                                                        statearr_26332_26394[1] = 10;
                                                                                                      } else {
                                                                                                        var statearr_26333_26395 = state_26253__$1;
                                                                                                        statearr_26333_26395[1] = 11;
                                                                                                      }
                                                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                                                    } else {
                                                                                                      return null;
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5860__auto___26341, cs, m, dchan, dctr, done);
        return function(switch__5845__auto__, c__5860__auto___26341, cs, m, dchan, dctr, done) {
          return function() {
            var state_machine__5846__auto__ = null;
            var state_machine__5846__auto____0 = function() {
              var statearr_26337 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_26337[0] = state_machine__5846__auto__;
              statearr_26337[1] = 1;
              return statearr_26337;
            };
            var state_machine__5846__auto____1 = function(state_26253) {
              while (true) {
                var ret_value__5847__auto__ = function() {
                  try {
                    while (true) {
                      var result__5848__auto__ = switch__5845__auto__.call(null, state_26253);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__5848__auto__;
                      }
                      break;
                    }
                  } catch (e26338) {
                    if (e26338 instanceof Object) {
                      var ex__5849__auto__ = e26338;
                      var statearr_26339_26396 = state_26253;
                      statearr_26339_26396[5] = ex__5849__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_26253);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e26338;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__26397 = state_26253;
                  state_26253 = G__26397;
                  continue;
                } else {
                  return ret_value__5847__auto__;
                }
                break;
              }
            };
            state_machine__5846__auto__ = function(state_26253) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5846__auto____0.call(this);
                case 1:
                  return state_machine__5846__auto____1.call(this, state_26253);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
            return state_machine__5846__auto__;
          }();
        }(switch__5845__auto__, c__5860__auto___26341, cs, m, dchan, dctr, done);
      }();
      var state__5862__auto__ = function() {
        var statearr_26340 = f__5861__auto__.call(null);
        statearr_26340[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___26341;
        return statearr_26340;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
    };
  }(c__5860__auto___26341, cs, m, dchan, dctr, done));
  return m;
};
cljs.core.async.tap = function() {
  var tap = null;
  var tap__2 = function(mult, ch) {
    return tap.call(null, mult, ch, true);
  };
  var tap__3 = function(mult, ch, close_QMARK_) {
    cljs.core.async.tap_STAR_.call(null, mult, ch, close_QMARK_);
    return ch;
  };
  tap = function(mult, ch, close_QMARK_) {
    switch(arguments.length) {
      case 2:
        return tap__2.call(this, mult, ch);
      case 3:
        return tap__3.call(this, mult, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  tap.cljs$core$IFn$_invoke$arity$2 = tap__2;
  tap.cljs$core$IFn$_invoke$arity$3 = tap__3;
  return tap;
}();
cljs.core.async.untap = function untap(mult, ch) {
  return cljs.core.async.untap_STAR_.call(null, mult, ch);
};
cljs.core.async.untap_all = function untap_all(mult) {
  return cljs.core.async.untap_all_STAR_.call(null, mult);
};
cljs.core.async.Mix = function() {
  var obj26399 = {};
  return obj26399;
}();
cljs.core.async.admix_STAR_ = function admix_STAR_(m, ch) {
  if (function() {
    var and__3665__auto__ = m;
    if (and__3665__auto__) {
      return m.cljs$core$async$Mix$admix_STAR_$arity$2;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$admix_STAR_$arity$2(m, ch);
  } else {
    var x__4314__auto__ = m == null ? null : m;
    return function() {
      var or__3677__auto__ = cljs.core.async.admix_STAR_[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core.async.admix_STAR_["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.admix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_STAR_ = function unmix_STAR_(m, ch) {
  if (function() {
    var and__3665__auto__ = m;
    if (and__3665__auto__) {
      return m.cljs$core$async$Mix$unmix_STAR_$arity$2;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m, ch);
  } else {
    var x__4314__auto__ = m == null ? null : m;
    return function() {
      var or__3677__auto__ = cljs.core.async.unmix_STAR_[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core.async.unmix_STAR_["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix*", m);
        }
      }
    }().call(null, m, ch);
  }
};
cljs.core.async.unmix_all_STAR_ = function unmix_all_STAR_(m) {
  if (function() {
    var and__3665__auto__ = m;
    if (and__3665__auto__) {
      return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
  } else {
    var x__4314__auto__ = m == null ? null : m;
    return function() {
      var or__3677__auto__ = cljs.core.async.unmix_all_STAR_[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core.async.unmix_all_STAR_["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.unmix-all*", m);
        }
      }
    }().call(null, m);
  }
};
cljs.core.async.toggle_STAR_ = function toggle_STAR_(m, state_map) {
  if (function() {
    var and__3665__auto__ = m;
    if (and__3665__auto__) {
      return m.cljs$core$async$Mix$toggle_STAR_$arity$2;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m, state_map);
  } else {
    var x__4314__auto__ = m == null ? null : m;
    return function() {
      var or__3677__auto__ = cljs.core.async.toggle_STAR_[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core.async.toggle_STAR_["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.toggle*", m);
        }
      }
    }().call(null, m, state_map);
  }
};
cljs.core.async.solo_mode_STAR_ = function solo_mode_STAR_(m, mode) {
  if (function() {
    var and__3665__auto__ = m;
    if (and__3665__auto__) {
      return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m, mode);
  } else {
    var x__4314__auto__ = m == null ? null : m;
    return function() {
      var or__3677__auto__ = cljs.core.async.solo_mode_STAR_[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core.async.solo_mode_STAR_["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Mix.solo-mode*", m);
        }
      }
    }().call(null, m, mode);
  }
};
cljs.core.async.ioc_alts_BANG_ = function() {
  var ioc_alts_BANG___delegate = function(state, cont_block, ports, p__26400) {
    var map__26405 = p__26400;
    var map__26405__$1 = cljs.core.seq_QMARK_.call(null, map__26405) ? cljs.core.apply.call(null, cljs.core.hash_map, map__26405) : map__26405;
    var opts = map__26405__$1;
    var statearr_26406_26409 = state;
    statearr_26406_26409[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block;
    var temp__4222__auto__ = cljs.core.async.do_alts.call(null, function(map__26405, map__26405__$1, opts) {
      return function(val) {
        var statearr_26407_26410 = state;
        statearr_26407_26410[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val;
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state);
      };
    }(map__26405, map__26405__$1, opts), ports, opts);
    if (cljs.core.truth_(temp__4222__auto__)) {
      var cb = temp__4222__auto__;
      var statearr_26408_26411 = state;
      statearr_26408_26411[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null, cb);
      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
    } else {
      return null;
    }
  };
  var ioc_alts_BANG_ = function(state, cont_block, ports, var_args) {
    var p__26400 = null;
    if (arguments.length > 3) {
      p__26400 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return ioc_alts_BANG___delegate.call(this, state, cont_block, ports, p__26400);
  };
  ioc_alts_BANG_.cljs$lang$maxFixedArity = 3;
  ioc_alts_BANG_.cljs$lang$applyTo = function(arglist__26412) {
    var state = cljs.core.first(arglist__26412);
    arglist__26412 = cljs.core.next(arglist__26412);
    var cont_block = cljs.core.first(arglist__26412);
    arglist__26412 = cljs.core.next(arglist__26412);
    var ports = cljs.core.first(arglist__26412);
    var p__26400 = cljs.core.rest(arglist__26412);
    return ioc_alts_BANG___delegate(state, cont_block, ports, p__26400);
  };
  ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = ioc_alts_BANG___delegate;
  return ioc_alts_BANG_;
}();
cljs.core.async.mix = function mix(out) {
  var cs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pause", "pause", -2095325672), null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), null], null), null);
  var attrs = cljs.core.conj.call(null, solo_modes, new cljs.core.Keyword(null, "solo", "solo", -316350075));
  var solo_mode = cljs.core.atom.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646));
  var change = cljs.core.async.chan.call(null);
  var changed = function(cs, solo_modes, attrs, solo_mode, change) {
    return function() {
      return cljs.core.async.put_BANG_.call(null, change, true);
    };
  }(cs, solo_modes, attrs, solo_mode, change);
  var pick = function(cs, solo_modes, attrs, solo_mode, change, changed) {
    return function(attr, chs) {
      return cljs.core.reduce_kv.call(null, function(cs, solo_modes, attrs, solo_mode, change, changed) {
        return function(ret, c, v) {
          if (cljs.core.truth_(attr.call(null, v))) {
            return cljs.core.conj.call(null, ret, c);
          } else {
            return ret;
          }
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed), cljs.core.PersistentHashSet.EMPTY, chs);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed);
  var calc_state = function(cs, solo_modes, attrs, solo_mode, change, changed, pick) {
    return function() {
      var chs = cljs.core.deref.call(null, cs);
      var mode = cljs.core.deref.call(null, solo_mode);
      var solos = pick.call(null, new cljs.core.Keyword(null, "solo", "solo", -316350075), chs);
      var pauses = pick.call(null, new cljs.core.Keyword(null, "pause", "pause", -2095325672), chs);
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "solos", "solos", 1441458643), solos, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309), pick.call(null, new cljs.core.Keyword(null, "mute", "mute", 1151223646), chs), new cljs.core.Keyword(null, "reads", "reads", -1215067361), cljs.core.conj.call(null, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "pause", "pause", -2095325672)) && !cljs.core.empty_QMARK_.call(null, solos) ? cljs.core.vec.call(null, 
      solos) : cljs.core.vec.call(null, cljs.core.remove.call(null, pauses, cljs.core.keys.call(null, chs))), change)], null);
    };
  }(cs, solo_modes, attrs, solo_mode, change, changed, pick);
  var m = function() {
    if (typeof cljs.core.async.t26532 !== "undefined") {
    } else {
      cljs.core.async.t26532 = function(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, meta26533) {
        this.change = change;
        this.mix = mix;
        this.solo_mode = solo_mode;
        this.pick = pick;
        this.cs = cs;
        this.calc_state = calc_state;
        this.out = out;
        this.changed = changed;
        this.solo_modes = solo_modes;
        this.attrs = attrs;
        this.meta26533 = meta26533;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cljs.core.async.t26532.cljs$lang$type = true;
      cljs.core.async.t26532.cljs$lang$ctorStr = "cljs.core.async/t26532";
      cljs.core.async.t26532.cljs$lang$ctorPrWriter = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
          return cljs.core._write.call(null, writer__4255__auto__, "cljs.core.async/t26532");
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t26532.prototype.cljs$core$async$Mix$ = true;
      cljs.core.async.t26532.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.assoc, ch, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t26532.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, ch) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.dissoc, ch);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t26532.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.reset_BANG_.call(null, self__.cs, cljs.core.PersistentArrayMap.EMPTY);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t26532.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, state_map) {
          var self__ = this;
          var ___$1 = this;
          cljs.core.swap_BANG_.call(null, self__.cs, cljs.core.partial.call(null, cljs.core.merge_with, cljs.core.merge), state_map);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t26532.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_, mode) {
          var self__ = this;
          var ___$1 = this;
          if (cljs.core.truth_(self__.solo_modes.call(null, mode))) {
          } else {
            throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1("mode must be one of: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.solo_modes)) + "\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "solo-modes", "solo-modes", 882180540, null), new cljs.core.Symbol(null, "mode", "mode", -2000032078, null)))));
          }
          cljs.core.reset_BANG_.call(null, self__.solo_mode, mode);
          return self__.changed.call(null);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t26532.prototype.cljs$core$async$Mux$ = true;
      cljs.core.async.t26532.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_) {
          var self__ = this;
          var ___$1 = this;
          return self__.out;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t26532.prototype.cljs$core$IMeta$_meta$arity$1 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_26534) {
          var self__ = this;
          var _26534__$1 = this;
          return self__.meta26533;
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.t26532.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function(_26534, meta26533__$1) {
          var self__ = this;
          var _26534__$1 = this;
          return new cljs.core.async.t26532(self__.change, self__.mix, self__.solo_mode, self__.pick, self__.cs, self__.calc_state, self__.out, self__.changed, self__.solo_modes, self__.attrs, meta26533__$1);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
      cljs.core.async.__GT_t26532 = function(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state) {
        return function __GT_t26532(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta26533) {
          return new cljs.core.async.t26532(change__$1, mix__$1, solo_mode__$1, pick__$1, cs__$1, calc_state__$1, out__$1, changed__$1, solo_modes__$1, attrs__$1, meta26533);
        };
      }(cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state);
    }
    return new cljs.core.async.t26532(change, mix, solo_mode, pick, cs, calc_state, out, changed, solo_modes, attrs, null);
  }();
  var c__5860__auto___26651 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto___26651, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
    return function() {
      var f__5861__auto__ = function() {
        var switch__5845__auto__ = function(c__5860__auto___26651, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function(state_26604) {
            var state_val_26605 = state_26604[1];
            if (state_val_26605 === 7) {
              var inst_26548 = state_26604[7];
              var inst_26553 = cljs.core.apply.call(null, cljs.core.hash_map, inst_26548);
              var state_26604__$1 = state_26604;
              var statearr_26606_26652 = state_26604__$1;
              statearr_26606_26652[2] = inst_26553;
              statearr_26606_26652[1] = 9;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_26605 === 20) {
                var inst_26563 = state_26604[8];
                var state_26604__$1 = state_26604;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_26604__$1, 23, out, inst_26563);
              } else {
                if (state_val_26605 === 1) {
                  var inst_26538 = state_26604[9];
                  var inst_26538__$1 = calc_state.call(null);
                  var inst_26539 = cljs.core.seq_QMARK_.call(null, inst_26538__$1);
                  var state_26604__$1 = function() {
                    var statearr_26607 = state_26604;
                    statearr_26607[9] = inst_26538__$1;
                    return statearr_26607;
                  }();
                  if (inst_26539) {
                    var statearr_26608_26653 = state_26604__$1;
                    statearr_26608_26653[1] = 2;
                  } else {
                    var statearr_26609_26654 = state_26604__$1;
                    statearr_26609_26654[1] = 3;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_26605 === 24) {
                    var inst_26556 = state_26604[10];
                    var inst_26548 = inst_26556;
                    var state_26604__$1 = function() {
                      var statearr_26610 = state_26604;
                      statearr_26610[7] = inst_26548;
                      return statearr_26610;
                    }();
                    var statearr_26611_26655 = state_26604__$1;
                    statearr_26611_26655[2] = null;
                    statearr_26611_26655[1] = 5;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_26605 === 4) {
                      var inst_26538 = state_26604[9];
                      var inst_26544 = state_26604[2];
                      var inst_26545 = cljs.core.get.call(null, inst_26544, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                      var inst_26546 = cljs.core.get.call(null, inst_26544, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                      var inst_26547 = cljs.core.get.call(null, inst_26544, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                      var inst_26548 = inst_26538;
                      var state_26604__$1 = function() {
                        var statearr_26612 = state_26604;
                        statearr_26612[11] = inst_26545;
                        statearr_26612[12] = inst_26547;
                        statearr_26612[7] = inst_26548;
                        statearr_26612[13] = inst_26546;
                        return statearr_26612;
                      }();
                      var statearr_26613_26656 = state_26604__$1;
                      statearr_26613_26656[2] = null;
                      statearr_26613_26656[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_26605 === 15) {
                        var state_26604__$1 = state_26604;
                        var statearr_26614_26657 = state_26604__$1;
                        statearr_26614_26657[2] = null;
                        statearr_26614_26657[1] = 16;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_26605 === 21) {
                          var inst_26556 = state_26604[10];
                          var inst_26548 = inst_26556;
                          var state_26604__$1 = function() {
                            var statearr_26615 = state_26604;
                            statearr_26615[7] = inst_26548;
                            return statearr_26615;
                          }();
                          var statearr_26616_26658 = state_26604__$1;
                          statearr_26616_26658[2] = null;
                          statearr_26616_26658[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_26605 === 13) {
                            var inst_26600 = state_26604[2];
                            var state_26604__$1 = state_26604;
                            var statearr_26617_26659 = state_26604__$1;
                            statearr_26617_26659[2] = inst_26600;
                            statearr_26617_26659[1] = 6;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_26605 === 22) {
                              var inst_26598 = state_26604[2];
                              var state_26604__$1 = state_26604;
                              var statearr_26618_26660 = state_26604__$1;
                              statearr_26618_26660[2] = inst_26598;
                              statearr_26618_26660[1] = 13;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_26605 === 6) {
                                var inst_26602 = state_26604[2];
                                var state_26604__$1 = state_26604;
                                return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_26604__$1, inst_26602);
                              } else {
                                if (state_val_26605 === 25) {
                                  var state_26604__$1 = state_26604;
                                  var statearr_26619_26661 = state_26604__$1;
                                  statearr_26619_26661[2] = null;
                                  statearr_26619_26661[1] = 26;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_26605 === 17) {
                                    var inst_26578 = state_26604[14];
                                    var state_26604__$1 = state_26604;
                                    var statearr_26620_26662 = state_26604__$1;
                                    statearr_26620_26662[2] = inst_26578;
                                    statearr_26620_26662[1] = 19;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_26605 === 3) {
                                      var inst_26538 = state_26604[9];
                                      var state_26604__$1 = state_26604;
                                      var statearr_26621_26663 = state_26604__$1;
                                      statearr_26621_26663[2] = inst_26538;
                                      statearr_26621_26663[1] = 4;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_26605 === 12) {
                                        var inst_26564 = state_26604[15];
                                        var inst_26559 = state_26604[16];
                                        var inst_26578 = state_26604[14];
                                        var inst_26578__$1 = inst_26559.call(null, inst_26564);
                                        var state_26604__$1 = function() {
                                          var statearr_26622 = state_26604;
                                          statearr_26622[14] = inst_26578__$1;
                                          return statearr_26622;
                                        }();
                                        if (cljs.core.truth_(inst_26578__$1)) {
                                          var statearr_26623_26664 = state_26604__$1;
                                          statearr_26623_26664[1] = 17;
                                        } else {
                                          var statearr_26624_26665 = state_26604__$1;
                                          statearr_26624_26665[1] = 18;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_26605 === 2) {
                                          var inst_26538 = state_26604[9];
                                          var inst_26541 = cljs.core.apply.call(null, cljs.core.hash_map, inst_26538);
                                          var state_26604__$1 = state_26604;
                                          var statearr_26625_26666 = state_26604__$1;
                                          statearr_26625_26666[2] = inst_26541;
                                          statearr_26625_26666[1] = 4;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_26605 === 23) {
                                            var inst_26589 = state_26604[2];
                                            var state_26604__$1 = state_26604;
                                            if (cljs.core.truth_(inst_26589)) {
                                              var statearr_26626_26667 = state_26604__$1;
                                              statearr_26626_26667[1] = 24;
                                            } else {
                                              var statearr_26627_26668 = state_26604__$1;
                                              statearr_26627_26668[1] = 25;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_26605 === 19) {
                                              var inst_26586 = state_26604[2];
                                              var state_26604__$1 = state_26604;
                                              if (cljs.core.truth_(inst_26586)) {
                                                var statearr_26628_26669 = state_26604__$1;
                                                statearr_26628_26669[1] = 20;
                                              } else {
                                                var statearr_26629_26670 = state_26604__$1;
                                                statearr_26629_26670[1] = 21;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_26605 === 11) {
                                                var inst_26563 = state_26604[8];
                                                var inst_26569 = inst_26563 == null;
                                                var state_26604__$1 = state_26604;
                                                if (cljs.core.truth_(inst_26569)) {
                                                  var statearr_26630_26671 = state_26604__$1;
                                                  statearr_26630_26671[1] = 14;
                                                } else {
                                                  var statearr_26631_26672 = state_26604__$1;
                                                  statearr_26631_26672[1] = 15;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_26605 === 9) {
                                                  var inst_26556 = state_26604[10];
                                                  var inst_26556__$1 = state_26604[2];
                                                  var inst_26557 = cljs.core.get.call(null, inst_26556__$1, new cljs.core.Keyword(null, "reads", "reads", -1215067361));
                                                  var inst_26558 = cljs.core.get.call(null, inst_26556__$1, new cljs.core.Keyword(null, "mutes", "mutes", 1068806309));
                                                  var inst_26559 = cljs.core.get.call(null, inst_26556__$1, new cljs.core.Keyword(null, "solos", "solos", 1441458643));
                                                  var state_26604__$1 = function() {
                                                    var statearr_26632 = state_26604;
                                                    statearr_26632[10] = inst_26556__$1;
                                                    statearr_26632[17] = inst_26558;
                                                    statearr_26632[16] = inst_26559;
                                                    return statearr_26632;
                                                  }();
                                                  return cljs.core.async.ioc_alts_BANG_.call(null, state_26604__$1, 10, inst_26557);
                                                } else {
                                                  if (state_val_26605 === 5) {
                                                    var inst_26548 = state_26604[7];
                                                    var inst_26551 = cljs.core.seq_QMARK_.call(null, inst_26548);
                                                    var state_26604__$1 = state_26604;
                                                    if (inst_26551) {
                                                      var statearr_26633_26673 = state_26604__$1;
                                                      statearr_26633_26673[1] = 7;
                                                    } else {
                                                      var statearr_26634_26674 = state_26604__$1;
                                                      statearr_26634_26674[1] = 8;
                                                    }
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_26605 === 14) {
                                                      var inst_26564 = state_26604[15];
                                                      var inst_26571 = cljs.core.swap_BANG_.call(null, cs, cljs.core.dissoc, inst_26564);
                                                      var state_26604__$1 = state_26604;
                                                      var statearr_26635_26675 = state_26604__$1;
                                                      statearr_26635_26675[2] = inst_26571;
                                                      statearr_26635_26675[1] = 16;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_26605 === 26) {
                                                        var inst_26594 = state_26604[2];
                                                        var state_26604__$1 = state_26604;
                                                        var statearr_26636_26676 = state_26604__$1;
                                                        statearr_26636_26676[2] = inst_26594;
                                                        statearr_26636_26676[1] = 22;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_26605 === 16) {
                                                          var inst_26574 = state_26604[2];
                                                          var inst_26575 = calc_state.call(null);
                                                          var inst_26548 = inst_26575;
                                                          var state_26604__$1 = function() {
                                                            var statearr_26637 = state_26604;
                                                            statearr_26637[18] = inst_26574;
                                                            statearr_26637[7] = inst_26548;
                                                            return statearr_26637;
                                                          }();
                                                          var statearr_26638_26677 = state_26604__$1;
                                                          statearr_26638_26677[2] = null;
                                                          statearr_26638_26677[1] = 5;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_26605 === 10) {
                                                            var inst_26564 = state_26604[15];
                                                            var inst_26563 = state_26604[8];
                                                            var inst_26562 = state_26604[2];
                                                            var inst_26563__$1 = cljs.core.nth.call(null, inst_26562, 0, null);
                                                            var inst_26564__$1 = cljs.core.nth.call(null, inst_26562, 1, null);
                                                            var inst_26565 = inst_26563__$1 == null;
                                                            var inst_26566 = cljs.core._EQ_.call(null, inst_26564__$1, change);
                                                            var inst_26567 = inst_26565 || inst_26566;
                                                            var state_26604__$1 = function() {
                                                              var statearr_26639 = state_26604;
                                                              statearr_26639[15] = inst_26564__$1;
                                                              statearr_26639[8] = inst_26563__$1;
                                                              return statearr_26639;
                                                            }();
                                                            if (cljs.core.truth_(inst_26567)) {
                                                              var statearr_26640_26678 = state_26604__$1;
                                                              statearr_26640_26678[1] = 11;
                                                            } else {
                                                              var statearr_26641_26679 = state_26604__$1;
                                                              statearr_26641_26679[1] = 12;
                                                            }
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_26605 === 18) {
                                                              var inst_26564 = state_26604[15];
                                                              var inst_26558 = state_26604[17];
                                                              var inst_26559 = state_26604[16];
                                                              var inst_26581 = cljs.core.empty_QMARK_.call(null, inst_26559);
                                                              var inst_26582 = inst_26558.call(null, inst_26564);
                                                              var inst_26583 = cljs.core.not.call(null, inst_26582);
                                                              var inst_26584 = inst_26581 && inst_26583;
                                                              var state_26604__$1 = state_26604;
                                                              var statearr_26642_26680 = state_26604__$1;
                                                              statearr_26642_26680[2] = inst_26584;
                                                              statearr_26642_26680[1] = 19;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_26605 === 8) {
                                                                var inst_26548 = state_26604[7];
                                                                var state_26604__$1 = state_26604;
                                                                var statearr_26643_26681 = state_26604__$1;
                                                                statearr_26643_26681[2] = inst_26548;
                                                                statearr_26643_26681[1] = 9;
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5860__auto___26651, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
        return function(switch__5845__auto__, c__5860__auto___26651, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m) {
          return function() {
            var state_machine__5846__auto__ = null;
            var state_machine__5846__auto____0 = function() {
              var statearr_26647 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_26647[0] = state_machine__5846__auto__;
              statearr_26647[1] = 1;
              return statearr_26647;
            };
            var state_machine__5846__auto____1 = function(state_26604) {
              while (true) {
                var ret_value__5847__auto__ = function() {
                  try {
                    while (true) {
                      var result__5848__auto__ = switch__5845__auto__.call(null, state_26604);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__5848__auto__;
                      }
                      break;
                    }
                  } catch (e26648) {
                    if (e26648 instanceof Object) {
                      var ex__5849__auto__ = e26648;
                      var statearr_26649_26682 = state_26604;
                      statearr_26649_26682[5] = ex__5849__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_26604);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e26648;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__26683 = state_26604;
                  state_26604 = G__26683;
                  continue;
                } else {
                  return ret_value__5847__auto__;
                }
                break;
              }
            };
            state_machine__5846__auto__ = function(state_26604) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5846__auto____0.call(this);
                case 1:
                  return state_machine__5846__auto____1.call(this, state_26604);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
            return state_machine__5846__auto__;
          }();
        }(switch__5845__auto__, c__5860__auto___26651, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m);
      }();
      var state__5862__auto__ = function() {
        var statearr_26650 = f__5861__auto__.call(null);
        statearr_26650[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___26651;
        return statearr_26650;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
    };
  }(c__5860__auto___26651, cs, solo_modes, attrs, solo_mode, change, changed, pick, calc_state, m));
  return m;
};
cljs.core.async.admix = function admix(mix, ch) {
  return cljs.core.async.admix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix = function unmix(mix, ch) {
  return cljs.core.async.unmix_STAR_.call(null, mix, ch);
};
cljs.core.async.unmix_all = function unmix_all(mix) {
  return cljs.core.async.unmix_all_STAR_.call(null, mix);
};
cljs.core.async.toggle = function toggle(mix, state_map) {
  return cljs.core.async.toggle_STAR_.call(null, mix, state_map);
};
cljs.core.async.solo_mode = function solo_mode(mix, mode) {
  return cljs.core.async.solo_mode_STAR_.call(null, mix, mode);
};
cljs.core.async.Pub = function() {
  var obj26685 = {};
  return obj26685;
}();
cljs.core.async.sub_STAR_ = function sub_STAR_(p, v, ch, close_QMARK_) {
  if (function() {
    var and__3665__auto__ = p;
    if (and__3665__auto__) {
      return p.cljs$core$async$Pub$sub_STAR_$arity$4;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$sub_STAR_$arity$4(p, v, ch, close_QMARK_);
  } else {
    var x__4314__auto__ = p == null ? null : p;
    return function() {
      var or__3677__auto__ = cljs.core.async.sub_STAR_[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core.async.sub_STAR_["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.sub*", p);
        }
      }
    }().call(null, p, v, ch, close_QMARK_);
  }
};
cljs.core.async.unsub_STAR_ = function unsub_STAR_(p, v, ch) {
  if (function() {
    var and__3665__auto__ = p;
    if (and__3665__auto__) {
      return p.cljs$core$async$Pub$unsub_STAR_$arity$3;
    } else {
      return and__3665__auto__;
    }
  }()) {
    return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p, v, ch);
  } else {
    var x__4314__auto__ = p == null ? null : p;
    return function() {
      var or__3677__auto__ = cljs.core.async.unsub_STAR_[goog.typeOf(x__4314__auto__)];
      if (or__3677__auto__) {
        return or__3677__auto__;
      } else {
        var or__3677__auto____$1 = cljs.core.async.unsub_STAR_["_"];
        if (or__3677__auto____$1) {
          return or__3677__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "Pub.unsub*", p);
        }
      }
    }().call(null, p, v, ch);
  }
};
cljs.core.async.unsub_all_STAR_ = function() {
  var unsub_all_STAR_ = null;
  var unsub_all_STAR___1 = function(p) {
    if (function() {
      var and__3665__auto__ = p;
      if (and__3665__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1;
      } else {
        return and__3665__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
    } else {
      var x__4314__auto__ = p == null ? null : p;
      return function() {
        var or__3677__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4314__auto__)];
        if (or__3677__auto__) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3677__auto____$1) {
            return or__3677__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p);
    }
  };
  var unsub_all_STAR___2 = function(p, v) {
    if (function() {
      var and__3665__auto__ = p;
      if (and__3665__auto__) {
        return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2;
      } else {
        return and__3665__auto__;
      }
    }()) {
      return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p, v);
    } else {
      var x__4314__auto__ = p == null ? null : p;
      return function() {
        var or__3677__auto__ = cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4314__auto__)];
        if (or__3677__auto__) {
          return or__3677__auto__;
        } else {
          var or__3677__auto____$1 = cljs.core.async.unsub_all_STAR_["_"];
          if (or__3677__auto____$1) {
            return or__3677__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "Pub.unsub-all*", p);
          }
        }
      }().call(null, p, v);
    }
  };
  unsub_all_STAR_ = function(p, v) {
    switch(arguments.length) {
      case 1:
        return unsub_all_STAR___1.call(this, p);
      case 2:
        return unsub_all_STAR___2.call(this, p, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = unsub_all_STAR___1;
  unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = unsub_all_STAR___2;
  return unsub_all_STAR_;
}();
cljs.core.async.pub = function() {
  var pub = null;
  var pub__2 = function(ch, topic_fn) {
    return pub.call(null, ch, topic_fn, cljs.core.constantly.call(null, null));
  };
  var pub__3 = function(ch, topic_fn, buf_fn) {
    var mults = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var ensure_mult = function(mults) {
      return function(topic) {
        var or__3677__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mults), topic);
        if (cljs.core.truth_(or__3677__auto__)) {
          return or__3677__auto__;
        } else {
          return cljs.core.get.call(null, cljs.core.swap_BANG_.call(null, mults, function(or__3677__auto__, mults) {
            return function(p1__26686_SHARP_) {
              if (cljs.core.truth_(p1__26686_SHARP_.call(null, topic))) {
                return p1__26686_SHARP_;
              } else {
                return cljs.core.assoc.call(null, p1__26686_SHARP_, topic, cljs.core.async.mult.call(null, cljs.core.async.chan.call(null, buf_fn.call(null, topic))));
              }
            };
          }(or__3677__auto__, mults)), topic);
        }
      };
    }(mults);
    var p = function() {
      if (typeof cljs.core.async.t26809 !== "undefined") {
      } else {
        cljs.core.async.t26809 = function(ensure_mult, mults, buf_fn, topic_fn, ch, pub, meta26810) {
          this.ensure_mult = ensure_mult;
          this.mults = mults;
          this.buf_fn = buf_fn;
          this.topic_fn = topic_fn;
          this.ch = ch;
          this.pub = pub;
          this.meta26810 = meta26810;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393216;
        };
        cljs.core.async.t26809.cljs$lang$type = true;
        cljs.core.async.t26809.cljs$lang$ctorStr = "cljs.core.async/t26809";
        cljs.core.async.t26809.cljs$lang$ctorPrWriter = function(mults, ensure_mult) {
          return function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
            return cljs.core._write.call(null, writer__4255__auto__, "cljs.core.async/t26809");
          };
        }(mults, ensure_mult);
        cljs.core.async.t26809.prototype.cljs$core$async$Pub$ = true;
        cljs.core.async.t26809.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2, close_QMARK_) {
            var self__ = this;
            var p__$1 = this;
            var m = self__.ensure_mult.call(null, topic);
            return cljs.core.async.tap.call(null, m, ch__$2, close_QMARK_);
          };
        }(mults, ensure_mult);
        cljs.core.async.t26809.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = function(mults, ensure_mult) {
          return function(p, topic, ch__$2) {
            var self__ = this;
            var p__$1 = this;
            var temp__4222__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, self__.mults), topic);
            if (cljs.core.truth_(temp__4222__auto__)) {
              var m = temp__4222__auto__;
              return cljs.core.async.untap.call(null, m, ch__$2);
            } else {
              return null;
            }
          };
        }(mults, ensure_mult);
        cljs.core.async.t26809.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.reset_BANG_.call(null, self__.mults, cljs.core.PersistentArrayMap.EMPTY);
          };
        }(mults, ensure_mult);
        cljs.core.async.t26809.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = function(mults, ensure_mult) {
          return function(_, topic) {
            var self__ = this;
            var ___$1 = this;
            return cljs.core.swap_BANG_.call(null, self__.mults, cljs.core.dissoc, topic);
          };
        }(mults, ensure_mult);
        cljs.core.async.t26809.prototype.cljs$core$async$Mux$ = true;
        cljs.core.async.t26809.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = function(mults, ensure_mult) {
          return function(_) {
            var self__ = this;
            var ___$1 = this;
            return self__.ch;
          };
        }(mults, ensure_mult);
        cljs.core.async.t26809.prototype.cljs$core$IMeta$_meta$arity$1 = function(mults, ensure_mult) {
          return function(_26811) {
            var self__ = this;
            var _26811__$1 = this;
            return self__.meta26810;
          };
        }(mults, ensure_mult);
        cljs.core.async.t26809.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(mults, ensure_mult) {
          return function(_26811, meta26810__$1) {
            var self__ = this;
            var _26811__$1 = this;
            return new cljs.core.async.t26809(self__.ensure_mult, self__.mults, self__.buf_fn, self__.topic_fn, self__.ch, self__.pub, meta26810__$1);
          };
        }(mults, ensure_mult);
        cljs.core.async.__GT_t26809 = function(mults, ensure_mult) {
          return function __GT_t26809(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta26810) {
            return new cljs.core.async.t26809(ensure_mult__$1, mults__$1, buf_fn__$1, topic_fn__$1, ch__$1, pub__$1, meta26810);
          };
        }(mults, ensure_mult);
      }
      return new cljs.core.async.t26809(ensure_mult, mults, buf_fn, topic_fn, ch, pub, null);
    }();
    var c__5860__auto___26931 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto___26931, mults, ensure_mult, p) {
      return function() {
        var f__5861__auto__ = function() {
          var switch__5845__auto__ = function(c__5860__auto___26931, mults, ensure_mult, p) {
            return function(state_26883) {
              var state_val_26884 = state_26883[1];
              if (state_val_26884 === 7) {
                var inst_26879 = state_26883[2];
                var state_26883__$1 = state_26883;
                var statearr_26885_26932 = state_26883__$1;
                statearr_26885_26932[2] = inst_26879;
                statearr_26885_26932[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_26884 === 20) {
                  var state_26883__$1 = state_26883;
                  var statearr_26886_26933 = state_26883__$1;
                  statearr_26886_26933[2] = null;
                  statearr_26886_26933[1] = 21;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_26884 === 1) {
                    var state_26883__$1 = state_26883;
                    var statearr_26887_26934 = state_26883__$1;
                    statearr_26887_26934[2] = null;
                    statearr_26887_26934[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_26884 === 24) {
                      var inst_26862 = state_26883[7];
                      var inst_26871 = cljs.core.swap_BANG_.call(null, mults, cljs.core.dissoc, inst_26862);
                      var state_26883__$1 = state_26883;
                      var statearr_26888_26935 = state_26883__$1;
                      statearr_26888_26935[2] = inst_26871;
                      statearr_26888_26935[1] = 25;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_26884 === 4) {
                        var inst_26814 = state_26883[8];
                        var inst_26814__$1 = state_26883[2];
                        var inst_26815 = inst_26814__$1 == null;
                        var state_26883__$1 = function() {
                          var statearr_26889 = state_26883;
                          statearr_26889[8] = inst_26814__$1;
                          return statearr_26889;
                        }();
                        if (cljs.core.truth_(inst_26815)) {
                          var statearr_26890_26936 = state_26883__$1;
                          statearr_26890_26936[1] = 5;
                        } else {
                          var statearr_26891_26937 = state_26883__$1;
                          statearr_26891_26937[1] = 6;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_26884 === 15) {
                          var inst_26856 = state_26883[2];
                          var state_26883__$1 = state_26883;
                          var statearr_26892_26938 = state_26883__$1;
                          statearr_26892_26938[2] = inst_26856;
                          statearr_26892_26938[1] = 12;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_26884 === 21) {
                            var inst_26876 = state_26883[2];
                            var state_26883__$1 = function() {
                              var statearr_26893 = state_26883;
                              statearr_26893[9] = inst_26876;
                              return statearr_26893;
                            }();
                            var statearr_26894_26939 = state_26883__$1;
                            statearr_26894_26939[2] = null;
                            statearr_26894_26939[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_26884 === 13) {
                              var inst_26838 = state_26883[10];
                              var inst_26840 = cljs.core.chunked_seq_QMARK_.call(null, inst_26838);
                              var state_26883__$1 = state_26883;
                              if (inst_26840) {
                                var statearr_26895_26940 = state_26883__$1;
                                statearr_26895_26940[1] = 16;
                              } else {
                                var statearr_26896_26941 = state_26883__$1;
                                statearr_26896_26941[1] = 17;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_26884 === 22) {
                                var inst_26868 = state_26883[2];
                                var state_26883__$1 = state_26883;
                                if (cljs.core.truth_(inst_26868)) {
                                  var statearr_26897_26942 = state_26883__$1;
                                  statearr_26897_26942[1] = 23;
                                } else {
                                  var statearr_26898_26943 = state_26883__$1;
                                  statearr_26898_26943[1] = 24;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_26884 === 6) {
                                  var inst_26862 = state_26883[7];
                                  var inst_26814 = state_26883[8];
                                  var inst_26864 = state_26883[11];
                                  var inst_26862__$1 = topic_fn.call(null, inst_26814);
                                  var inst_26863 = cljs.core.deref.call(null, mults);
                                  var inst_26864__$1 = cljs.core.get.call(null, inst_26863, inst_26862__$1);
                                  var state_26883__$1 = function() {
                                    var statearr_26899 = state_26883;
                                    statearr_26899[7] = inst_26862__$1;
                                    statearr_26899[11] = inst_26864__$1;
                                    return statearr_26899;
                                  }();
                                  if (cljs.core.truth_(inst_26864__$1)) {
                                    var statearr_26900_26944 = state_26883__$1;
                                    statearr_26900_26944[1] = 19;
                                  } else {
                                    var statearr_26901_26945 = state_26883__$1;
                                    statearr_26901_26945[1] = 20;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_26884 === 25) {
                                    var inst_26873 = state_26883[2];
                                    var state_26883__$1 = state_26883;
                                    var statearr_26902_26946 = state_26883__$1;
                                    statearr_26902_26946[2] = inst_26873;
                                    statearr_26902_26946[1] = 21;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_26884 === 17) {
                                      var inst_26838 = state_26883[10];
                                      var inst_26847 = cljs.core.first.call(null, inst_26838);
                                      var inst_26848 = cljs.core.async.muxch_STAR_.call(null, inst_26847);
                                      var inst_26849 = cljs.core.async.close_BANG_.call(null, inst_26848);
                                      var inst_26850 = cljs.core.next.call(null, inst_26838);
                                      var inst_26824 = inst_26850;
                                      var inst_26825 = null;
                                      var inst_26826 = 0;
                                      var inst_26827 = 0;
                                      var state_26883__$1 = function() {
                                        var statearr_26903 = state_26883;
                                        statearr_26903[12] = inst_26849;
                                        statearr_26903[13] = inst_26825;
                                        statearr_26903[14] = inst_26827;
                                        statearr_26903[15] = inst_26826;
                                        statearr_26903[16] = inst_26824;
                                        return statearr_26903;
                                      }();
                                      var statearr_26904_26947 = state_26883__$1;
                                      statearr_26904_26947[2] = null;
                                      statearr_26904_26947[1] = 8;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_26884 === 3) {
                                        var inst_26881 = state_26883[2];
                                        var state_26883__$1 = state_26883;
                                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_26883__$1, inst_26881);
                                      } else {
                                        if (state_val_26884 === 12) {
                                          var inst_26858 = state_26883[2];
                                          var state_26883__$1 = state_26883;
                                          var statearr_26905_26948 = state_26883__$1;
                                          statearr_26905_26948[2] = inst_26858;
                                          statearr_26905_26948[1] = 9;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_26884 === 2) {
                                            var state_26883__$1 = state_26883;
                                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_26883__$1, 4, ch);
                                          } else {
                                            if (state_val_26884 === 23) {
                                              var state_26883__$1 = state_26883;
                                              var statearr_26906_26949 = state_26883__$1;
                                              statearr_26906_26949[2] = null;
                                              statearr_26906_26949[1] = 25;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_26884 === 19) {
                                                var inst_26814 = state_26883[8];
                                                var inst_26864 = state_26883[11];
                                                var inst_26866 = cljs.core.async.muxch_STAR_.call(null, inst_26864);
                                                var state_26883__$1 = state_26883;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_26883__$1, 22, inst_26866, inst_26814);
                                              } else {
                                                if (state_val_26884 === 11) {
                                                  var inst_26838 = state_26883[10];
                                                  var inst_26824 = state_26883[16];
                                                  var inst_26838__$1 = cljs.core.seq.call(null, inst_26824);
                                                  var state_26883__$1 = function() {
                                                    var statearr_26907 = state_26883;
                                                    statearr_26907[10] = inst_26838__$1;
                                                    return statearr_26907;
                                                  }();
                                                  if (inst_26838__$1) {
                                                    var statearr_26908_26950 = state_26883__$1;
                                                    statearr_26908_26950[1] = 13;
                                                  } else {
                                                    var statearr_26909_26951 = state_26883__$1;
                                                    statearr_26909_26951[1] = 14;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_26884 === 9) {
                                                    var inst_26860 = state_26883[2];
                                                    var state_26883__$1 = state_26883;
                                                    var statearr_26910_26952 = state_26883__$1;
                                                    statearr_26910_26952[2] = inst_26860;
                                                    statearr_26910_26952[1] = 7;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_26884 === 5) {
                                                      var inst_26821 = cljs.core.deref.call(null, mults);
                                                      var inst_26822 = cljs.core.vals.call(null, inst_26821);
                                                      var inst_26823 = cljs.core.seq.call(null, inst_26822);
                                                      var inst_26824 = inst_26823;
                                                      var inst_26825 = null;
                                                      var inst_26826 = 0;
                                                      var inst_26827 = 0;
                                                      var state_26883__$1 = function() {
                                                        var statearr_26911 = state_26883;
                                                        statearr_26911[13] = inst_26825;
                                                        statearr_26911[14] = inst_26827;
                                                        statearr_26911[15] = inst_26826;
                                                        statearr_26911[16] = inst_26824;
                                                        return statearr_26911;
                                                      }();
                                                      var statearr_26912_26953 = state_26883__$1;
                                                      statearr_26912_26953[2] = null;
                                                      statearr_26912_26953[1] = 8;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_26884 === 14) {
                                                        var state_26883__$1 = state_26883;
                                                        var statearr_26916_26954 = state_26883__$1;
                                                        statearr_26916_26954[2] = null;
                                                        statearr_26916_26954[1] = 15;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_26884 === 16) {
                                                          var inst_26838 = state_26883[10];
                                                          var inst_26842 = cljs.core.chunk_first.call(null, inst_26838);
                                                          var inst_26843 = cljs.core.chunk_rest.call(null, inst_26838);
                                                          var inst_26844 = cljs.core.count.call(null, inst_26842);
                                                          var inst_26824 = inst_26843;
                                                          var inst_26825 = inst_26842;
                                                          var inst_26826 = inst_26844;
                                                          var inst_26827 = 0;
                                                          var state_26883__$1 = function() {
                                                            var statearr_26917 = state_26883;
                                                            statearr_26917[13] = inst_26825;
                                                            statearr_26917[14] = inst_26827;
                                                            statearr_26917[15] = inst_26826;
                                                            statearr_26917[16] = inst_26824;
                                                            return statearr_26917;
                                                          }();
                                                          var statearr_26918_26955 = state_26883__$1;
                                                          statearr_26918_26955[2] = null;
                                                          statearr_26918_26955[1] = 8;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_26884 === 10) {
                                                            var inst_26825 = state_26883[13];
                                                            var inst_26827 = state_26883[14];
                                                            var inst_26826 = state_26883[15];
                                                            var inst_26824 = state_26883[16];
                                                            var inst_26832 = cljs.core._nth.call(null, inst_26825, inst_26827);
                                                            var inst_26833 = cljs.core.async.muxch_STAR_.call(null, inst_26832);
                                                            var inst_26834 = cljs.core.async.close_BANG_.call(null, inst_26833);
                                                            var inst_26835 = inst_26827 + 1;
                                                            var tmp26913 = inst_26825;
                                                            var tmp26914 = inst_26826;
                                                            var tmp26915 = inst_26824;
                                                            var inst_26824__$1 = tmp26915;
                                                            var inst_26825__$1 = tmp26913;
                                                            var inst_26826__$1 = tmp26914;
                                                            var inst_26827__$1 = inst_26835;
                                                            var state_26883__$1 = function() {
                                                              var statearr_26919 = state_26883;
                                                              statearr_26919[17] = inst_26834;
                                                              statearr_26919[13] = inst_26825__$1;
                                                              statearr_26919[14] = inst_26827__$1;
                                                              statearr_26919[15] = inst_26826__$1;
                                                              statearr_26919[16] = inst_26824__$1;
                                                              return statearr_26919;
                                                            }();
                                                            var statearr_26920_26956 = state_26883__$1;
                                                            statearr_26920_26956[2] = null;
                                                            statearr_26920_26956[1] = 8;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_26884 === 18) {
                                                              var inst_26853 = state_26883[2];
                                                              var state_26883__$1 = state_26883;
                                                              var statearr_26921_26957 = state_26883__$1;
                                                              statearr_26921_26957[2] = inst_26853;
                                                              statearr_26921_26957[1] = 15;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_26884 === 8) {
                                                                var inst_26827 = state_26883[14];
                                                                var inst_26826 = state_26883[15];
                                                                var inst_26829 = inst_26827 < inst_26826;
                                                                var inst_26830 = inst_26829;
                                                                var state_26883__$1 = state_26883;
                                                                if (cljs.core.truth_(inst_26830)) {
                                                                  var statearr_26922_26958 = state_26883__$1;
                                                                  statearr_26922_26958[1] = 10;
                                                                } else {
                                                                  var statearr_26923_26959 = state_26883__$1;
                                                                  statearr_26923_26959[1] = 11;
                                                                }
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                return null;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5860__auto___26931, mults, ensure_mult, p);
          return function(switch__5845__auto__, c__5860__auto___26931, mults, ensure_mult, p) {
            return function() {
              var state_machine__5846__auto__ = null;
              var state_machine__5846__auto____0 = function() {
                var statearr_26927 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_26927[0] = state_machine__5846__auto__;
                statearr_26927[1] = 1;
                return statearr_26927;
              };
              var state_machine__5846__auto____1 = function(state_26883) {
                while (true) {
                  var ret_value__5847__auto__ = function() {
                    try {
                      while (true) {
                        var result__5848__auto__ = switch__5845__auto__.call(null, state_26883);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__5848__auto__;
                        }
                        break;
                      }
                    } catch (e26928) {
                      if (e26928 instanceof Object) {
                        var ex__5849__auto__ = e26928;
                        var statearr_26929_26960 = state_26883;
                        statearr_26929_26960[5] = ex__5849__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_26883);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e26928;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__26961 = state_26883;
                    state_26883 = G__26961;
                    continue;
                  } else {
                    return ret_value__5847__auto__;
                  }
                  break;
                }
              };
              state_machine__5846__auto__ = function(state_26883) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5846__auto____0.call(this);
                  case 1:
                    return state_machine__5846__auto____1.call(this, state_26883);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
              return state_machine__5846__auto__;
            }();
          }(switch__5845__auto__, c__5860__auto___26931, mults, ensure_mult, p);
        }();
        var state__5862__auto__ = function() {
          var statearr_26930 = f__5861__auto__.call(null);
          statearr_26930[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___26931;
          return statearr_26930;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
      };
    }(c__5860__auto___26931, mults, ensure_mult, p));
    return p;
  };
  pub = function(ch, topic_fn, buf_fn) {
    switch(arguments.length) {
      case 2:
        return pub__2.call(this, ch, topic_fn);
      case 3:
        return pub__3.call(this, ch, topic_fn, buf_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  pub.cljs$core$IFn$_invoke$arity$2 = pub__2;
  pub.cljs$core$IFn$_invoke$arity$3 = pub__3;
  return pub;
}();
cljs.core.async.sub = function() {
  var sub = null;
  var sub__3 = function(p, topic, ch) {
    return sub.call(null, p, topic, ch, true);
  };
  var sub__4 = function(p, topic, ch, close_QMARK_) {
    return cljs.core.async.sub_STAR_.call(null, p, topic, ch, close_QMARK_);
  };
  sub = function(p, topic, ch, close_QMARK_) {
    switch(arguments.length) {
      case 3:
        return sub__3.call(this, p, topic, ch);
      case 4:
        return sub__4.call(this, p, topic, ch, close_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sub.cljs$core$IFn$_invoke$arity$3 = sub__3;
  sub.cljs$core$IFn$_invoke$arity$4 = sub__4;
  return sub;
}();
cljs.core.async.unsub = function unsub(p, topic, ch) {
  return cljs.core.async.unsub_STAR_.call(null, p, topic, ch);
};
cljs.core.async.unsub_all = function() {
  var unsub_all = null;
  var unsub_all__1 = function(p) {
    return cljs.core.async.unsub_all_STAR_.call(null, p);
  };
  var unsub_all__2 = function(p, topic) {
    return cljs.core.async.unsub_all_STAR_.call(null, p, topic);
  };
  unsub_all = function(p, topic) {
    switch(arguments.length) {
      case 1:
        return unsub_all__1.call(this, p);
      case 2:
        return unsub_all__2.call(this, p, topic);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unsub_all.cljs$core$IFn$_invoke$arity$1 = unsub_all__1;
  unsub_all.cljs$core$IFn$_invoke$arity$2 = unsub_all__2;
  return unsub_all;
}();
cljs.core.async.map = function() {
  var map = null;
  var map__2 = function(f, chs) {
    return map.call(null, f, chs, null);
  };
  var map__3 = function(f, chs, buf_or_n) {
    var chs__$1 = cljs.core.vec.call(null, chs);
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var cnt = cljs.core.count.call(null, chs__$1);
    var rets = cljs.core.object_array.call(null, cnt);
    var dchan = cljs.core.async.chan.call(null, 1);
    var dctr = cljs.core.atom.call(null, null);
    var done = cljs.core.mapv.call(null, function(chs__$1, out, cnt, rets, dchan, dctr) {
      return function(i) {
        return function(chs__$1, out, cnt, rets, dchan, dctr) {
          return function(ret) {
            rets[i] = ret;
            if (cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec) === 0) {
              return cljs.core.async.put_BANG_.call(null, dchan, rets.slice(0));
            } else {
              return null;
            }
          };
        }(chs__$1, out, cnt, rets, dchan, dctr);
      };
    }(chs__$1, out, cnt, rets, dchan, dctr), cljs.core.range.call(null, cnt));
    var c__5860__auto___27098 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto___27098, chs__$1, out, cnt, rets, dchan, dctr, done) {
      return function() {
        var f__5861__auto__ = function() {
          var switch__5845__auto__ = function(c__5860__auto___27098, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function(state_27068) {
              var state_val_27069 = state_27068[1];
              if (state_val_27069 === 7) {
                var state_27068__$1 = state_27068;
                var statearr_27070_27099 = state_27068__$1;
                statearr_27070_27099[2] = null;
                statearr_27070_27099[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_27069 === 1) {
                  var state_27068__$1 = state_27068;
                  var statearr_27071_27100 = state_27068__$1;
                  statearr_27071_27100[2] = null;
                  statearr_27071_27100[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_27069 === 4) {
                    var inst_27032 = state_27068[7];
                    var inst_27034 = inst_27032 < cnt;
                    var state_27068__$1 = state_27068;
                    if (cljs.core.truth_(inst_27034)) {
                      var statearr_27072_27101 = state_27068__$1;
                      statearr_27072_27101[1] = 6;
                    } else {
                      var statearr_27073_27102 = state_27068__$1;
                      statearr_27073_27102[1] = 7;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_27069 === 15) {
                      var inst_27064 = state_27068[2];
                      var state_27068__$1 = state_27068;
                      var statearr_27074_27103 = state_27068__$1;
                      statearr_27074_27103[2] = inst_27064;
                      statearr_27074_27103[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_27069 === 13) {
                        var inst_27057 = cljs.core.async.close_BANG_.call(null, out);
                        var state_27068__$1 = state_27068;
                        var statearr_27075_27104 = state_27068__$1;
                        statearr_27075_27104[2] = inst_27057;
                        statearr_27075_27104[1] = 15;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_27069 === 6) {
                          var state_27068__$1 = state_27068;
                          var statearr_27076_27105 = state_27068__$1;
                          statearr_27076_27105[2] = null;
                          statearr_27076_27105[1] = 11;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_27069 === 3) {
                            var inst_27066 = state_27068[2];
                            var state_27068__$1 = state_27068;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_27068__$1, inst_27066);
                          } else {
                            if (state_val_27069 === 12) {
                              var inst_27054 = state_27068[8];
                              var inst_27054__$1 = state_27068[2];
                              var inst_27055 = cljs.core.some.call(null, cljs.core.nil_QMARK_, inst_27054__$1);
                              var state_27068__$1 = function() {
                                var statearr_27077 = state_27068;
                                statearr_27077[8] = inst_27054__$1;
                                return statearr_27077;
                              }();
                              if (cljs.core.truth_(inst_27055)) {
                                var statearr_27078_27106 = state_27068__$1;
                                statearr_27078_27106[1] = 13;
                              } else {
                                var statearr_27079_27107 = state_27068__$1;
                                statearr_27079_27107[1] = 14;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_27069 === 2) {
                                var inst_27031 = cljs.core.reset_BANG_.call(null, dctr, cnt);
                                var inst_27032 = 0;
                                var state_27068__$1 = function() {
                                  var statearr_27080 = state_27068;
                                  statearr_27080[7] = inst_27032;
                                  statearr_27080[9] = inst_27031;
                                  return statearr_27080;
                                }();
                                var statearr_27081_27108 = state_27068__$1;
                                statearr_27081_27108[2] = null;
                                statearr_27081_27108[1] = 4;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_27069 === 11) {
                                  var inst_27032 = state_27068[7];
                                  var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_27068, 10, Object, null, 9);
                                  var inst_27041 = chs__$1.call(null, inst_27032);
                                  var inst_27042 = done.call(null, inst_27032);
                                  var inst_27043 = cljs.core.async.take_BANG_.call(null, inst_27041, inst_27042);
                                  var state_27068__$1 = state_27068;
                                  var statearr_27082_27109 = state_27068__$1;
                                  statearr_27082_27109[2] = inst_27043;
                                  cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_27068__$1);
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_27069 === 9) {
                                    var inst_27032 = state_27068[7];
                                    var inst_27045 = state_27068[2];
                                    var inst_27046 = inst_27032 + 1;
                                    var inst_27032__$1 = inst_27046;
                                    var state_27068__$1 = function() {
                                      var statearr_27083 = state_27068;
                                      statearr_27083[7] = inst_27032__$1;
                                      statearr_27083[10] = inst_27045;
                                      return statearr_27083;
                                    }();
                                    var statearr_27084_27110 = state_27068__$1;
                                    statearr_27084_27110[2] = null;
                                    statearr_27084_27110[1] = 4;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_27069 === 5) {
                                      var inst_27052 = state_27068[2];
                                      var state_27068__$1 = function() {
                                        var statearr_27085 = state_27068;
                                        statearr_27085[11] = inst_27052;
                                        return statearr_27085;
                                      }();
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_27068__$1, 12, dchan);
                                    } else {
                                      if (state_val_27069 === 14) {
                                        var inst_27054 = state_27068[8];
                                        var inst_27059 = cljs.core.apply.call(null, f, inst_27054);
                                        var state_27068__$1 = state_27068;
                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_27068__$1, 16, out, inst_27059);
                                      } else {
                                        if (state_val_27069 === 16) {
                                          var inst_27061 = state_27068[2];
                                          var state_27068__$1 = function() {
                                            var statearr_27086 = state_27068;
                                            statearr_27086[12] = inst_27061;
                                            return statearr_27086;
                                          }();
                                          var statearr_27087_27111 = state_27068__$1;
                                          statearr_27087_27111[2] = null;
                                          statearr_27087_27111[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_27069 === 10) {
                                            var inst_27036 = state_27068[2];
                                            var inst_27037 = cljs.core.swap_BANG_.call(null, dctr, cljs.core.dec);
                                            var state_27068__$1 = function() {
                                              var statearr_27088 = state_27068;
                                              statearr_27088[13] = inst_27036;
                                              return statearr_27088;
                                            }();
                                            var statearr_27089_27112 = state_27068__$1;
                                            statearr_27089_27112[2] = inst_27037;
                                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_27068__$1);
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_27069 === 8) {
                                              var inst_27050 = state_27068[2];
                                              var state_27068__$1 = state_27068;
                                              var statearr_27090_27113 = state_27068__$1;
                                              statearr_27090_27113[2] = inst_27050;
                                              statearr_27090_27113[1] = 5;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              return null;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5860__auto___27098, chs__$1, out, cnt, rets, dchan, dctr, done);
          return function(switch__5845__auto__, c__5860__auto___27098, chs__$1, out, cnt, rets, dchan, dctr, done) {
            return function() {
              var state_machine__5846__auto__ = null;
              var state_machine__5846__auto____0 = function() {
                var statearr_27094 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_27094[0] = state_machine__5846__auto__;
                statearr_27094[1] = 1;
                return statearr_27094;
              };
              var state_machine__5846__auto____1 = function(state_27068) {
                while (true) {
                  var ret_value__5847__auto__ = function() {
                    try {
                      while (true) {
                        var result__5848__auto__ = switch__5845__auto__.call(null, state_27068);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__5848__auto__;
                        }
                        break;
                      }
                    } catch (e27095) {
                      if (e27095 instanceof Object) {
                        var ex__5849__auto__ = e27095;
                        var statearr_27096_27114 = state_27068;
                        statearr_27096_27114[5] = ex__5849__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_27068);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e27095;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__27115 = state_27068;
                    state_27068 = G__27115;
                    continue;
                  } else {
                    return ret_value__5847__auto__;
                  }
                  break;
                }
              };
              state_machine__5846__auto__ = function(state_27068) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5846__auto____0.call(this);
                  case 1:
                    return state_machine__5846__auto____1.call(this, state_27068);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
              return state_machine__5846__auto__;
            }();
          }(switch__5845__auto__, c__5860__auto___27098, chs__$1, out, cnt, rets, dchan, dctr, done);
        }();
        var state__5862__auto__ = function() {
          var statearr_27097 = f__5861__auto__.call(null);
          statearr_27097[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___27098;
          return statearr_27097;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
      };
    }(c__5860__auto___27098, chs__$1, out, cnt, rets, dchan, dctr, done));
    return out;
  };
  map = function(f, chs, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, chs);
      case 3:
        return map__3.call(this, f, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  return map;
}();
cljs.core.async.merge = function() {
  var merge = null;
  var merge__1 = function(chs) {
    return merge.call(null, chs, null);
  };
  var merge__2 = function(chs, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5860__auto___27223 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto___27223, out) {
      return function() {
        var f__5861__auto__ = function() {
          var switch__5845__auto__ = function(c__5860__auto___27223, out) {
            return function(state_27199) {
              var state_val_27200 = state_27199[1];
              if (state_val_27200 === 7) {
                var inst_27179 = state_27199[7];
                var inst_27178 = state_27199[8];
                var inst_27178__$1 = state_27199[2];
                var inst_27179__$1 = cljs.core.nth.call(null, inst_27178__$1, 0, null);
                var inst_27180 = cljs.core.nth.call(null, inst_27178__$1, 1, null);
                var inst_27181 = inst_27179__$1 == null;
                var state_27199__$1 = function() {
                  var statearr_27201 = state_27199;
                  statearr_27201[7] = inst_27179__$1;
                  statearr_27201[8] = inst_27178__$1;
                  statearr_27201[9] = inst_27180;
                  return statearr_27201;
                }();
                if (cljs.core.truth_(inst_27181)) {
                  var statearr_27202_27224 = state_27199__$1;
                  statearr_27202_27224[1] = 8;
                } else {
                  var statearr_27203_27225 = state_27199__$1;
                  statearr_27203_27225[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_27200 === 1) {
                  var inst_27170 = cljs.core.vec.call(null, chs);
                  var inst_27171 = inst_27170;
                  var state_27199__$1 = function() {
                    var statearr_27204 = state_27199;
                    statearr_27204[10] = inst_27171;
                    return statearr_27204;
                  }();
                  var statearr_27205_27226 = state_27199__$1;
                  statearr_27205_27226[2] = null;
                  statearr_27205_27226[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_27200 === 4) {
                    var inst_27171 = state_27199[10];
                    var state_27199__$1 = state_27199;
                    return cljs.core.async.ioc_alts_BANG_.call(null, state_27199__$1, 7, inst_27171);
                  } else {
                    if (state_val_27200 === 6) {
                      var inst_27195 = state_27199[2];
                      var state_27199__$1 = state_27199;
                      var statearr_27206_27227 = state_27199__$1;
                      statearr_27206_27227[2] = inst_27195;
                      statearr_27206_27227[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_27200 === 3) {
                        var inst_27197 = state_27199[2];
                        var state_27199__$1 = state_27199;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_27199__$1, inst_27197);
                      } else {
                        if (state_val_27200 === 2) {
                          var inst_27171 = state_27199[10];
                          var inst_27173 = cljs.core.count.call(null, inst_27171);
                          var inst_27174 = inst_27173 > 0;
                          var state_27199__$1 = state_27199;
                          if (cljs.core.truth_(inst_27174)) {
                            var statearr_27208_27228 = state_27199__$1;
                            statearr_27208_27228[1] = 4;
                          } else {
                            var statearr_27209_27229 = state_27199__$1;
                            statearr_27209_27229[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_27200 === 11) {
                            var inst_27171 = state_27199[10];
                            var inst_27188 = state_27199[2];
                            var tmp27207 = inst_27171;
                            var inst_27171__$1 = tmp27207;
                            var state_27199__$1 = function() {
                              var statearr_27210 = state_27199;
                              statearr_27210[10] = inst_27171__$1;
                              statearr_27210[11] = inst_27188;
                              return statearr_27210;
                            }();
                            var statearr_27211_27230 = state_27199__$1;
                            statearr_27211_27230[2] = null;
                            statearr_27211_27230[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_27200 === 9) {
                              var inst_27179 = state_27199[7];
                              var state_27199__$1 = state_27199;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_27199__$1, 11, out, inst_27179);
                            } else {
                              if (state_val_27200 === 5) {
                                var inst_27193 = cljs.core.async.close_BANG_.call(null, out);
                                var state_27199__$1 = state_27199;
                                var statearr_27212_27231 = state_27199__$1;
                                statearr_27212_27231[2] = inst_27193;
                                statearr_27212_27231[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_27200 === 10) {
                                  var inst_27191 = state_27199[2];
                                  var state_27199__$1 = state_27199;
                                  var statearr_27213_27232 = state_27199__$1;
                                  statearr_27213_27232[2] = inst_27191;
                                  statearr_27213_27232[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_27200 === 8) {
                                    var inst_27179 = state_27199[7];
                                    var inst_27178 = state_27199[8];
                                    var inst_27180 = state_27199[9];
                                    var inst_27171 = state_27199[10];
                                    var inst_27183 = function() {
                                      var c = inst_27180;
                                      var v = inst_27179;
                                      var vec__27176 = inst_27178;
                                      var cs = inst_27171;
                                      return function(c, v, vec__27176, cs, inst_27179, inst_27178, inst_27180, inst_27171, state_val_27200, c__5860__auto___27223, out) {
                                        return function(p1__27116_SHARP_) {
                                          return cljs.core.not_EQ_.call(null, c, p1__27116_SHARP_);
                                        };
                                      }(c, v, vec__27176, cs, inst_27179, inst_27178, inst_27180, inst_27171, state_val_27200, c__5860__auto___27223, out);
                                    }();
                                    var inst_27184 = cljs.core.filterv.call(null, inst_27183, inst_27171);
                                    var inst_27171__$1 = inst_27184;
                                    var state_27199__$1 = function() {
                                      var statearr_27214 = state_27199;
                                      statearr_27214[10] = inst_27171__$1;
                                      return statearr_27214;
                                    }();
                                    var statearr_27215_27233 = state_27199__$1;
                                    statearr_27215_27233[2] = null;
                                    statearr_27215_27233[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5860__auto___27223, out);
          return function(switch__5845__auto__, c__5860__auto___27223, out) {
            return function() {
              var state_machine__5846__auto__ = null;
              var state_machine__5846__auto____0 = function() {
                var statearr_27219 = [null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_27219[0] = state_machine__5846__auto__;
                statearr_27219[1] = 1;
                return statearr_27219;
              };
              var state_machine__5846__auto____1 = function(state_27199) {
                while (true) {
                  var ret_value__5847__auto__ = function() {
                    try {
                      while (true) {
                        var result__5848__auto__ = switch__5845__auto__.call(null, state_27199);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__5848__auto__;
                        }
                        break;
                      }
                    } catch (e27220) {
                      if (e27220 instanceof Object) {
                        var ex__5849__auto__ = e27220;
                        var statearr_27221_27234 = state_27199;
                        statearr_27221_27234[5] = ex__5849__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_27199);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e27220;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__27235 = state_27199;
                    state_27199 = G__27235;
                    continue;
                  } else {
                    return ret_value__5847__auto__;
                  }
                  break;
                }
              };
              state_machine__5846__auto__ = function(state_27199) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5846__auto____0.call(this);
                  case 1:
                    return state_machine__5846__auto____1.call(this, state_27199);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
              return state_machine__5846__auto__;
            }();
          }(switch__5845__auto__, c__5860__auto___27223, out);
        }();
        var state__5862__auto__ = function() {
          var statearr_27222 = f__5861__auto__.call(null);
          statearr_27222[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___27223;
          return statearr_27222;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
      };
    }(c__5860__auto___27223, out));
    return out;
  };
  merge = function(chs, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return merge__1.call(this, chs);
      case 2:
        return merge__2.call(this, chs, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  merge.cljs$core$IFn$_invoke$arity$1 = merge__1;
  merge.cljs$core$IFn$_invoke$arity$2 = merge__2;
  return merge;
}();
cljs.core.async.into = function into(coll, ch) {
  return cljs.core.async.reduce.call(null, cljs.core.conj, coll, ch);
};
cljs.core.async.take = function() {
  var take = null;
  var take__2 = function(n, ch) {
    return take.call(null, n, ch, null);
  };
  var take__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5860__auto___27328 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto___27328, out) {
      return function() {
        var f__5861__auto__ = function() {
          var switch__5845__auto__ = function(c__5860__auto___27328, out) {
            return function(state_27305) {
              var state_val_27306 = state_27305[1];
              if (state_val_27306 === 7) {
                var inst_27287 = state_27305[7];
                var inst_27287__$1 = state_27305[2];
                var inst_27288 = inst_27287__$1 == null;
                var inst_27289 = cljs.core.not.call(null, inst_27288);
                var state_27305__$1 = function() {
                  var statearr_27307 = state_27305;
                  statearr_27307[7] = inst_27287__$1;
                  return statearr_27307;
                }();
                if (inst_27289) {
                  var statearr_27308_27329 = state_27305__$1;
                  statearr_27308_27329[1] = 8;
                } else {
                  var statearr_27309_27330 = state_27305__$1;
                  statearr_27309_27330[1] = 9;
                }
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_27306 === 1) {
                  var inst_27282 = 0;
                  var state_27305__$1 = function() {
                    var statearr_27310 = state_27305;
                    statearr_27310[8] = inst_27282;
                    return statearr_27310;
                  }();
                  var statearr_27311_27331 = state_27305__$1;
                  statearr_27311_27331[2] = null;
                  statearr_27311_27331[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_27306 === 4) {
                    var state_27305__$1 = state_27305;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_27305__$1, 7, ch);
                  } else {
                    if (state_val_27306 === 6) {
                      var inst_27300 = state_27305[2];
                      var state_27305__$1 = state_27305;
                      var statearr_27312_27332 = state_27305__$1;
                      statearr_27312_27332[2] = inst_27300;
                      statearr_27312_27332[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_27306 === 3) {
                        var inst_27302 = state_27305[2];
                        var inst_27303 = cljs.core.async.close_BANG_.call(null, out);
                        var state_27305__$1 = function() {
                          var statearr_27313 = state_27305;
                          statearr_27313[9] = inst_27302;
                          return statearr_27313;
                        }();
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_27305__$1, inst_27303);
                      } else {
                        if (state_val_27306 === 2) {
                          var inst_27282 = state_27305[8];
                          var inst_27284 = inst_27282 < n;
                          var state_27305__$1 = state_27305;
                          if (cljs.core.truth_(inst_27284)) {
                            var statearr_27314_27333 = state_27305__$1;
                            statearr_27314_27333[1] = 4;
                          } else {
                            var statearr_27315_27334 = state_27305__$1;
                            statearr_27315_27334[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_27306 === 11) {
                            var inst_27282 = state_27305[8];
                            var inst_27292 = state_27305[2];
                            var inst_27293 = inst_27282 + 1;
                            var inst_27282__$1 = inst_27293;
                            var state_27305__$1 = function() {
                              var statearr_27316 = state_27305;
                              statearr_27316[10] = inst_27292;
                              statearr_27316[8] = inst_27282__$1;
                              return statearr_27316;
                            }();
                            var statearr_27317_27335 = state_27305__$1;
                            statearr_27317_27335[2] = null;
                            statearr_27317_27335[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_27306 === 9) {
                              var state_27305__$1 = state_27305;
                              var statearr_27318_27336 = state_27305__$1;
                              statearr_27318_27336[2] = null;
                              statearr_27318_27336[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_27306 === 5) {
                                var state_27305__$1 = state_27305;
                                var statearr_27319_27337 = state_27305__$1;
                                statearr_27319_27337[2] = null;
                                statearr_27319_27337[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_27306 === 10) {
                                  var inst_27297 = state_27305[2];
                                  var state_27305__$1 = state_27305;
                                  var statearr_27320_27338 = state_27305__$1;
                                  statearr_27320_27338[2] = inst_27297;
                                  statearr_27320_27338[1] = 6;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_27306 === 8) {
                                    var inst_27287 = state_27305[7];
                                    var state_27305__$1 = state_27305;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_27305__$1, 11, out, inst_27287);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5860__auto___27328, out);
          return function(switch__5845__auto__, c__5860__auto___27328, out) {
            return function() {
              var state_machine__5846__auto__ = null;
              var state_machine__5846__auto____0 = function() {
                var statearr_27324 = [null, null, null, null, null, null, null, null, null, null, null];
                statearr_27324[0] = state_machine__5846__auto__;
                statearr_27324[1] = 1;
                return statearr_27324;
              };
              var state_machine__5846__auto____1 = function(state_27305) {
                while (true) {
                  var ret_value__5847__auto__ = function() {
                    try {
                      while (true) {
                        var result__5848__auto__ = switch__5845__auto__.call(null, state_27305);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__5848__auto__;
                        }
                        break;
                      }
                    } catch (e27325) {
                      if (e27325 instanceof Object) {
                        var ex__5849__auto__ = e27325;
                        var statearr_27326_27339 = state_27305;
                        statearr_27326_27339[5] = ex__5849__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_27305);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e27325;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__27340 = state_27305;
                    state_27305 = G__27340;
                    continue;
                  } else {
                    return ret_value__5847__auto__;
                  }
                  break;
                }
              };
              state_machine__5846__auto__ = function(state_27305) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5846__auto____0.call(this);
                  case 1:
                    return state_machine__5846__auto____1.call(this, state_27305);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
              return state_machine__5846__auto__;
            }();
          }(switch__5845__auto__, c__5860__auto___27328, out);
        }();
        var state__5862__auto__ = function() {
          var statearr_27327 = f__5861__auto__.call(null);
          statearr_27327[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___27328;
          return statearr_27327;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
      };
    }(c__5860__auto___27328, out));
    return out;
  };
  take = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return take__2.call(this, n, ch);
      case 3:
        return take__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take.cljs$core$IFn$_invoke$arity$2 = take__2;
  take.cljs$core$IFn$_invoke$arity$3 = take__3;
  return take;
}();
cljs.core.async.map_LT_ = function map_LT_(f, ch) {
  if (typeof cljs.core.async.t27348 !== "undefined") {
  } else {
    cljs.core.async.t27348 = function(ch, f, map_LT_, meta27349) {
      this.ch = ch;
      this.f = f;
      this.map_LT_ = map_LT_;
      this.meta27349 = meta27349;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t27348.cljs$lang$type = true;
    cljs.core.async.t27348.cljs$lang$ctorStr = "cljs.core.async/t27348";
    cljs.core.async.t27348.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
      return cljs.core._write.call(null, writer__4255__auto__, "cljs.core.async/t27348");
    };
    cljs.core.async.t27348.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t27348.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
    };
    cljs.core.async.t27348.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t27348.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      var ret = cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, function() {
        if (typeof cljs.core.async.t27351 !== "undefined") {
        } else {
          cljs.core.async.t27351 = function(fn1, _, meta27349, ch, f, map_LT_, meta27352) {
            this.fn1 = fn1;
            this._ = _;
            this.meta27349 = meta27349;
            this.ch = ch;
            this.f = f;
            this.map_LT_ = map_LT_;
            this.meta27352 = meta27352;
            this.cljs$lang$protocol_mask$partition1$ = 0;
            this.cljs$lang$protocol_mask$partition0$ = 393216;
          };
          cljs.core.async.t27351.cljs$lang$type = true;
          cljs.core.async.t27351.cljs$lang$ctorStr = "cljs.core.async/t27351";
          cljs.core.async.t27351.cljs$lang$ctorPrWriter = function(___$1) {
            return function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
              return cljs.core._write.call(null, writer__4255__auto__, "cljs.core.async/t27351");
            };
          }(___$1);
          cljs.core.async.t27351.prototype.cljs$core$async$impl$protocols$Handler$ = true;
          cljs.core.async.t27351.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = function(___$1) {
            return function(___$3) {
              var self__ = this;
              var ___$4 = this;
              return cljs.core.async.impl.protocols.active_QMARK_.call(null, self__.fn1);
            };
          }(___$1);
          cljs.core.async.t27351.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = function(___$1) {
            return function(___$3) {
              var self__ = this;
              var ___$4 = this;
              var f1 = cljs.core.async.impl.protocols.commit.call(null, self__.fn1);
              return function(f1, ___$4, ___$1) {
                return function(p1__27341_SHARP_) {
                  return f1.call(null, p1__27341_SHARP_ == null ? null : self__.f.call(null, p1__27341_SHARP_));
                };
              }(f1, ___$4, ___$1);
            };
          }(___$1);
          cljs.core.async.t27351.prototype.cljs$core$IMeta$_meta$arity$1 = function(___$1) {
            return function(_27353) {
              var self__ = this;
              var _27353__$1 = this;
              return self__.meta27352;
            };
          }(___$1);
          cljs.core.async.t27351.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(___$1) {
            return function(_27353, meta27352__$1) {
              var self__ = this;
              var _27353__$1 = this;
              return new cljs.core.async.t27351(self__.fn1, self__._, self__.meta27349, self__.ch, self__.f, self__.map_LT_, meta27352__$1);
            };
          }(___$1);
          cljs.core.async.__GT_t27351 = function(___$1) {
            return function __GT_t27351(fn1__$1, ___$2, meta27349__$1, ch__$2, f__$2, map_LT___$2, meta27352) {
              return new cljs.core.async.t27351(fn1__$1, ___$2, meta27349__$1, ch__$2, f__$2, map_LT___$2, meta27352);
            };
          }(___$1);
        }
        return new cljs.core.async.t27351(fn1, ___$1, self__.meta27349, self__.ch, self__.f, self__.map_LT_, null);
      }());
      if (cljs.core.truth_(function() {
        var and__3665__auto__ = ret;
        if (cljs.core.truth_(and__3665__auto__)) {
          return!(cljs.core.deref.call(null, ret) == null);
        } else {
          return and__3665__auto__;
        }
      }())) {
        return cljs.core.async.impl.channels.box.call(null, self__.f.call(null, cljs.core.deref.call(null, ret)));
      } else {
        return ret;
      }
    };
    cljs.core.async.t27348.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t27348.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t27348.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t27348.prototype.cljs$core$IMeta$_meta$arity$1 = function(_27350) {
      var self__ = this;
      var _27350__$1 = this;
      return self__.meta27349;
    };
    cljs.core.async.t27348.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_27350, meta27349__$1) {
      var self__ = this;
      var _27350__$1 = this;
      return new cljs.core.async.t27348(self__.ch, self__.f, self__.map_LT_, meta27349__$1);
    };
    cljs.core.async.__GT_t27348 = function __GT_t27348(ch__$1, f__$1, map_LT___$1, meta27349) {
      return new cljs.core.async.t27348(ch__$1, f__$1, map_LT___$1, meta27349);
    };
  }
  return new cljs.core.async.t27348(ch, f, map_LT_, null);
};
cljs.core.async.map_GT_ = function map_GT_(f, ch) {
  if (typeof cljs.core.async.t27357 !== "undefined") {
  } else {
    cljs.core.async.t27357 = function(ch, f, map_GT_, meta27358) {
      this.ch = ch;
      this.f = f;
      this.map_GT_ = map_GT_;
      this.meta27358 = meta27358;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t27357.cljs$lang$type = true;
    cljs.core.async.t27357.cljs$lang$ctorStr = "cljs.core.async/t27357";
    cljs.core.async.t27357.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
      return cljs.core._write.call(null, writer__4255__auto__, "cljs.core.async/t27357");
    };
    cljs.core.async.t27357.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t27357.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, self__.f.call(null, val), fn1);
    };
    cljs.core.async.t27357.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t27357.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t27357.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t27357.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t27357.prototype.cljs$core$IMeta$_meta$arity$1 = function(_27359) {
      var self__ = this;
      var _27359__$1 = this;
      return self__.meta27358;
    };
    cljs.core.async.t27357.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_27359, meta27358__$1) {
      var self__ = this;
      var _27359__$1 = this;
      return new cljs.core.async.t27357(self__.ch, self__.f, self__.map_GT_, meta27358__$1);
    };
    cljs.core.async.__GT_t27357 = function __GT_t27357(ch__$1, f__$1, map_GT___$1, meta27358) {
      return new cljs.core.async.t27357(ch__$1, f__$1, map_GT___$1, meta27358);
    };
  }
  return new cljs.core.async.t27357(ch, f, map_GT_, null);
};
cljs.core.async.filter_GT_ = function filter_GT_(p, ch) {
  if (typeof cljs.core.async.t27363 !== "undefined") {
  } else {
    cljs.core.async.t27363 = function(ch, p, filter_GT_, meta27364) {
      this.ch = ch;
      this.p = p;
      this.filter_GT_ = filter_GT_;
      this.meta27364 = meta27364;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.async.t27363.cljs$lang$type = true;
    cljs.core.async.t27363.cljs$lang$ctorStr = "cljs.core.async/t27363";
    cljs.core.async.t27363.cljs$lang$ctorPrWriter = function(this__4254__auto__, writer__4255__auto__, opt__4256__auto__) {
      return cljs.core._write.call(null, writer__4255__auto__, "cljs.core.async/t27363");
    };
    cljs.core.async.t27363.prototype.cljs$core$async$impl$protocols$WritePort$ = true;
    cljs.core.async.t27363.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = function(_, val, fn1) {
      var self__ = this;
      var ___$1 = this;
      if (cljs.core.truth_(self__.p.call(null, val))) {
        return cljs.core.async.impl.protocols.put_BANG_.call(null, self__.ch, val, fn1);
      } else {
        return cljs.core.async.impl.channels.box.call(null, cljs.core.not.call(null, cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch)));
      }
    };
    cljs.core.async.t27363.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;
    cljs.core.async.t27363.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = function(_, fn1) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.take_BANG_.call(null, self__.ch, fn1);
    };
    cljs.core.async.t27363.prototype.cljs$core$async$impl$protocols$Channel$ = true;
    cljs.core.async.t27363.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.close_BANG_.call(null, self__.ch);
    };
    cljs.core.async.t27363.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      return cljs.core.async.impl.protocols.closed_QMARK_.call(null, self__.ch);
    };
    cljs.core.async.t27363.prototype.cljs$core$IMeta$_meta$arity$1 = function(_27365) {
      var self__ = this;
      var _27365__$1 = this;
      return self__.meta27364;
    };
    cljs.core.async.t27363.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_27365, meta27364__$1) {
      var self__ = this;
      var _27365__$1 = this;
      return new cljs.core.async.t27363(self__.ch, self__.p, self__.filter_GT_, meta27364__$1);
    };
    cljs.core.async.__GT_t27363 = function __GT_t27363(ch__$1, p__$1, filter_GT___$1, meta27364) {
      return new cljs.core.async.t27363(ch__$1, p__$1, filter_GT___$1, meta27364);
    };
  }
  return new cljs.core.async.t27363(ch, p, filter_GT_, null);
};
cljs.core.async.remove_GT_ = function remove_GT_(p, ch) {
  return cljs.core.async.filter_GT_.call(null, cljs.core.complement.call(null, p), ch);
};
cljs.core.async.filter_LT_ = function() {
  var filter_LT_ = null;
  var filter_LT___2 = function(p, ch) {
    return filter_LT_.call(null, p, ch, null);
  };
  var filter_LT___3 = function(p, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5860__auto___27448 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto___27448, out) {
      return function() {
        var f__5861__auto__ = function() {
          var switch__5845__auto__ = function(c__5860__auto___27448, out) {
            return function(state_27427) {
              var state_val_27428 = state_27427[1];
              if (state_val_27428 === 7) {
                var inst_27423 = state_27427[2];
                var state_27427__$1 = state_27427;
                var statearr_27429_27449 = state_27427__$1;
                statearr_27429_27449[2] = inst_27423;
                statearr_27429_27449[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_27428 === 1) {
                  var state_27427__$1 = state_27427;
                  var statearr_27430_27450 = state_27427__$1;
                  statearr_27430_27450[2] = null;
                  statearr_27430_27450[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_27428 === 4) {
                    var inst_27409 = state_27427[7];
                    var inst_27409__$1 = state_27427[2];
                    var inst_27410 = inst_27409__$1 == null;
                    var state_27427__$1 = function() {
                      var statearr_27431 = state_27427;
                      statearr_27431[7] = inst_27409__$1;
                      return statearr_27431;
                    }();
                    if (cljs.core.truth_(inst_27410)) {
                      var statearr_27432_27451 = state_27427__$1;
                      statearr_27432_27451[1] = 5;
                    } else {
                      var statearr_27433_27452 = state_27427__$1;
                      statearr_27433_27452[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_27428 === 6) {
                      var inst_27409 = state_27427[7];
                      var inst_27414 = p.call(null, inst_27409);
                      var state_27427__$1 = state_27427;
                      if (cljs.core.truth_(inst_27414)) {
                        var statearr_27434_27453 = state_27427__$1;
                        statearr_27434_27453[1] = 8;
                      } else {
                        var statearr_27435_27454 = state_27427__$1;
                        statearr_27435_27454[1] = 9;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_27428 === 3) {
                        var inst_27425 = state_27427[2];
                        var state_27427__$1 = state_27427;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_27427__$1, inst_27425);
                      } else {
                        if (state_val_27428 === 2) {
                          var state_27427__$1 = state_27427;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_27427__$1, 4, ch);
                        } else {
                          if (state_val_27428 === 11) {
                            var inst_27417 = state_27427[2];
                            var state_27427__$1 = state_27427;
                            var statearr_27436_27455 = state_27427__$1;
                            statearr_27436_27455[2] = inst_27417;
                            statearr_27436_27455[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_27428 === 9) {
                              var state_27427__$1 = state_27427;
                              var statearr_27437_27456 = state_27427__$1;
                              statearr_27437_27456[2] = null;
                              statearr_27437_27456[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_27428 === 5) {
                                var inst_27412 = cljs.core.async.close_BANG_.call(null, out);
                                var state_27427__$1 = state_27427;
                                var statearr_27438_27457 = state_27427__$1;
                                statearr_27438_27457[2] = inst_27412;
                                statearr_27438_27457[1] = 7;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_27428 === 10) {
                                  var inst_27420 = state_27427[2];
                                  var state_27427__$1 = function() {
                                    var statearr_27439 = state_27427;
                                    statearr_27439[8] = inst_27420;
                                    return statearr_27439;
                                  }();
                                  var statearr_27440_27458 = state_27427__$1;
                                  statearr_27440_27458[2] = null;
                                  statearr_27440_27458[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_27428 === 8) {
                                    var inst_27409 = state_27427[7];
                                    var state_27427__$1 = state_27427;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_27427__$1, 11, out, inst_27409);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5860__auto___27448, out);
          return function(switch__5845__auto__, c__5860__auto___27448, out) {
            return function() {
              var state_machine__5846__auto__ = null;
              var state_machine__5846__auto____0 = function() {
                var statearr_27444 = [null, null, null, null, null, null, null, null, null];
                statearr_27444[0] = state_machine__5846__auto__;
                statearr_27444[1] = 1;
                return statearr_27444;
              };
              var state_machine__5846__auto____1 = function(state_27427) {
                while (true) {
                  var ret_value__5847__auto__ = function() {
                    try {
                      while (true) {
                        var result__5848__auto__ = switch__5845__auto__.call(null, state_27427);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__5848__auto__;
                        }
                        break;
                      }
                    } catch (e27445) {
                      if (e27445 instanceof Object) {
                        var ex__5849__auto__ = e27445;
                        var statearr_27446_27459 = state_27427;
                        statearr_27446_27459[5] = ex__5849__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_27427);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e27445;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__27460 = state_27427;
                    state_27427 = G__27460;
                    continue;
                  } else {
                    return ret_value__5847__auto__;
                  }
                  break;
                }
              };
              state_machine__5846__auto__ = function(state_27427) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5846__auto____0.call(this);
                  case 1:
                    return state_machine__5846__auto____1.call(this, state_27427);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
              return state_machine__5846__auto__;
            }();
          }(switch__5845__auto__, c__5860__auto___27448, out);
        }();
        var state__5862__auto__ = function() {
          var statearr_27447 = f__5861__auto__.call(null);
          statearr_27447[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___27448;
          return statearr_27447;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
      };
    }(c__5860__auto___27448, out));
    return out;
  };
  filter_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return filter_LT___2.call(this, p, ch);
      case 3:
        return filter_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter_LT_.cljs$core$IFn$_invoke$arity$2 = filter_LT___2;
  filter_LT_.cljs$core$IFn$_invoke$arity$3 = filter_LT___3;
  return filter_LT_;
}();
cljs.core.async.remove_LT_ = function() {
  var remove_LT_ = null;
  var remove_LT___2 = function(p, ch) {
    return remove_LT_.call(null, p, ch, null);
  };
  var remove_LT___3 = function(p, ch, buf_or_n) {
    return cljs.core.async.filter_LT_.call(null, cljs.core.complement.call(null, p), ch, buf_or_n);
  };
  remove_LT_ = function(p, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return remove_LT___2.call(this, p, ch);
      case 3:
        return remove_LT___3.call(this, p, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove_LT_.cljs$core$IFn$_invoke$arity$2 = remove_LT___2;
  remove_LT_.cljs$core$IFn$_invoke$arity$3 = remove_LT___3;
  return remove_LT_;
}();
cljs.core.async.mapcat_STAR_ = function mapcat_STAR_(f, in$, out) {
  var c__5860__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto__) {
    return function() {
      var f__5861__auto__ = function() {
        var switch__5845__auto__ = function(c__5860__auto__) {
          return function(state_27626) {
            var state_val_27627 = state_27626[1];
            if (state_val_27627 === 7) {
              var inst_27622 = state_27626[2];
              var state_27626__$1 = state_27626;
              var statearr_27628_27669 = state_27626__$1;
              statearr_27628_27669[2] = inst_27622;
              statearr_27628_27669[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_27627 === 20) {
                var inst_27592 = state_27626[7];
                var inst_27603 = state_27626[2];
                var inst_27604 = cljs.core.next.call(null, inst_27592);
                var inst_27578 = inst_27604;
                var inst_27579 = null;
                var inst_27580 = 0;
                var inst_27581 = 0;
                var state_27626__$1 = function() {
                  var statearr_27629 = state_27626;
                  statearr_27629[8] = inst_27581;
                  statearr_27629[9] = inst_27579;
                  statearr_27629[10] = inst_27603;
                  statearr_27629[11] = inst_27578;
                  statearr_27629[12] = inst_27580;
                  return statearr_27629;
                }();
                var statearr_27630_27670 = state_27626__$1;
                statearr_27630_27670[2] = null;
                statearr_27630_27670[1] = 8;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_27627 === 1) {
                  var state_27626__$1 = state_27626;
                  var statearr_27631_27671 = state_27626__$1;
                  statearr_27631_27671[2] = null;
                  statearr_27631_27671[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_27627 === 4) {
                    var inst_27567 = state_27626[13];
                    var inst_27567__$1 = state_27626[2];
                    var inst_27568 = inst_27567__$1 == null;
                    var state_27626__$1 = function() {
                      var statearr_27632 = state_27626;
                      statearr_27632[13] = inst_27567__$1;
                      return statearr_27632;
                    }();
                    if (cljs.core.truth_(inst_27568)) {
                      var statearr_27633_27672 = state_27626__$1;
                      statearr_27633_27672[1] = 5;
                    } else {
                      var statearr_27634_27673 = state_27626__$1;
                      statearr_27634_27673[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_27627 === 15) {
                      var state_27626__$1 = state_27626;
                      var statearr_27638_27674 = state_27626__$1;
                      statearr_27638_27674[2] = null;
                      statearr_27638_27674[1] = 16;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_27627 === 21) {
                        var state_27626__$1 = state_27626;
                        var statearr_27639_27675 = state_27626__$1;
                        statearr_27639_27675[2] = null;
                        statearr_27639_27675[1] = 23;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_27627 === 13) {
                          var inst_27581 = state_27626[8];
                          var inst_27579 = state_27626[9];
                          var inst_27578 = state_27626[11];
                          var inst_27580 = state_27626[12];
                          var inst_27588 = state_27626[2];
                          var inst_27589 = inst_27581 + 1;
                          var tmp27635 = inst_27579;
                          var tmp27636 = inst_27578;
                          var tmp27637 = inst_27580;
                          var inst_27578__$1 = tmp27636;
                          var inst_27579__$1 = tmp27635;
                          var inst_27580__$1 = tmp27637;
                          var inst_27581__$1 = inst_27589;
                          var state_27626__$1 = function() {
                            var statearr_27640 = state_27626;
                            statearr_27640[8] = inst_27581__$1;
                            statearr_27640[9] = inst_27579__$1;
                            statearr_27640[14] = inst_27588;
                            statearr_27640[11] = inst_27578__$1;
                            statearr_27640[12] = inst_27580__$1;
                            return statearr_27640;
                          }();
                          var statearr_27641_27676 = state_27626__$1;
                          statearr_27641_27676[2] = null;
                          statearr_27641_27676[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_27627 === 22) {
                            var state_27626__$1 = state_27626;
                            var statearr_27642_27677 = state_27626__$1;
                            statearr_27642_27677[2] = null;
                            statearr_27642_27677[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_27627 === 6) {
                              var inst_27567 = state_27626[13];
                              var inst_27576 = f.call(null, inst_27567);
                              var inst_27577 = cljs.core.seq.call(null, inst_27576);
                              var inst_27578 = inst_27577;
                              var inst_27579 = null;
                              var inst_27580 = 0;
                              var inst_27581 = 0;
                              var state_27626__$1 = function() {
                                var statearr_27643 = state_27626;
                                statearr_27643[8] = inst_27581;
                                statearr_27643[9] = inst_27579;
                                statearr_27643[11] = inst_27578;
                                statearr_27643[12] = inst_27580;
                                return statearr_27643;
                              }();
                              var statearr_27644_27678 = state_27626__$1;
                              statearr_27644_27678[2] = null;
                              statearr_27644_27678[1] = 8;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_27627 === 17) {
                                var inst_27592 = state_27626[7];
                                var inst_27596 = cljs.core.chunk_first.call(null, inst_27592);
                                var inst_27597 = cljs.core.chunk_rest.call(null, inst_27592);
                                var inst_27598 = cljs.core.count.call(null, inst_27596);
                                var inst_27578 = inst_27597;
                                var inst_27579 = inst_27596;
                                var inst_27580 = inst_27598;
                                var inst_27581 = 0;
                                var state_27626__$1 = function() {
                                  var statearr_27645 = state_27626;
                                  statearr_27645[8] = inst_27581;
                                  statearr_27645[9] = inst_27579;
                                  statearr_27645[11] = inst_27578;
                                  statearr_27645[12] = inst_27580;
                                  return statearr_27645;
                                }();
                                var statearr_27646_27679 = state_27626__$1;
                                statearr_27646_27679[2] = null;
                                statearr_27646_27679[1] = 8;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_27627 === 3) {
                                  var inst_27624 = state_27626[2];
                                  var state_27626__$1 = state_27626;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_27626__$1, inst_27624);
                                } else {
                                  if (state_val_27627 === 12) {
                                    var inst_27612 = state_27626[2];
                                    var state_27626__$1 = state_27626;
                                    var statearr_27647_27680 = state_27626__$1;
                                    statearr_27647_27680[2] = inst_27612;
                                    statearr_27647_27680[1] = 9;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_27627 === 2) {
                                      var state_27626__$1 = state_27626;
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_27626__$1, 4, in$);
                                    } else {
                                      if (state_val_27627 === 23) {
                                        var inst_27620 = state_27626[2];
                                        var state_27626__$1 = state_27626;
                                        var statearr_27648_27681 = state_27626__$1;
                                        statearr_27648_27681[2] = inst_27620;
                                        statearr_27648_27681[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_27627 === 19) {
                                          var inst_27607 = state_27626[2];
                                          var state_27626__$1 = state_27626;
                                          var statearr_27649_27682 = state_27626__$1;
                                          statearr_27649_27682[2] = inst_27607;
                                          statearr_27649_27682[1] = 16;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_27627 === 11) {
                                            var inst_27578 = state_27626[11];
                                            var inst_27592 = state_27626[7];
                                            var inst_27592__$1 = cljs.core.seq.call(null, inst_27578);
                                            var state_27626__$1 = function() {
                                              var statearr_27650 = state_27626;
                                              statearr_27650[7] = inst_27592__$1;
                                              return statearr_27650;
                                            }();
                                            if (inst_27592__$1) {
                                              var statearr_27651_27683 = state_27626__$1;
                                              statearr_27651_27683[1] = 14;
                                            } else {
                                              var statearr_27652_27684 = state_27626__$1;
                                              statearr_27652_27684[1] = 15;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_27627 === 9) {
                                              var inst_27614 = state_27626[2];
                                              var inst_27615 = cljs.core.async.impl.protocols.closed_QMARK_.call(null, out);
                                              var state_27626__$1 = function() {
                                                var statearr_27653 = state_27626;
                                                statearr_27653[15] = inst_27614;
                                                return statearr_27653;
                                              }();
                                              if (cljs.core.truth_(inst_27615)) {
                                                var statearr_27654_27685 = state_27626__$1;
                                                statearr_27654_27685[1] = 21;
                                              } else {
                                                var statearr_27655_27686 = state_27626__$1;
                                                statearr_27655_27686[1] = 22;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_27627 === 5) {
                                                var inst_27570 = cljs.core.async.close_BANG_.call(null, out);
                                                var state_27626__$1 = state_27626;
                                                var statearr_27656_27687 = state_27626__$1;
                                                statearr_27656_27687[2] = inst_27570;
                                                statearr_27656_27687[1] = 7;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_27627 === 14) {
                                                  var inst_27592 = state_27626[7];
                                                  var inst_27594 = cljs.core.chunked_seq_QMARK_.call(null, inst_27592);
                                                  var state_27626__$1 = state_27626;
                                                  if (inst_27594) {
                                                    var statearr_27657_27688 = state_27626__$1;
                                                    statearr_27657_27688[1] = 17;
                                                  } else {
                                                    var statearr_27658_27689 = state_27626__$1;
                                                    statearr_27658_27689[1] = 18;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_27627 === 16) {
                                                    var inst_27610 = state_27626[2];
                                                    var state_27626__$1 = state_27626;
                                                    var statearr_27659_27690 = state_27626__$1;
                                                    statearr_27659_27690[2] = inst_27610;
                                                    statearr_27659_27690[1] = 12;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_27627 === 10) {
                                                      var inst_27581 = state_27626[8];
                                                      var inst_27579 = state_27626[9];
                                                      var inst_27586 = cljs.core._nth.call(null, inst_27579, inst_27581);
                                                      var state_27626__$1 = state_27626;
                                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_27626__$1, 13, out, inst_27586);
                                                    } else {
                                                      if (state_val_27627 === 18) {
                                                        var inst_27592 = state_27626[7];
                                                        var inst_27601 = cljs.core.first.call(null, inst_27592);
                                                        var state_27626__$1 = state_27626;
                                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_27626__$1, 20, out, inst_27601);
                                                      } else {
                                                        if (state_val_27627 === 8) {
                                                          var inst_27581 = state_27626[8];
                                                          var inst_27580 = state_27626[12];
                                                          var inst_27583 = inst_27581 < inst_27580;
                                                          var inst_27584 = inst_27583;
                                                          var state_27626__$1 = state_27626;
                                                          if (cljs.core.truth_(inst_27584)) {
                                                            var statearr_27660_27691 = state_27626__$1;
                                                            statearr_27660_27691[1] = 10;
                                                          } else {
                                                            var statearr_27661_27692 = state_27626__$1;
                                                            statearr_27661_27692[1] = 11;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          return null;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5860__auto__);
        return function(switch__5845__auto__, c__5860__auto__) {
          return function() {
            var state_machine__5846__auto__ = null;
            var state_machine__5846__auto____0 = function() {
              var statearr_27665 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_27665[0] = state_machine__5846__auto__;
              statearr_27665[1] = 1;
              return statearr_27665;
            };
            var state_machine__5846__auto____1 = function(state_27626) {
              while (true) {
                var ret_value__5847__auto__ = function() {
                  try {
                    while (true) {
                      var result__5848__auto__ = switch__5845__auto__.call(null, state_27626);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__5848__auto__;
                      }
                      break;
                    }
                  } catch (e27666) {
                    if (e27666 instanceof Object) {
                      var ex__5849__auto__ = e27666;
                      var statearr_27667_27693 = state_27626;
                      statearr_27667_27693[5] = ex__5849__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_27626);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e27666;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__27694 = state_27626;
                  state_27626 = G__27694;
                  continue;
                } else {
                  return ret_value__5847__auto__;
                }
                break;
              }
            };
            state_machine__5846__auto__ = function(state_27626) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5846__auto____0.call(this);
                case 1:
                  return state_machine__5846__auto____1.call(this, state_27626);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
            return state_machine__5846__auto__;
          }();
        }(switch__5845__auto__, c__5860__auto__);
      }();
      var state__5862__auto__ = function() {
        var statearr_27668 = f__5861__auto__.call(null);
        statearr_27668[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto__;
        return statearr_27668;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
    };
  }(c__5860__auto__));
  return c__5860__auto__;
};
cljs.core.async.mapcat_LT_ = function() {
  var mapcat_LT_ = null;
  var mapcat_LT___2 = function(f, in$) {
    return mapcat_LT_.call(null, f, in$, null);
  };
  var mapcat_LT___3 = function(f, in$, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return out;
  };
  mapcat_LT_ = function(f, in$, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_LT___2.call(this, f, in$);
      case 3:
        return mapcat_LT___3.call(this, f, in$, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = mapcat_LT___2;
  mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = mapcat_LT___3;
  return mapcat_LT_;
}();
cljs.core.async.mapcat_GT_ = function() {
  var mapcat_GT_ = null;
  var mapcat_GT___2 = function(f, out) {
    return mapcat_GT_.call(null, f, out, null);
  };
  var mapcat_GT___3 = function(f, out, buf_or_n) {
    var in$ = cljs.core.async.chan.call(null, buf_or_n);
    cljs.core.async.mapcat_STAR_.call(null, f, in$, out);
    return in$;
  };
  mapcat_GT_ = function(f, out, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return mapcat_GT___2.call(this, f, out);
      case 3:
        return mapcat_GT___3.call(this, f, out, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = mapcat_GT___2;
  mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = mapcat_GT___3;
  return mapcat_GT_;
}();
cljs.core.async.unique = function() {
  var unique = null;
  var unique__1 = function(ch) {
    return unique.call(null, ch, null);
  };
  var unique__2 = function(ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5860__auto___27791 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto___27791, out) {
      return function() {
        var f__5861__auto__ = function() {
          var switch__5845__auto__ = function(c__5860__auto___27791, out) {
            return function(state_27766) {
              var state_val_27767 = state_27766[1];
              if (state_val_27767 === 7) {
                var inst_27761 = state_27766[2];
                var state_27766__$1 = state_27766;
                var statearr_27768_27792 = state_27766__$1;
                statearr_27768_27792[2] = inst_27761;
                statearr_27768_27792[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_27767 === 1) {
                  var inst_27743 = null;
                  var state_27766__$1 = function() {
                    var statearr_27769 = state_27766;
                    statearr_27769[7] = inst_27743;
                    return statearr_27769;
                  }();
                  var statearr_27770_27793 = state_27766__$1;
                  statearr_27770_27793[2] = null;
                  statearr_27770_27793[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_27767 === 4) {
                    var inst_27746 = state_27766[8];
                    var inst_27746__$1 = state_27766[2];
                    var inst_27747 = inst_27746__$1 == null;
                    var inst_27748 = cljs.core.not.call(null, inst_27747);
                    var state_27766__$1 = function() {
                      var statearr_27771 = state_27766;
                      statearr_27771[8] = inst_27746__$1;
                      return statearr_27771;
                    }();
                    if (inst_27748) {
                      var statearr_27772_27794 = state_27766__$1;
                      statearr_27772_27794[1] = 5;
                    } else {
                      var statearr_27773_27795 = state_27766__$1;
                      statearr_27773_27795[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_27767 === 6) {
                      var state_27766__$1 = state_27766;
                      var statearr_27774_27796 = state_27766__$1;
                      statearr_27774_27796[2] = null;
                      statearr_27774_27796[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_27767 === 3) {
                        var inst_27763 = state_27766[2];
                        var inst_27764 = cljs.core.async.close_BANG_.call(null, out);
                        var state_27766__$1 = function() {
                          var statearr_27775 = state_27766;
                          statearr_27775[9] = inst_27763;
                          return statearr_27775;
                        }();
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_27766__$1, inst_27764);
                      } else {
                        if (state_val_27767 === 2) {
                          var state_27766__$1 = state_27766;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_27766__$1, 4, ch);
                        } else {
                          if (state_val_27767 === 11) {
                            var inst_27746 = state_27766[8];
                            var inst_27755 = state_27766[2];
                            var inst_27743 = inst_27746;
                            var state_27766__$1 = function() {
                              var statearr_27776 = state_27766;
                              statearr_27776[10] = inst_27755;
                              statearr_27776[7] = inst_27743;
                              return statearr_27776;
                            }();
                            var statearr_27777_27797 = state_27766__$1;
                            statearr_27777_27797[2] = null;
                            statearr_27777_27797[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_27767 === 9) {
                              var inst_27746 = state_27766[8];
                              var state_27766__$1 = state_27766;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_27766__$1, 11, out, inst_27746);
                            } else {
                              if (state_val_27767 === 5) {
                                var inst_27746 = state_27766[8];
                                var inst_27743 = state_27766[7];
                                var inst_27750 = cljs.core._EQ_.call(null, inst_27746, inst_27743);
                                var state_27766__$1 = state_27766;
                                if (inst_27750) {
                                  var statearr_27779_27798 = state_27766__$1;
                                  statearr_27779_27798[1] = 8;
                                } else {
                                  var statearr_27780_27799 = state_27766__$1;
                                  statearr_27780_27799[1] = 9;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_27767 === 10) {
                                  var inst_27758 = state_27766[2];
                                  var state_27766__$1 = state_27766;
                                  var statearr_27781_27800 = state_27766__$1;
                                  statearr_27781_27800[2] = inst_27758;
                                  statearr_27781_27800[1] = 7;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_27767 === 8) {
                                    var inst_27743 = state_27766[7];
                                    var tmp27778 = inst_27743;
                                    var inst_27743__$1 = tmp27778;
                                    var state_27766__$1 = function() {
                                      var statearr_27782 = state_27766;
                                      statearr_27782[7] = inst_27743__$1;
                                      return statearr_27782;
                                    }();
                                    var statearr_27783_27801 = state_27766__$1;
                                    statearr_27783_27801[2] = null;
                                    statearr_27783_27801[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5860__auto___27791, out);
          return function(switch__5845__auto__, c__5860__auto___27791, out) {
            return function() {
              var state_machine__5846__auto__ = null;
              var state_machine__5846__auto____0 = function() {
                var statearr_27787 = [null, null, null, null, null, null, null, null, null, null, null];
                statearr_27787[0] = state_machine__5846__auto__;
                statearr_27787[1] = 1;
                return statearr_27787;
              };
              var state_machine__5846__auto____1 = function(state_27766) {
                while (true) {
                  var ret_value__5847__auto__ = function() {
                    try {
                      while (true) {
                        var result__5848__auto__ = switch__5845__auto__.call(null, state_27766);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__5848__auto__;
                        }
                        break;
                      }
                    } catch (e27788) {
                      if (e27788 instanceof Object) {
                        var ex__5849__auto__ = e27788;
                        var statearr_27789_27802 = state_27766;
                        statearr_27789_27802[5] = ex__5849__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_27766);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e27788;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__27803 = state_27766;
                    state_27766 = G__27803;
                    continue;
                  } else {
                    return ret_value__5847__auto__;
                  }
                  break;
                }
              };
              state_machine__5846__auto__ = function(state_27766) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5846__auto____0.call(this);
                  case 1:
                    return state_machine__5846__auto____1.call(this, state_27766);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
              return state_machine__5846__auto__;
            }();
          }(switch__5845__auto__, c__5860__auto___27791, out);
        }();
        var state__5862__auto__ = function() {
          var statearr_27790 = f__5861__auto__.call(null);
          statearr_27790[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___27791;
          return statearr_27790;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
      };
    }(c__5860__auto___27791, out));
    return out;
  };
  unique = function(ch, buf_or_n) {
    switch(arguments.length) {
      case 1:
        return unique__1.call(this, ch);
      case 2:
        return unique__2.call(this, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unique.cljs$core$IFn$_invoke$arity$1 = unique__1;
  unique.cljs$core$IFn$_invoke$arity$2 = unique__2;
  return unique;
}();
cljs.core.async.partition = function() {
  var partition = null;
  var partition__2 = function(n, ch) {
    return partition.call(null, n, ch, null);
  };
  var partition__3 = function(n, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5860__auto___27938 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto___27938, out) {
      return function() {
        var f__5861__auto__ = function() {
          var switch__5845__auto__ = function(c__5860__auto___27938, out) {
            return function(state_27908) {
              var state_val_27909 = state_27908[1];
              if (state_val_27909 === 7) {
                var inst_27904 = state_27908[2];
                var state_27908__$1 = state_27908;
                var statearr_27910_27939 = state_27908__$1;
                statearr_27910_27939[2] = inst_27904;
                statearr_27910_27939[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_27909 === 1) {
                  var inst_27871 = new Array(n);
                  var inst_27872 = inst_27871;
                  var inst_27873 = 0;
                  var state_27908__$1 = function() {
                    var statearr_27911 = state_27908;
                    statearr_27911[7] = inst_27873;
                    statearr_27911[8] = inst_27872;
                    return statearr_27911;
                  }();
                  var statearr_27912_27940 = state_27908__$1;
                  statearr_27912_27940[2] = null;
                  statearr_27912_27940[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_27909 === 4) {
                    var inst_27876 = state_27908[9];
                    var inst_27876__$1 = state_27908[2];
                    var inst_27877 = inst_27876__$1 == null;
                    var inst_27878 = cljs.core.not.call(null, inst_27877);
                    var state_27908__$1 = function() {
                      var statearr_27913 = state_27908;
                      statearr_27913[9] = inst_27876__$1;
                      return statearr_27913;
                    }();
                    if (inst_27878) {
                      var statearr_27914_27941 = state_27908__$1;
                      statearr_27914_27941[1] = 5;
                    } else {
                      var statearr_27915_27942 = state_27908__$1;
                      statearr_27915_27942[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_27909 === 15) {
                      var inst_27898 = state_27908[2];
                      var state_27908__$1 = state_27908;
                      var statearr_27916_27943 = state_27908__$1;
                      statearr_27916_27943[2] = inst_27898;
                      statearr_27916_27943[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_27909 === 13) {
                        var state_27908__$1 = state_27908;
                        var statearr_27917_27944 = state_27908__$1;
                        statearr_27917_27944[2] = null;
                        statearr_27917_27944[1] = 14;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_27909 === 6) {
                          var inst_27873 = state_27908[7];
                          var inst_27894 = inst_27873 > 0;
                          var state_27908__$1 = state_27908;
                          if (cljs.core.truth_(inst_27894)) {
                            var statearr_27918_27945 = state_27908__$1;
                            statearr_27918_27945[1] = 12;
                          } else {
                            var statearr_27919_27946 = state_27908__$1;
                            statearr_27919_27946[1] = 13;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_27909 === 3) {
                            var inst_27906 = state_27908[2];
                            var state_27908__$1 = state_27908;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_27908__$1, inst_27906);
                          } else {
                            if (state_val_27909 === 12) {
                              var inst_27872 = state_27908[8];
                              var inst_27896 = cljs.core.vec.call(null, inst_27872);
                              var state_27908__$1 = state_27908;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_27908__$1, 15, out, inst_27896);
                            } else {
                              if (state_val_27909 === 2) {
                                var state_27908__$1 = state_27908;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_27908__$1, 4, ch);
                              } else {
                                if (state_val_27909 === 11) {
                                  var inst_27888 = state_27908[2];
                                  var inst_27889 = new Array(n);
                                  var inst_27872 = inst_27889;
                                  var inst_27873 = 0;
                                  var state_27908__$1 = function() {
                                    var statearr_27920 = state_27908;
                                    statearr_27920[7] = inst_27873;
                                    statearr_27920[10] = inst_27888;
                                    statearr_27920[8] = inst_27872;
                                    return statearr_27920;
                                  }();
                                  var statearr_27921_27947 = state_27908__$1;
                                  statearr_27921_27947[2] = null;
                                  statearr_27921_27947[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_27909 === 9) {
                                    var inst_27872 = state_27908[8];
                                    var inst_27886 = cljs.core.vec.call(null, inst_27872);
                                    var state_27908__$1 = state_27908;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_27908__$1, 11, out, inst_27886);
                                  } else {
                                    if (state_val_27909 === 5) {
                                      var inst_27881 = state_27908[11];
                                      var inst_27873 = state_27908[7];
                                      var inst_27876 = state_27908[9];
                                      var inst_27872 = state_27908[8];
                                      var inst_27880 = inst_27872[inst_27873] = inst_27876;
                                      var inst_27881__$1 = inst_27873 + 1;
                                      var inst_27882 = inst_27881__$1 < n;
                                      var state_27908__$1 = function() {
                                        var statearr_27922 = state_27908;
                                        statearr_27922[11] = inst_27881__$1;
                                        statearr_27922[12] = inst_27880;
                                        return statearr_27922;
                                      }();
                                      if (cljs.core.truth_(inst_27882)) {
                                        var statearr_27923_27948 = state_27908__$1;
                                        statearr_27923_27948[1] = 8;
                                      } else {
                                        var statearr_27924_27949 = state_27908__$1;
                                        statearr_27924_27949[1] = 9;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_27909 === 14) {
                                        var inst_27901 = state_27908[2];
                                        var inst_27902 = cljs.core.async.close_BANG_.call(null, out);
                                        var state_27908__$1 = function() {
                                          var statearr_27926 = state_27908;
                                          statearr_27926[13] = inst_27901;
                                          return statearr_27926;
                                        }();
                                        var statearr_27927_27950 = state_27908__$1;
                                        statearr_27927_27950[2] = inst_27902;
                                        statearr_27927_27950[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_27909 === 10) {
                                          var inst_27892 = state_27908[2];
                                          var state_27908__$1 = state_27908;
                                          var statearr_27928_27951 = state_27908__$1;
                                          statearr_27928_27951[2] = inst_27892;
                                          statearr_27928_27951[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_27909 === 8) {
                                            var inst_27881 = state_27908[11];
                                            var inst_27872 = state_27908[8];
                                            var tmp27925 = inst_27872;
                                            var inst_27872__$1 = tmp27925;
                                            var inst_27873 = inst_27881;
                                            var state_27908__$1 = function() {
                                              var statearr_27929 = state_27908;
                                              statearr_27929[7] = inst_27873;
                                              statearr_27929[8] = inst_27872__$1;
                                              return statearr_27929;
                                            }();
                                            var statearr_27930_27952 = state_27908__$1;
                                            statearr_27930_27952[2] = null;
                                            statearr_27930_27952[1] = 2;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5860__auto___27938, out);
          return function(switch__5845__auto__, c__5860__auto___27938, out) {
            return function() {
              var state_machine__5846__auto__ = null;
              var state_machine__5846__auto____0 = function() {
                var statearr_27934 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_27934[0] = state_machine__5846__auto__;
                statearr_27934[1] = 1;
                return statearr_27934;
              };
              var state_machine__5846__auto____1 = function(state_27908) {
                while (true) {
                  var ret_value__5847__auto__ = function() {
                    try {
                      while (true) {
                        var result__5848__auto__ = switch__5845__auto__.call(null, state_27908);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__5848__auto__;
                        }
                        break;
                      }
                    } catch (e27935) {
                      if (e27935 instanceof Object) {
                        var ex__5849__auto__ = e27935;
                        var statearr_27936_27953 = state_27908;
                        statearr_27936_27953[5] = ex__5849__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_27908);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e27935;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__27954 = state_27908;
                    state_27908 = G__27954;
                    continue;
                  } else {
                    return ret_value__5847__auto__;
                  }
                  break;
                }
              };
              state_machine__5846__auto__ = function(state_27908) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5846__auto____0.call(this);
                  case 1:
                    return state_machine__5846__auto____1.call(this, state_27908);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
              return state_machine__5846__auto__;
            }();
          }(switch__5845__auto__, c__5860__auto___27938, out);
        }();
        var state__5862__auto__ = function() {
          var statearr_27937 = f__5861__auto__.call(null);
          statearr_27937[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___27938;
          return statearr_27937;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
      };
    }(c__5860__auto___27938, out));
    return out;
  };
  partition = function(n, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, ch);
      case 3:
        return partition__3.call(this, n, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  return partition;
}();
cljs.core.async.partition_by = function() {
  var partition_by = null;
  var partition_by__2 = function(f, ch) {
    return partition_by.call(null, f, ch, null);
  };
  var partition_by__3 = function(f, ch, buf_or_n) {
    var out = cljs.core.async.chan.call(null, buf_or_n);
    var c__5860__auto___28097 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto___28097, out) {
      return function() {
        var f__5861__auto__ = function() {
          var switch__5845__auto__ = function(c__5860__auto___28097, out) {
            return function(state_28067) {
              var state_val_28068 = state_28067[1];
              if (state_val_28068 === 7) {
                var inst_28063 = state_28067[2];
                var state_28067__$1 = state_28067;
                var statearr_28069_28098 = state_28067__$1;
                statearr_28069_28098[2] = inst_28063;
                statearr_28069_28098[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_28068 === 1) {
                  var inst_28026 = [];
                  var inst_28027 = inst_28026;
                  var inst_28028 = new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123);
                  var state_28067__$1 = function() {
                    var statearr_28070 = state_28067;
                    statearr_28070[7] = inst_28028;
                    statearr_28070[8] = inst_28027;
                    return statearr_28070;
                  }();
                  var statearr_28071_28099 = state_28067__$1;
                  statearr_28071_28099[2] = null;
                  statearr_28071_28099[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_28068 === 4) {
                    var inst_28031 = state_28067[9];
                    var inst_28031__$1 = state_28067[2];
                    var inst_28032 = inst_28031__$1 == null;
                    var inst_28033 = cljs.core.not.call(null, inst_28032);
                    var state_28067__$1 = function() {
                      var statearr_28072 = state_28067;
                      statearr_28072[9] = inst_28031__$1;
                      return statearr_28072;
                    }();
                    if (inst_28033) {
                      var statearr_28073_28100 = state_28067__$1;
                      statearr_28073_28100[1] = 5;
                    } else {
                      var statearr_28074_28101 = state_28067__$1;
                      statearr_28074_28101[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_28068 === 15) {
                      var inst_28057 = state_28067[2];
                      var state_28067__$1 = state_28067;
                      var statearr_28075_28102 = state_28067__$1;
                      statearr_28075_28102[2] = inst_28057;
                      statearr_28075_28102[1] = 14;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_28068 === 13) {
                        var state_28067__$1 = state_28067;
                        var statearr_28076_28103 = state_28067__$1;
                        statearr_28076_28103[2] = null;
                        statearr_28076_28103[1] = 14;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_28068 === 6) {
                          var inst_28027 = state_28067[8];
                          var inst_28052 = inst_28027.length;
                          var inst_28053 = inst_28052 > 0;
                          var state_28067__$1 = state_28067;
                          if (cljs.core.truth_(inst_28053)) {
                            var statearr_28077_28104 = state_28067__$1;
                            statearr_28077_28104[1] = 12;
                          } else {
                            var statearr_28078_28105 = state_28067__$1;
                            statearr_28078_28105[1] = 13;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_28068 === 3) {
                            var inst_28065 = state_28067[2];
                            var state_28067__$1 = state_28067;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_28067__$1, inst_28065);
                          } else {
                            if (state_val_28068 === 12) {
                              var inst_28027 = state_28067[8];
                              var inst_28055 = cljs.core.vec.call(null, inst_28027);
                              var state_28067__$1 = state_28067;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_28067__$1, 15, out, inst_28055);
                            } else {
                              if (state_val_28068 === 2) {
                                var state_28067__$1 = state_28067;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_28067__$1, 4, ch);
                              } else {
                                if (state_val_28068 === 11) {
                                  var inst_28035 = state_28067[10];
                                  var inst_28031 = state_28067[9];
                                  var inst_28045 = state_28067[2];
                                  var inst_28046 = [];
                                  var inst_28047 = inst_28046.push(inst_28031);
                                  var inst_28027 = inst_28046;
                                  var inst_28028 = inst_28035;
                                  var state_28067__$1 = function() {
                                    var statearr_28079 = state_28067;
                                    statearr_28079[11] = inst_28045;
                                    statearr_28079[7] = inst_28028;
                                    statearr_28079[8] = inst_28027;
                                    statearr_28079[12] = inst_28047;
                                    return statearr_28079;
                                  }();
                                  var statearr_28080_28106 = state_28067__$1;
                                  statearr_28080_28106[2] = null;
                                  statearr_28080_28106[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_28068 === 9) {
                                    var inst_28027 = state_28067[8];
                                    var inst_28043 = cljs.core.vec.call(null, inst_28027);
                                    var state_28067__$1 = state_28067;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_28067__$1, 11, out, inst_28043);
                                  } else {
                                    if (state_val_28068 === 5) {
                                      var inst_28028 = state_28067[7];
                                      var inst_28035 = state_28067[10];
                                      var inst_28031 = state_28067[9];
                                      var inst_28035__$1 = f.call(null, inst_28031);
                                      var inst_28036 = cljs.core._EQ_.call(null, inst_28035__$1, inst_28028);
                                      var inst_28037 = cljs.core.keyword_identical_QMARK_.call(null, inst_28028, new cljs.core.Keyword("cljs.core.async", "nothing", "cljs.core.async/nothing", -69252123));
                                      var inst_28038 = inst_28036 || inst_28037;
                                      var state_28067__$1 = function() {
                                        var statearr_28081 = state_28067;
                                        statearr_28081[10] = inst_28035__$1;
                                        return statearr_28081;
                                      }();
                                      if (cljs.core.truth_(inst_28038)) {
                                        var statearr_28082_28107 = state_28067__$1;
                                        statearr_28082_28107[1] = 8;
                                      } else {
                                        var statearr_28083_28108 = state_28067__$1;
                                        statearr_28083_28108[1] = 9;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_28068 === 14) {
                                        var inst_28060 = state_28067[2];
                                        var inst_28061 = cljs.core.async.close_BANG_.call(null, out);
                                        var state_28067__$1 = function() {
                                          var statearr_28085 = state_28067;
                                          statearr_28085[13] = inst_28060;
                                          return statearr_28085;
                                        }();
                                        var statearr_28086_28109 = state_28067__$1;
                                        statearr_28086_28109[2] = inst_28061;
                                        statearr_28086_28109[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_28068 === 10) {
                                          var inst_28050 = state_28067[2];
                                          var state_28067__$1 = state_28067;
                                          var statearr_28087_28110 = state_28067__$1;
                                          statearr_28087_28110[2] = inst_28050;
                                          statearr_28087_28110[1] = 7;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_28068 === 8) {
                                            var inst_28027 = state_28067[8];
                                            var inst_28035 = state_28067[10];
                                            var inst_28031 = state_28067[9];
                                            var inst_28040 = inst_28027.push(inst_28031);
                                            var tmp28084 = inst_28027;
                                            var inst_28027__$1 = tmp28084;
                                            var inst_28028 = inst_28035;
                                            var state_28067__$1 = function() {
                                              var statearr_28088 = state_28067;
                                              statearr_28088[7] = inst_28028;
                                              statearr_28088[8] = inst_28027__$1;
                                              statearr_28088[14] = inst_28040;
                                              return statearr_28088;
                                            }();
                                            var statearr_28089_28111 = state_28067__$1;
                                            statearr_28089_28111[2] = null;
                                            statearr_28089_28111[1] = 2;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            return null;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5860__auto___28097, out);
          return function(switch__5845__auto__, c__5860__auto___28097, out) {
            return function() {
              var state_machine__5846__auto__ = null;
              var state_machine__5846__auto____0 = function() {
                var statearr_28093 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_28093[0] = state_machine__5846__auto__;
                statearr_28093[1] = 1;
                return statearr_28093;
              };
              var state_machine__5846__auto____1 = function(state_28067) {
                while (true) {
                  var ret_value__5847__auto__ = function() {
                    try {
                      while (true) {
                        var result__5848__auto__ = switch__5845__auto__.call(null, state_28067);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__5848__auto__;
                        }
                        break;
                      }
                    } catch (e28094) {
                      if (e28094 instanceof Object) {
                        var ex__5849__auto__ = e28094;
                        var statearr_28095_28112 = state_28067;
                        statearr_28095_28112[5] = ex__5849__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_28067);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e28094;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__28113 = state_28067;
                    state_28067 = G__28113;
                    continue;
                  } else {
                    return ret_value__5847__auto__;
                  }
                  break;
                }
              };
              state_machine__5846__auto__ = function(state_28067) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5846__auto____0.call(this);
                  case 1:
                    return state_machine__5846__auto____1.call(this, state_28067);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
              return state_machine__5846__auto__;
            }();
          }(switch__5845__auto__, c__5860__auto___28097, out);
        }();
        var state__5862__auto__ = function() {
          var statearr_28096 = f__5861__auto__.call(null);
          statearr_28096[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___28097;
          return statearr_28096;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
      };
    }(c__5860__auto___28097, out));
    return out;
  };
  partition_by = function(f, ch, buf_or_n) {
    switch(arguments.length) {
      case 2:
        return partition_by__2.call(this, f, ch);
      case 3:
        return partition_by__3.call(this, f, ch, buf_or_n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_by.cljs$core$IFn$_invoke$arity$2 = partition_by__2;
  partition_by.cljs$core$IFn$_invoke$arity$3 = partition_by__3;
  return partition_by;
}();
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.getVendorPrefixedName_ = function(eventName) {
  return goog.userAgent.WEBKIT ? "webkit" + eventName : goog.userAgent.OPERA ? "o" + eventName.toLowerCase() : eventName.toLowerCase();
};
goog.events.EventType = {CLICK:"click", RIGHTCLICK:"rightclick", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", MOUSEENTER:"mouseenter", MOUSELEAVE:"mouseleave", SELECTSTART:"selectstart", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", CHANGE:"change", 
SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONSOLEMESSAGE:"consolemessage", CONTEXTMENU:"contextmenu", DOMCONTENTLOADED:"DOMContentLoaded", ERROR:"error", HELP:"help", LOAD:"load", LOSECAPTURE:"losecapture", 
ORIENTATIONCHANGE:"orientationchange", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", ANIMATIONSTART:goog.events.getVendorPrefixedName_("AnimationStart"), ANIMATIONEND:goog.events.getVendorPrefixedName_("AnimationEnd"), 
ANIMATIONITERATION:goog.events.getVendorPrefixedName_("AnimationIteration"), TRANSITIONEND:goog.events.getVendorPrefixedName_("TransitionEnd"), POINTERDOWN:"pointerdown", POINTERUP:"pointerup", POINTERCANCEL:"pointercancel", POINTERMOVE:"pointermove", POINTEROVER:"pointerover", POINTEROUT:"pointerout", POINTERENTER:"pointerenter", POINTERLEAVE:"pointerleave", GOTPOINTERCAPTURE:"gotpointercapture", LOSTPOINTERCAPTURE:"lostpointercapture", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", 
MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERENTER:"MSPointerEnter", MSPOINTERHOVER:"MSPointerHover", MSPOINTERLEAVE:"MSPointerLeave", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROUT:"MSPointerOut", MSPOINTEROVER:"MSPointerOver", MSPOINTERUP:"MSPointerUp", TEXTINPUT:"textinput", 
COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend", EXIT:"exit", LOADABORT:"loadabort", LOADCOMMIT:"loadcommit", LOADREDIRECT:"loadredirect", LOADSTART:"loadstart", LOADSTOP:"loadstop", RESPONSIVE:"responsive", SIZECHANGED:"sizechanged", UNRESPONSIVE:"unresponsive", VISIBILITYCHANGE:"visibilitychange", STORAGE:"storage", DOMSUBTREEMODIFIED:"DOMSubtreeModified", DOMNODEINSERTED:"DOMNodeInserted", DOMNODEREMOVED:"DOMNodeRemoved", DOMNODEREMOVEDFROMDOCUMENT:"DOMNodeRemovedFromDocument", 
DOMNODEINSERTEDINTODOCUMENT:"DOMNodeInsertedIntoDocument", DOMATTRMODIFIED:"DOMAttrModified", DOMCHARACTERDATAMODIFIED:"DOMCharacterDataModified"};
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9b") || goog.userAgent.IE && 
goog.userAgent.isVersionOrHigher("8") || goog.userAgent.OPERA && goog.userAgent.isVersionOrHigher("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher("528"), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher("8") || goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || !!(goog.global["document"] && document.documentElement && "ontouchstart" in document.documentElement) || !!(goog.global["navigator"] && 
goog.global["navigator"]["msMaxTouchPoints"])};
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose = goog.abstractMethod;
goog.disposable.IDisposable.prototype.isDisposed = goog.abstractMethod;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.provide("goog.disposeAll");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    if (goog.Disposable.INCLUDE_STACK_ON_CREATION) {
      this.creationStack = (new Error).stack;
    }
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.define("goog.Disposable.MONITORING_MODE", 0);
goog.define("goog.Disposable.INCLUDE_STACK_ON_CREATION", true);
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.isDef(opt_scope) ? goog.bind(callback, opt_scope) : callback);
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.events.EventId");
goog.events.EventId = function(eventId) {
  this.id = eventId;
};
goog.events.EventId.prototype.toString = function() {
  return this.id;
};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.require("goog.events.EventId");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type instanceof goog.events.EventId ? String(type) : type;
  this.target = opt_target;
  this.currentTarget = this.target;
  this.propagationStopped_ = false;
  this.defaultPrevented = false;
  this.returnValue_ = true;
};
goog.events.Event.prototype.disposeInternal = function() {
};
goog.events.Event.prototype.dispose = function() {
};
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  goog.events.BrowserEvent.base(this, "constructor", opt_e ? opt_e.type : "");
  this.target = null;
  this.currentTarget = null;
  this.relatedTarget = null;
  this.offsetX = 0;
  this.offsetY = 0;
  this.clientX = 0;
  this.clientY = 0;
  this.screenX = 0;
  this.screenY = 0;
  this.button = 0;
  this.keyCode = 0;
  this.charCode = 0;
  this.ctrlKey = false;
  this.altKey = false;
  this.shiftKey = false;
  this.metaKey = false;
  this.state = null;
  this.platformModifierKey = false;
  this.event_ = null;
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
  this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
  this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
  this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
  this.screenX = e.screenX || 0;
  this.screenY = e.screenY || 0;
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return!!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey);
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.events.BrowserEvent.prototype.disposeInternal = function() {
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventId");
goog.events.Listenable = function() {
};
goog.events.Listenable.IMPLEMENTED_BY_PROP = "closure_listenable_" + (Math.random() * 1E6 | 0);
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return!!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.getParentEventTarget;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.key = goog.events.ListenableKey.reserveKey();
  this.callOnce = false;
  this.removed = false;
};
goog.define("goog.events.Listener.ENABLE_MONITORING", false);
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.markAsRemoved = function() {
  this.removed = true;
  this.listener = null;
  this.proxy = null;
  this.src = null;
  this.handler = null;
};
goog.provide("goog.events.ListenerMap");
goog.require("goog.array");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.ListenerMap = function(src) {
  this.src = src;
  this.listeners = {};
  this.typeCount_ = 0;
};
goog.events.ListenerMap.prototype.getTypeCount = function() {
  return this.typeCount_;
};
goog.events.ListenerMap.prototype.getListenerCount = function() {
  var count = 0;
  for (var type in this.listeners) {
    count += this.listeners[type].length;
  }
  return count;
};
goog.events.ListenerMap.prototype.add = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  var listenerArray = this.listeners[typeStr];
  if (!listenerArray) {
    listenerArray = this.listeners[typeStr] = [];
    this.typeCount_++;
  }
  var listenerObj;
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    listenerObj = listenerArray[index];
    if (!callOnce) {
      listenerObj.callOnce = false;
    }
  } else {
    listenerObj = new goog.events.Listener(listener, null, this.src, typeStr, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
  }
  return listenerObj;
};
goog.events.ListenerMap.prototype.remove = function(type, listener, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  if (!(typeStr in this.listeners)) {
    return false;
  }
  var listenerArray = this.listeners[typeStr];
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    var listenerObj = listenerArray[index];
    listenerObj.markAsRemoved();
    goog.array.removeAt(listenerArray, index);
    if (listenerArray.length == 0) {
      delete this.listeners[typeStr];
      this.typeCount_--;
    }
    return true;
  }
  return false;
};
goog.events.ListenerMap.prototype.removeByKey = function(listener) {
  var type = listener.type;
  if (!(type in this.listeners)) {
    return false;
  }
  var removed = goog.array.remove(this.listeners[type], listener);
  if (removed) {
    listener.markAsRemoved();
    if (this.listeners[type].length == 0) {
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return removed;
};
goog.events.ListenerMap.prototype.removeAll = function(opt_type) {
  var typeStr = opt_type && opt_type.toString();
  var count = 0;
  for (var type in this.listeners) {
    if (!typeStr || type == typeStr) {
      var listenerArray = this.listeners[type];
      for (var i = 0;i < listenerArray.length;i++) {
        ++count;
        listenerArray[i].markAsRemoved();
      }
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return count;
};
goog.events.ListenerMap.prototype.getListeners = function(type, capture) {
  var listenerArray = this.listeners[type.toString()];
  var rv = [];
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.capture == capture) {
        rv.push(listenerObj);
      }
    }
  }
  return rv;
};
goog.events.ListenerMap.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  var listenerArray = this.listeners[type.toString()];
  var i = -1;
  if (listenerArray) {
    i = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
  }
  return i > -1 ? listenerArray[i] : null;
};
goog.events.ListenerMap.prototype.hasListener = function(opt_type, opt_capture) {
  var hasType = goog.isDef(opt_type);
  var typeStr = hasType ? opt_type.toString() : "";
  var hasCapture = goog.isDef(opt_capture);
  return goog.object.some(this.listeners, function(listenerArray, type) {
    for (var i = 0;i < listenerArray.length;++i) {
      if ((!hasType || listenerArray[i].type == typeStr) && (!hasCapture || listenerArray[i].capture == opt_capture)) {
        return true;
      }
    }
    return false;
  });
};
goog.events.ListenerMap.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
  for (var i = 0;i < listenerArray.length;++i) {
    var listenerObj = listenerArray[i];
    if (!listenerObj.removed && listenerObj.listener == listener && listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope) {
      return i;
    }
  }
  return-1;
};
goog.provide("goog.events");
goog.provide("goog.events.CaptureSimulationMode");
goog.provide("goog.events.Key");
goog.provide("goog.events.ListenableType");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.forwardDeclare("goog.debug.ErrorHandler");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.Key;
goog.events.ListenableType;
goog.events.LISTENER_MAP_PROP_ = "closure_lm_" + (Math.random() * 1E6 | 0);
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.CaptureSimulationMode = {OFF_AND_FAIL:0, OFF_AND_SILENT:1, ON:2};
goog.define("goog.events.CAPTURE_SIMULATION_MODE", 2);
goog.events.listenerCountEstimate_ = 0;
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listen((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, false, opt_capt, opt_handler);
  }
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  if (capture && !goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_FAIL) {
      goog.asserts.fail("Can not register capture listener in IE8-.");
      return null;
    } else {
      if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_SILENT) {
        return null;
      }
    }
  }
  var listenerMap = goog.events.getListenerMap_(src);
  if (!listenerMap) {
    src[goog.events.LISTENER_MAP_PROP_] = listenerMap = new goog.events.ListenerMap(src);
  }
  var listenerObj = listenerMap.add(type, listener, callOnce, opt_capt, opt_handler);
  if (listenerObj.proxy) {
    return listenerObj;
  }
  var proxy = goog.events.getProxy();
  listenerObj.proxy = proxy;
  proxy.src = src;
  proxy.listener = listenerObj;
  if (src.addEventListener) {
    src.addEventListener(type.toString(), proxy, capture);
  } else {
    src.attachEvent(goog.events.getOnString_(type.toString()), proxy);
  }
  goog.events.listenerCountEstimate_++;
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listenOnce((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, true, opt_capt, opt_handler);
  }
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), listener, opt_capt, opt_handler);
  }
  if (!src) {
    return false;
  }
  var capture = !!opt_capt;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    var listenerObj = listenerMap.getListener((type), listener, capture, opt_handler);
    if (listenerObj) {
      return goog.events.unlistenByKey(listenerObj);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  if (goog.isNumber(key)) {
    return false;
  }
  var listener = (key);
  if (!listener || listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  if (src.removeEventListener) {
    src.removeEventListener(type, proxy, listener.capture);
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  goog.events.listenerCountEstimate_--;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    listenerMap.removeByKey(listener);
    if (listenerMap.getTypeCount() == 0) {
      listenerMap.src = null;
      src[goog.events.LISTENER_MAP_PROP_] = null;
    }
  } else {
    listener.markAsRemoved();
  }
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.removeAll = function(obj, opt_type) {
  if (!obj) {
    return 0;
  }
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.removeAllListeners(opt_type);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  if (!listenerMap) {
    return 0;
  }
  var count = 0;
  var typeStr = opt_type && opt_type.toString();
  for (var type in listenerMap.listeners) {
    if (!typeStr || type == typeStr) {
      var listeners = listenerMap.listeners[type].concat();
      for (var i = 0;i < listeners.length;++i) {
        if (goog.events.unlistenByKey(listeners[i])) {
          ++count;
        }
      }
    }
  }
  return count;
};
goog.events.removeAllNativeListeners = function() {
  goog.events.listenerCountEstimate_ = 0;
  return 0;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    if (!obj) {
      return[];
    }
    var listenerMap = goog.events.getListenerMap_((obj));
    return listenerMap ? listenerMap.getListeners(type, capture) : [];
  }
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  type = (type);
  listener = goog.events.wrapListener(listener);
  var capture = !!opt_capt;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener(type, listener, capture, opt_handler);
  }
  if (!src) {
    return null;
  }
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    return listenerMap.getListener(type, listener, capture, opt_handler);
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  return!!listenerMap && listenerMap.hasListener(opt_type, opt_capture);
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  return goog.events.fireListeners_(obj, type, capture, eventObject);
};
goog.events.fireListeners_ = function(obj, type, capture, eventObject) {
  var retval = 1;
  var listenerMap = goog.events.getListenerMap_((obj));
  if (listenerMap) {
    var listenerArray = listenerMap.listeners[type.toString()];
    if (listenerArray) {
      listenerArray = listenerArray.concat();
      for (var i = 0;i < listenerArray.length;i++) {
        var listener = listenerArray[i];
        if (listener && listener.capture == capture && !listener.removed) {
          retval &= goog.events.fireListener(listener, eventObject) !== false;
        }
      }
    }
  }
  return Boolean(retval);
};
goog.events.fireListener = function(listener, eventObject) {
  var listenerFn = listener.listener;
  var listenerHandler = listener.handler || listener.src;
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener);
  }
  return listenerFn.call(listenerHandler, eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.events.listenerCountEstimate_;
};
goog.events.dispatchEvent = function(src, e) {
  goog.asserts.assert(goog.events.Listenable.isImplementedBy(src), "Can not use goog.events.dispatchEvent with " + "non-goog.events.Listenable instance.");
  return src.dispatchEvent(e);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var evt = new goog.events.BrowserEvent(ieEvent, this);
    var retval = true;
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.ON) {
      if (!goog.events.isMarkedIeEvent_(ieEvent)) {
        goog.events.markIeEvent_(ieEvent);
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        var type = listener.type;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && i >= 0;i--) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, true, evt);
        }
        for (var i = 0;!evt.propagationStopped_ && i < ancestors.length;i++) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, false, evt);
        }
      }
    } else {
      retval = goog.events.fireListener(listener, evt);
    }
    return retval;
  }
  return goog.events.fireListener(listener, new goog.events.BrowserEvent(opt_evt, this));
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.getListenerMap_ = function(src) {
  var listenerMap = src[goog.events.LISTENER_MAP_PROP_];
  return listenerMap instanceof goog.events.ListenerMap ? listenerMap : null;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener = function(listener) {
  goog.asserts.assert(listener, "Listener can not be null.");
  if (goog.isFunction(listener)) {
    return listener;
  }
  goog.asserts.assert(listener.handleEvent, "An object listener must have handleEvent method.");
  if (!listener[goog.events.LISTENER_WRAPPER_PROP_]) {
    listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
      return listener.handleEvent(e);
    };
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_];
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("wilkerdev.util.reactive");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("goog.events.EventType");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
goog.require("goog.events");
goog.require("goog.events");
goog.require("goog.Uri");
goog.require("goog.net.Jsonp");
wilkerdev.util.reactive.browser_log = function() {
  var browser_log__delegate = function(params) {
    console.log.apply(console, cljs.core.clj__GT_js.call(null, params));
    return cljs.core.last.call(null, params);
  };
  var browser_log = function(var_args) {
    var params = null;
    if (arguments.length > 0) {
      params = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return browser_log__delegate.call(this, params);
  };
  browser_log.cljs$lang$maxFixedArity = 0;
  browser_log.cljs$lang$applyTo = function(arglist__20700) {
    var params = cljs.core.seq(arglist__20700);
    return browser_log__delegate(params);
  };
  browser_log.cljs$core$IFn$_invoke$arity$variadic = browser_log__delegate;
  return browser_log;
}();
wilkerdev.util.reactive.js_error_QMARK_ = cljs.core.partial.call(null, cljs.core.instance_QMARK_, Error);
wilkerdev.util.reactive.remove_js_errors = cljs.core.remove.call(null, wilkerdev.util.reactive.js_error_QMARK_);
wilkerdev.util.reactive.throw_err = function throw_err(e) {
  if (cljs.core.truth_(wilkerdev.util.reactive.js_error_QMARK_.call(null, e))) {
    throw e;
  } else {
  }
  return e;
};
wilkerdev.util.reactive.log = function() {
  var log = null;
  var log__1 = function(in$) {
    return log.call(null, null, in$);
  };
  var log__2 = function(prefix, in$) {
    var out = cljs.core.async.chan.call(null);
    var chan__20106__auto___20783 = in$;
    var c__5860__auto___20784 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto___20784, chan__20106__auto___20783, out) {
      return function() {
        var f__5861__auto__ = function() {
          var switch__5845__auto__ = function(c__5860__auto___20784, chan__20106__auto___20783, out) {
            return function(state_20761) {
              var state_val_20762 = state_20761[1];
              if (state_val_20762 === 7) {
                var inst_20757 = state_20761[2];
                var state_20761__$1 = state_20761;
                var statearr_20763_20785 = state_20761__$1;
                statearr_20763_20785[2] = inst_20757;
                statearr_20763_20785[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_20762 === 1) {
                  var state_20761__$1 = state_20761;
                  var statearr_20764_20786 = state_20761__$1;
                  statearr_20764_20786[2] = null;
                  statearr_20764_20786[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_20762 === 4) {
                    var inst_20744 = state_20761[7];
                    var inst_20744__$1 = state_20761[2];
                    var state_20761__$1 = function() {
                      var statearr_20765 = state_20761;
                      statearr_20765[7] = inst_20744__$1;
                      return statearr_20765;
                    }();
                    if (cljs.core.truth_(inst_20744__$1)) {
                      var statearr_20766_20787 = state_20761__$1;
                      statearr_20766_20787[1] = 5;
                    } else {
                      var statearr_20767_20788 = state_20761__$1;
                      statearr_20767_20788[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_20762 === 6) {
                      var state_20761__$1 = state_20761;
                      var statearr_20768_20789 = state_20761__$1;
                      statearr_20768_20789[2] = new cljs.core.Keyword(null, "done", "done", -889844188);
                      statearr_20768_20789[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_20762 === 3) {
                        var inst_20759 = state_20761[2];
                        var state_20761__$1 = state_20761;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20761__$1, inst_20759);
                      } else {
                        if (state_val_20762 === 2) {
                          var state_20761__$1 = state_20761;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_20761__$1, 4, chan__20106__auto___20783);
                        } else {
                          if (state_val_20762 === 11) {
                            var inst_20753 = state_20761[2];
                            var state_20761__$1 = function() {
                              var statearr_20769 = state_20761;
                              statearr_20769[8] = inst_20753;
                              return statearr_20769;
                            }();
                            var statearr_20770_20790 = state_20761__$1;
                            statearr_20770_20790[2] = null;
                            statearr_20770_20790[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_20762 === 9) {
                              var inst_20744 = state_20761[7];
                              var inst_20749 = wilkerdev.util.reactive.browser_log.call(null, inst_20744);
                              var state_20761__$1 = state_20761;
                              var statearr_20771_20791 = state_20761__$1;
                              statearr_20771_20791[2] = inst_20749;
                              statearr_20771_20791[1] = 10;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_20762 === 5) {
                                var state_20761__$1 = state_20761;
                                if (cljs.core.truth_(prefix)) {
                                  var statearr_20772_20792 = state_20761__$1;
                                  statearr_20772_20792[1] = 8;
                                } else {
                                  var statearr_20773_20793 = state_20761__$1;
                                  statearr_20773_20793[1] = 9;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_20762 === 10) {
                                  var inst_20744 = state_20761[7];
                                  var inst_20751 = state_20761[2];
                                  var state_20761__$1 = function() {
                                    var statearr_20774 = state_20761;
                                    statearr_20774[9] = inst_20751;
                                    return statearr_20774;
                                  }();
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_20761__$1, 11, out, inst_20744);
                                } else {
                                  if (state_val_20762 === 8) {
                                    var inst_20744 = state_20761[7];
                                    var inst_20747 = wilkerdev.util.reactive.browser_log.call(null, prefix, inst_20744);
                                    var state_20761__$1 = state_20761;
                                    var statearr_20775_20794 = state_20761__$1;
                                    statearr_20775_20794[2] = inst_20747;
                                    statearr_20775_20794[1] = 10;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5860__auto___20784, chan__20106__auto___20783, out);
          return function(switch__5845__auto__, c__5860__auto___20784, chan__20106__auto___20783, out) {
            return function() {
              var state_machine__5846__auto__ = null;
              var state_machine__5846__auto____0 = function() {
                var statearr_20779 = [null, null, null, null, null, null, null, null, null, null];
                statearr_20779[0] = state_machine__5846__auto__;
                statearr_20779[1] = 1;
                return statearr_20779;
              };
              var state_machine__5846__auto____1 = function(state_20761) {
                while (true) {
                  var ret_value__5847__auto__ = function() {
                    try {
                      while (true) {
                        var result__5848__auto__ = switch__5845__auto__.call(null, state_20761);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__5848__auto__;
                        }
                        break;
                      }
                    } catch (e20780) {
                      if (e20780 instanceof Object) {
                        var ex__5849__auto__ = e20780;
                        var statearr_20781_20795 = state_20761;
                        statearr_20781_20795[5] = ex__5849__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20761);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e20780;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__20796 = state_20761;
                    state_20761 = G__20796;
                    continue;
                  } else {
                    return ret_value__5847__auto__;
                  }
                  break;
                }
              };
              state_machine__5846__auto__ = function(state_20761) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5846__auto____0.call(this);
                  case 1:
                    return state_machine__5846__auto____1.call(this, state_20761);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
              return state_machine__5846__auto__;
            }();
          }(switch__5845__auto__, c__5860__auto___20784, chan__20106__auto___20783, out);
        }();
        var state__5862__auto__ = function() {
          var statearr_20782 = f__5861__auto__.call(null);
          statearr_20782[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___20784;
          return statearr_20782;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
      };
    }(c__5860__auto___20784, chan__20106__auto___20783, out));
    return out;
  };
  log = function(prefix, in$) {
    switch(arguments.length) {
      case 1:
        return log__1.call(this, prefix);
      case 2:
        return log__2.call(this, prefix, in$);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  log.cljs$core$IFn$_invoke$arity$1 = log__1;
  log.cljs$core$IFn$_invoke$arity$2 = log__2;
  return log;
}();
wilkerdev.util.reactive.listen = function() {
  var listen = null;
  var listen__2 = function(el, evt) {
    return listen.call(null, el, evt, cljs.core.async.chan.call(null));
  };
  var listen__3 = function(el, evt, c) {
    goog.events.listen(el, evt, function(p1__20797_SHARP_) {
      return cljs.core.async.put_BANG_.call(null, c, p1__20797_SHARP_);
    });
    return c;
  };
  listen = function(el, evt, c) {
    switch(arguments.length) {
      case 2:
        return listen__2.call(this, el, evt);
      case 3:
        return listen__3.call(this, el, evt, c);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  listen.cljs$core$IFn$_invoke$arity$2 = listen__2;
  listen.cljs$core$IFn$_invoke$arity$3 = listen__3;
  return listen;
}();
wilkerdev.util.reactive.expand_value = function expand_value(c) {
  var out = cljs.core.async.chan.call(null);
  var c__5860__auto___20958 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto___20958, out) {
    return function() {
      var f__5861__auto__ = function() {
        var switch__5845__auto__ = function(c__5860__auto___20958, out) {
          return function(state_20920) {
            var state_val_20921 = state_20920[1];
            if (state_val_20921 === 7) {
              var state_20920__$1 = state_20920;
              var statearr_20923_20959 = state_20920__$1;
              statearr_20923_20959[1] = 11;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_20921 === 20) {
                var inst_20878 = state_20920[7];
                var state_20920__$1 = state_20920;
                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_20920__$1, 23, out, inst_20878);
              } else {
                if (state_val_20921 === 1) {
                  var inst_20878 = c;
                  var state_20920__$1 = function() {
                    var statearr_20924 = state_20920;
                    statearr_20924[7] = inst_20878;
                    return statearr_20924;
                  }();
                  var statearr_20925_20960 = state_20920__$1;
                  statearr_20925_20960[2] = null;
                  statearr_20925_20960[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_20921 === 4) {
                    var inst_20878 = state_20920[7];
                    var state_20920__$1 = state_20920;
                    if (cljs.core.truth_(inst_20878)) {
                      var statearr_20926_20961 = state_20920__$1;
                      statearr_20926_20961[1] = 7;
                    } else {
                      var statearr_20927_20962 = state_20920__$1;
                      statearr_20927_20962[1] = 8;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_20921 === 15) {
                      var inst_20898 = state_20920[2];
                      var state_20920__$1 = state_20920;
                      var statearr_20928_20963 = state_20920__$1;
                      statearr_20928_20963[2] = inst_20898;
                      statearr_20928_20963[1] = 9;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_20921 === 21) {
                        var inst_20912 = state_20920[2];
                        var state_20920__$1 = state_20920;
                        var statearr_20929_20964 = state_20920__$1;
                        statearr_20929_20964[2] = inst_20912;
                        statearr_20929_20964[1] = 6;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_20921 === 13) {
                          var state_20920__$1 = state_20920;
                          var statearr_20930_20965 = state_20920__$1;
                          statearr_20930_20965[2] = true;
                          statearr_20930_20965[1] = 15;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_20921 === 22) {
                            var inst_20905 = state_20920[2];
                            var inst_20878 = inst_20905;
                            var state_20920__$1 = function() {
                              var statearr_20931 = state_20920;
                              statearr_20931[7] = inst_20878;
                              return statearr_20931;
                            }();
                            var statearr_20932_20966 = state_20920__$1;
                            statearr_20932_20966[2] = null;
                            statearr_20932_20966[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_20921 === 6) {
                              var inst_20916 = state_20920[2];
                              var state_20920__$1 = state_20920;
                              var statearr_20933_20967 = state_20920__$1;
                              statearr_20933_20967[2] = inst_20916;
                              statearr_20933_20967[1] = 3;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_20921 === 17) {
                                var state_20920__$1 = state_20920;
                                var statearr_20934_20968 = state_20920__$1;
                                statearr_20934_20968[2] = false;
                                statearr_20934_20968[1] = 18;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_20921 === 3) {
                                  var inst_20918 = state_20920[2];
                                  var state_20920__$1 = state_20920;
                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20920__$1, inst_20918);
                                } else {
                                  if (state_val_20921 === 12) {
                                    var inst_20887 = state_20920[2];
                                    var state_20920__$1 = state_20920;
                                    if (cljs.core.truth_(inst_20887)) {
                                      var statearr_20935_20969 = state_20920__$1;
                                      statearr_20935_20969[1] = 13;
                                    } else {
                                      var statearr_20936_20970 = state_20920__$1;
                                      statearr_20936_20970[1] = 14;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_20921 === 2) {
                                      var inst_20878 = state_20920[7];
                                      var state_20920__$1 = state_20920;
                                      if (cljs.core.truth_(inst_20878)) {
                                        var statearr_20937_20971 = state_20920__$1;
                                        statearr_20937_20971[1] = 4;
                                      } else {
                                        var statearr_20938_20972 = state_20920__$1;
                                        statearr_20938_20972[1] = 5;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_20921 === 23) {
                                        var inst_20909 = state_20920[2];
                                        var inst_20910 = cljs.core.async.close_BANG_.call(null, out);
                                        var state_20920__$1 = function() {
                                          var statearr_20939 = state_20920;
                                          statearr_20939[8] = inst_20909;
                                          return statearr_20939;
                                        }();
                                        var statearr_20940_20973 = state_20920__$1;
                                        statearr_20940_20973[2] = inst_20910;
                                        statearr_20940_20973[1] = 21;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_20921 === 19) {
                                          var inst_20878 = state_20920[7];
                                          var state_20920__$1 = state_20920;
                                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_20920__$1, 22, inst_20878);
                                        } else {
                                          if (state_val_20921 === 11) {
                                            var inst_20878 = state_20920[7];
                                            var inst_20885 = inst_20878.cljs$core$async$impl$protocols$ReadPort$;
                                            var state_20920__$1 = state_20920;
                                            var statearr_20941_20974 = state_20920__$1;
                                            statearr_20941_20974[2] = inst_20885;
                                            statearr_20941_20974[1] = 12;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_20921 === 9) {
                                              var inst_20902 = state_20920[2];
                                              var state_20920__$1 = state_20920;
                                              if (cljs.core.truth_(inst_20902)) {
                                                var statearr_20942_20975 = state_20920__$1;
                                                statearr_20942_20975[1] = 19;
                                              } else {
                                                var statearr_20943_20976 = state_20920__$1;
                                                statearr_20943_20976[1] = 20;
                                              }
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_20921 === 5) {
                                                var inst_20914 = cljs.core.async.close_BANG_.call(null, out);
                                                var state_20920__$1 = state_20920;
                                                var statearr_20944_20977 = state_20920__$1;
                                                statearr_20944_20977[2] = inst_20914;
                                                statearr_20944_20977[1] = 6;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_20921 === 14) {
                                                  var inst_20878 = state_20920[7];
                                                  var inst_20890 = inst_20878.cljs$lang$protocol_mask$partition$;
                                                  var inst_20891 = !inst_20890;
                                                  var state_20920__$1 = state_20920;
                                                  if (cljs.core.truth_(inst_20891)) {
                                                    var statearr_20945_20978 = state_20920__$1;
                                                    statearr_20945_20978[1] = 16;
                                                  } else {
                                                    var statearr_20946_20979 = state_20920__$1;
                                                    statearr_20946_20979[1] = 17;
                                                  }
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_20921 === 16) {
                                                    var inst_20878 = state_20920[7];
                                                    var inst_20893 = cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.ReadPort, inst_20878);
                                                    var state_20920__$1 = state_20920;
                                                    var statearr_20947_20980 = state_20920__$1;
                                                    statearr_20947_20980[2] = inst_20893;
                                                    statearr_20947_20980[1] = 18;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_20921 === 10) {
                                                      var state_20920__$1 = state_20920;
                                                      var statearr_20948_20981 = state_20920__$1;
                                                      statearr_20948_20981[2] = null;
                                                      statearr_20948_20981[1] = 12;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_20921 === 18) {
                                                        var inst_20896 = state_20920[2];
                                                        var state_20920__$1 = state_20920;
                                                        var statearr_20949_20982 = state_20920__$1;
                                                        statearr_20949_20982[2] = inst_20896;
                                                        statearr_20949_20982[1] = 15;
                                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                      } else {
                                                        if (state_val_20921 === 8) {
                                                          var inst_20878 = state_20920[7];
                                                          var inst_20900 = cljs.core.native_satisfies_QMARK_.call(null, cljs.core.async.impl.protocols.ReadPort, inst_20878);
                                                          var state_20920__$1 = state_20920;
                                                          var statearr_20950_20983 = state_20920__$1;
                                                          statearr_20950_20983[2] = inst_20900;
                                                          statearr_20950_20983[1] = 9;
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          return null;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5860__auto___20958, out);
        return function(switch__5845__auto__, c__5860__auto___20958, out) {
          return function() {
            var state_machine__5846__auto__ = null;
            var state_machine__5846__auto____0 = function() {
              var statearr_20954 = [null, null, null, null, null, null, null, null, null];
              statearr_20954[0] = state_machine__5846__auto__;
              statearr_20954[1] = 1;
              return statearr_20954;
            };
            var state_machine__5846__auto____1 = function(state_20920) {
              while (true) {
                var ret_value__5847__auto__ = function() {
                  try {
                    while (true) {
                      var result__5848__auto__ = switch__5845__auto__.call(null, state_20920);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__5848__auto__;
                      }
                      break;
                    }
                  } catch (e20955) {
                    if (e20955 instanceof Object) {
                      var ex__5849__auto__ = e20955;
                      var statearr_20956_20984 = state_20920;
                      statearr_20956_20984[5] = ex__5849__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20920);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e20955;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__20985 = state_20920;
                  state_20920 = G__20985;
                  continue;
                } else {
                  return ret_value__5847__auto__;
                }
                break;
              }
            };
            state_machine__5846__auto__ = function(state_20920) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5846__auto____0.call(this);
                case 1:
                  return state_machine__5846__auto____1.call(this, state_20920);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
            return state_machine__5846__auto__;
          }();
        }(switch__5845__auto__, c__5860__auto___20958, out);
      }();
      var state__5862__auto__ = function() {
        var statearr_20957 = f__5861__auto__.call(null);
        statearr_20957[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___20958;
        return statearr_20957;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
    };
  }(c__5860__auto___20958, out));
  return out;
};
wilkerdev.util.reactive.map = function map(f, in$) {
  var out = cljs.core.async.chan.call(null);
  var c__5860__auto___21050 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto___21050, out) {
    return function() {
      var f__5861__auto__ = function() {
        var switch__5845__auto__ = function(c__5860__auto___21050, out) {
          return function(state_21033) {
            var state_val_21034 = state_21033[1];
            if (state_val_21034 === 8) {
              var inst_21024 = state_21033[2];
              var state_21033__$1 = function() {
                var statearr_21035 = state_21033;
                statearr_21035[7] = inst_21024;
                return statearr_21035;
              }();
              var statearr_21036_21051 = state_21033__$1;
              statearr_21036_21051[2] = null;
              statearr_21036_21051[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_21034 === 7) {
                var inst_21029 = state_21033[2];
                var state_21033__$1 = state_21033;
                var statearr_21037_21052 = state_21033__$1;
                statearr_21037_21052[2] = inst_21029;
                statearr_21037_21052[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_21034 === 6) {
                  var inst_21027 = cljs.core.async.close_BANG_.call(null, out);
                  var state_21033__$1 = state_21033;
                  var statearr_21038_21053 = state_21033__$1;
                  statearr_21038_21053[2] = inst_21027;
                  statearr_21038_21053[1] = 7;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_21034 === 5) {
                    var inst_21020 = state_21033[8];
                    var inst_21022 = f.call(null, inst_21020);
                    var state_21033__$1 = state_21033;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21033__$1, 8, out, inst_21022);
                  } else {
                    if (state_val_21034 === 4) {
                      var inst_21020 = state_21033[8];
                      var inst_21020__$1 = state_21033[2];
                      var state_21033__$1 = function() {
                        var statearr_21039 = state_21033;
                        statearr_21039[8] = inst_21020__$1;
                        return statearr_21039;
                      }();
                      if (cljs.core.truth_(inst_21020__$1)) {
                        var statearr_21040_21054 = state_21033__$1;
                        statearr_21040_21054[1] = 5;
                      } else {
                        var statearr_21041_21055 = state_21033__$1;
                        statearr_21041_21055[1] = 6;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_21034 === 3) {
                        var inst_21031 = state_21033[2];
                        var state_21033__$1 = state_21033;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21033__$1, inst_21031);
                      } else {
                        if (state_val_21034 === 2) {
                          var state_21033__$1 = state_21033;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21033__$1, 4, in$);
                        } else {
                          if (state_val_21034 === 1) {
                            var state_21033__$1 = state_21033;
                            var statearr_21042_21056 = state_21033__$1;
                            statearr_21042_21056[2] = null;
                            statearr_21042_21056[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            return null;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5860__auto___21050, out);
        return function(switch__5845__auto__, c__5860__auto___21050, out) {
          return function() {
            var state_machine__5846__auto__ = null;
            var state_machine__5846__auto____0 = function() {
              var statearr_21046 = [null, null, null, null, null, null, null, null, null];
              statearr_21046[0] = state_machine__5846__auto__;
              statearr_21046[1] = 1;
              return statearr_21046;
            };
            var state_machine__5846__auto____1 = function(state_21033) {
              while (true) {
                var ret_value__5847__auto__ = function() {
                  try {
                    while (true) {
                      var result__5848__auto__ = switch__5845__auto__.call(null, state_21033);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__5848__auto__;
                      }
                      break;
                    }
                  } catch (e21047) {
                    if (e21047 instanceof Object) {
                      var ex__5849__auto__ = e21047;
                      var statearr_21048_21057 = state_21033;
                      statearr_21048_21057[5] = ex__5849__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21033);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e21047;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__21058 = state_21033;
                  state_21033 = G__21058;
                  continue;
                } else {
                  return ret_value__5847__auto__;
                }
                break;
              }
            };
            state_machine__5846__auto__ = function(state_21033) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5846__auto____0.call(this);
                case 1:
                  return state_machine__5846__auto____1.call(this, state_21033);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
            return state_machine__5846__auto__;
          }();
        }(switch__5845__auto__, c__5860__auto___21050, out);
      }();
      var state__5862__auto__ = function() {
        var statearr_21049 = f__5861__auto__.call(null);
        statearr_21049[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___21050;
        return statearr_21049;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
    };
  }(c__5860__auto___21050, out));
  return out;
};
wilkerdev.util.reactive.keep = function keep(f, in$) {
  var out = cljs.core.async.chan.call(null);
  var c__5860__auto___21141 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto___21141, out) {
    return function() {
      var f__5861__auto__ = function() {
        var switch__5845__auto__ = function(c__5860__auto___21141, out) {
          return function(state_21119) {
            var state_val_21120 = state_21119[1];
            if (state_val_21120 === 7) {
              var inst_21115 = state_21119[2];
              var state_21119__$1 = state_21119;
              var statearr_21121_21142 = state_21119__$1;
              statearr_21121_21142[2] = inst_21115;
              statearr_21121_21142[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_21120 === 1) {
                var state_21119__$1 = state_21119;
                var statearr_21122_21143 = state_21119__$1;
                statearr_21122_21143[2] = null;
                statearr_21122_21143[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_21120 === 4) {
                  var inst_21102 = state_21119[7];
                  var inst_21102__$1 = state_21119[2];
                  var state_21119__$1 = function() {
                    var statearr_21123 = state_21119;
                    statearr_21123[7] = inst_21102__$1;
                    return statearr_21123;
                  }();
                  if (cljs.core.truth_(inst_21102__$1)) {
                    var statearr_21124_21144 = state_21119__$1;
                    statearr_21124_21144[1] = 5;
                  } else {
                    var statearr_21125_21145 = state_21119__$1;
                    statearr_21125_21145[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_21120 === 6) {
                    var inst_21113 = cljs.core.async.close_BANG_.call(null, out);
                    var state_21119__$1 = state_21119;
                    var statearr_21126_21146 = state_21119__$1;
                    statearr_21126_21146[2] = inst_21113;
                    statearr_21126_21146[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_21120 === 3) {
                      var inst_21117 = state_21119[2];
                      var state_21119__$1 = state_21119;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21119__$1, inst_21117);
                    } else {
                      if (state_val_21120 === 2) {
                        var state_21119__$1 = state_21119;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21119__$1, 4, in$);
                      } else {
                        if (state_val_21120 === 11) {
                          var inst_21107 = state_21119[2];
                          var state_21119__$1 = state_21119;
                          var statearr_21127_21147 = state_21119__$1;
                          statearr_21127_21147[2] = inst_21107;
                          statearr_21127_21147[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_21120 === 9) {
                            var state_21119__$1 = state_21119;
                            var statearr_21128_21148 = state_21119__$1;
                            statearr_21128_21148[2] = null;
                            statearr_21128_21148[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_21120 === 5) {
                              var inst_21102 = state_21119[7];
                              var inst_21104 = state_21119[8];
                              var inst_21104__$1 = f.call(null, inst_21102);
                              var state_21119__$1 = function() {
                                var statearr_21129 = state_21119;
                                statearr_21129[8] = inst_21104__$1;
                                return statearr_21129;
                              }();
                              if (cljs.core.truth_(inst_21104__$1)) {
                                var statearr_21130_21149 = state_21119__$1;
                                statearr_21130_21149[1] = 8;
                              } else {
                                var statearr_21131_21150 = state_21119__$1;
                                statearr_21131_21150[1] = 9;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_21120 === 10) {
                                var inst_21110 = state_21119[2];
                                var state_21119__$1 = function() {
                                  var statearr_21132 = state_21119;
                                  statearr_21132[9] = inst_21110;
                                  return statearr_21132;
                                }();
                                var statearr_21133_21151 = state_21119__$1;
                                statearr_21133_21151[2] = null;
                                statearr_21133_21151[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_21120 === 8) {
                                  var inst_21104 = state_21119[8];
                                  var state_21119__$1 = state_21119;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21119__$1, 11, out, inst_21104);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5860__auto___21141, out);
        return function(switch__5845__auto__, c__5860__auto___21141, out) {
          return function() {
            var state_machine__5846__auto__ = null;
            var state_machine__5846__auto____0 = function() {
              var statearr_21137 = [null, null, null, null, null, null, null, null, null, null];
              statearr_21137[0] = state_machine__5846__auto__;
              statearr_21137[1] = 1;
              return statearr_21137;
            };
            var state_machine__5846__auto____1 = function(state_21119) {
              while (true) {
                var ret_value__5847__auto__ = function() {
                  try {
                    while (true) {
                      var result__5848__auto__ = switch__5845__auto__.call(null, state_21119);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__5848__auto__;
                      }
                      break;
                    }
                  } catch (e21138) {
                    if (e21138 instanceof Object) {
                      var ex__5849__auto__ = e21138;
                      var statearr_21139_21152 = state_21119;
                      statearr_21139_21152[5] = ex__5849__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21119);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e21138;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__21153 = state_21119;
                  state_21119 = G__21153;
                  continue;
                } else {
                  return ret_value__5847__auto__;
                }
                break;
              }
            };
            state_machine__5846__auto__ = function(state_21119) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5846__auto____0.call(this);
                case 1:
                  return state_machine__5846__auto____1.call(this, state_21119);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
            return state_machine__5846__auto__;
          }();
        }(switch__5845__auto__, c__5860__auto___21141, out);
      }();
      var state__5862__auto__ = function() {
        var statearr_21140 = f__5861__auto__.call(null);
        statearr_21140[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___21141;
        return statearr_21140;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
    };
  }(c__5860__auto___21141, out));
  return out;
};
wilkerdev.util.reactive.mapchan = function() {
  var mapchan = null;
  var mapchan__1 = function(in$) {
    return mapchan.call(null, null, in$);
  };
  var mapchan__2 = function(f, in$) {
    var out = cljs.core.async.chan.call(null);
    var c__5860__auto___21296 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto___21296, out) {
      return function() {
        var f__5861__auto__ = function() {
          var switch__5845__auto__ = function(c__5860__auto___21296, out) {
            return function(state_21260) {
              var state_val_21261 = state_21260[1];
              if (state_val_21261 === 7) {
                var inst_21256 = state_21260[2];
                var state_21260__$1 = state_21260;
                var statearr_21262_21297 = state_21260__$1;
                statearr_21262_21297[2] = inst_21256;
                statearr_21262_21297[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_21261 === 1) {
                  var state_21260__$1 = state_21260;
                  var statearr_21263_21298 = state_21260__$1;
                  statearr_21263_21298[2] = null;
                  statearr_21263_21298[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_21261 === 4) {
                    var inst_21227 = state_21260[7];
                    var inst_21227__$1 = state_21260[2];
                    var state_21260__$1 = function() {
                      var statearr_21264 = state_21260;
                      statearr_21264[7] = inst_21227__$1;
                      return statearr_21264;
                    }();
                    if (cljs.core.truth_(inst_21227__$1)) {
                      var statearr_21265_21299 = state_21260__$1;
                      statearr_21265_21299[1] = 5;
                    } else {
                      var statearr_21266_21300 = state_21260__$1;
                      statearr_21266_21300[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_21261 === 6) {
                      var inst_21254 = cljs.core.async.close_BANG_.call(null, out);
                      var state_21260__$1 = state_21260;
                      var statearr_21267_21301 = state_21260__$1;
                      statearr_21267_21301[2] = inst_21254;
                      statearr_21267_21301[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_21261 === 3) {
                        var inst_21258 = state_21260[2];
                        var state_21260__$1 = state_21260;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21260__$1, inst_21258);
                      } else {
                        if (state_val_21261 === 2) {
                          var state_21260__$1 = state_21260;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21260__$1, 4, in$);
                        } else {
                          if (state_val_21261 === 9) {
                            var inst_21227 = state_21260[7];
                            var state_21260__$1 = state_21260;
                            var statearr_21268_21302 = state_21260__$1;
                            statearr_21268_21302[2] = inst_21227;
                            statearr_21268_21302[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_21261 === 5) {
                              var state_21260__$1 = state_21260;
                              if (cljs.core.truth_(f)) {
                                var statearr_21269_21303 = state_21260__$1;
                                statearr_21269_21303[1] = 8;
                              } else {
                                var statearr_21270_21304 = state_21260__$1;
                                statearr_21270_21304[1] = 9;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_21261 === 10) {
                                var inst_21227 = state_21260[7];
                                var inst_21233 = state_21260[2];
                                var inst_21249 = cljs.core.async.chan.call(null, 1);
                                var inst_21250 = function() {
                                  var c__5860__auto____$1 = inst_21249;
                                  var chan__20106__auto__ = inst_21233;
                                  var x = inst_21227;
                                  var temp__4220__auto__ = inst_21227;
                                  return function(c__5860__auto____$1, chan__20106__auto__, x, temp__4220__auto__, inst_21227, inst_21233, inst_21249, state_val_21261, c__5860__auto___21296, out) {
                                    return function() {
                                      var f__5861__auto__ = function() {
                                        var switch__5845__auto__ = function(c__5860__auto____$1, chan__20106__auto__, x, temp__4220__auto__, inst_21227, inst_21233, inst_21249, state_val_21261, c__5860__auto___21296, out) {
                                          return function(state_21247) {
                                            var state_val_21248 = state_21247[1];
                                            if (state_val_21248 === 8) {
                                              var inst_21239 = state_21247[2];
                                              var state_21247__$1 = function() {
                                                var statearr_21271 = state_21247;
                                                statearr_21271[7] = inst_21239;
                                                return statearr_21271;
                                              }();
                                              var statearr_21272_21305 = state_21247__$1;
                                              statearr_21272_21305[2] = null;
                                              statearr_21272_21305[1] = 2;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_21248 === 7) {
                                                var inst_21243 = state_21247[2];
                                                var state_21247__$1 = state_21247;
                                                var statearr_21273_21306 = state_21247__$1;
                                                statearr_21273_21306[2] = inst_21243;
                                                statearr_21273_21306[1] = 3;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_21248 === 6) {
                                                  var state_21247__$1 = state_21247;
                                                  var statearr_21274_21307 = state_21247__$1;
                                                  statearr_21274_21307[2] = new cljs.core.Keyword(null, "done", "done", -889844188);
                                                  statearr_21274_21307[1] = 7;
                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                } else {
                                                  if (state_val_21248 === 5) {
                                                    var inst_21236 = state_21247[8];
                                                    var state_21247__$1 = state_21247;
                                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21247__$1, 8, out, inst_21236);
                                                  } else {
                                                    if (state_val_21248 === 4) {
                                                      var inst_21236 = state_21247[8];
                                                      var inst_21236__$1 = state_21247[2];
                                                      var state_21247__$1 = function() {
                                                        var statearr_21275 = state_21247;
                                                        statearr_21275[8] = inst_21236__$1;
                                                        return statearr_21275;
                                                      }();
                                                      if (cljs.core.truth_(inst_21236__$1)) {
                                                        var statearr_21276_21308 = state_21247__$1;
                                                        statearr_21276_21308[1] = 5;
                                                      } else {
                                                        var statearr_21277_21309 = state_21247__$1;
                                                        statearr_21277_21309[1] = 6;
                                                      }
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_21248 === 3) {
                                                        var inst_21245 = state_21247[2];
                                                        var state_21247__$1 = state_21247;
                                                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21247__$1, inst_21245);
                                                      } else {
                                                        if (state_val_21248 === 2) {
                                                          var state_21247__$1 = state_21247;
                                                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21247__$1, 4, chan__20106__auto__);
                                                        } else {
                                                          if (state_val_21248 === 1) {
                                                            var state_21247__$1 = state_21247;
                                                            var statearr_21278_21310 = state_21247__$1;
                                                            statearr_21278_21310[2] = null;
                                                            statearr_21278_21310[1] = 2;
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            return null;
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          };
                                        }(c__5860__auto____$1, chan__20106__auto__, x, temp__4220__auto__, inst_21227, inst_21233, inst_21249, state_val_21261, c__5860__auto___21296, out);
                                        return function(switch__5845__auto__, c__5860__auto____$1, chan__20106__auto__, x, temp__4220__auto__, inst_21227, inst_21233, inst_21249, state_val_21261, c__5860__auto___21296, out) {
                                          return function() {
                                            var state_machine__5846__auto__ = null;
                                            var state_machine__5846__auto____0 = function() {
                                              var statearr_21282 = [null, null, null, null, null, null, null, null, null];
                                              statearr_21282[0] = state_machine__5846__auto__;
                                              statearr_21282[1] = 1;
                                              return statearr_21282;
                                            };
                                            var state_machine__5846__auto____1 = function(state_21247) {
                                              while (true) {
                                                var ret_value__5847__auto__ = function() {
                                                  try {
                                                    while (true) {
                                                      var result__5848__auto__ = switch__5845__auto__.call(null, state_21247);
                                                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                                        continue;
                                                      } else {
                                                        return result__5848__auto__;
                                                      }
                                                      break;
                                                    }
                                                  } catch (e21283) {
                                                    if (e21283 instanceof Object) {
                                                      var ex__5849__auto__ = e21283;
                                                      var statearr_21284_21311 = state_21247;
                                                      statearr_21284_21311[5] = ex__5849__auto__;
                                                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21247);
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      throw e21283;
                                                    }
                                                  }
                                                }();
                                                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                                  var G__21312 = state_21247;
                                                  state_21247 = G__21312;
                                                  continue;
                                                } else {
                                                  return ret_value__5847__auto__;
                                                }
                                                break;
                                              }
                                            };
                                            state_machine__5846__auto__ = function(state_21247) {
                                              switch(arguments.length) {
                                                case 0:
                                                  return state_machine__5846__auto____0.call(this);
                                                case 1:
                                                  return state_machine__5846__auto____1.call(this, state_21247);
                                              }
                                              throw new Error("Invalid arity: " + arguments.length);
                                            };
                                            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
                                            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
                                            return state_machine__5846__auto__;
                                          }();
                                        }(switch__5845__auto__, c__5860__auto____$1, chan__20106__auto__, x, temp__4220__auto__, inst_21227, inst_21233, inst_21249, state_val_21261, c__5860__auto___21296, out);
                                      }();
                                      var state__5862__auto__ = function() {
                                        var statearr_21285 = f__5861__auto__.call(null);
                                        statearr_21285[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto____$1;
                                        return statearr_21285;
                                      }();
                                      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
                                    };
                                  }(c__5860__auto____$1, chan__20106__auto__, x, temp__4220__auto__, inst_21227, inst_21233, inst_21249, state_val_21261, c__5860__auto___21296, out);
                                }();
                                var inst_21251 = cljs.core.async.impl.dispatch.run.call(null, inst_21250);
                                var state_21260__$1 = function() {
                                  var statearr_21286 = state_21260;
                                  statearr_21286[8] = inst_21251;
                                  return statearr_21286;
                                }();
                                var statearr_21287_21313 = state_21260__$1;
                                statearr_21287_21313[2] = null;
                                statearr_21287_21313[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_21261 === 8) {
                                  var inst_21227 = state_21260[7];
                                  var inst_21230 = f.call(null, inst_21227);
                                  var state_21260__$1 = state_21260;
                                  var statearr_21288_21314 = state_21260__$1;
                                  statearr_21288_21314[2] = inst_21230;
                                  statearr_21288_21314[1] = 10;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5860__auto___21296, out);
          return function(switch__5845__auto__, c__5860__auto___21296, out) {
            return function() {
              var state_machine__5846__auto__ = null;
              var state_machine__5846__auto____0 = function() {
                var statearr_21292 = [null, null, null, null, null, null, null, null, null];
                statearr_21292[0] = state_machine__5846__auto__;
                statearr_21292[1] = 1;
                return statearr_21292;
              };
              var state_machine__5846__auto____1 = function(state_21260) {
                while (true) {
                  var ret_value__5847__auto__ = function() {
                    try {
                      while (true) {
                        var result__5848__auto__ = switch__5845__auto__.call(null, state_21260);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__5848__auto__;
                        }
                        break;
                      }
                    } catch (e21293) {
                      if (e21293 instanceof Object) {
                        var ex__5849__auto__ = e21293;
                        var statearr_21294_21315 = state_21260;
                        statearr_21294_21315[5] = ex__5849__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21260);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e21293;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__21316 = state_21260;
                    state_21260 = G__21316;
                    continue;
                  } else {
                    return ret_value__5847__auto__;
                  }
                  break;
                }
              };
              state_machine__5846__auto__ = function(state_21260) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5846__auto____0.call(this);
                  case 1:
                    return state_machine__5846__auto____1.call(this, state_21260);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
              return state_machine__5846__auto__;
            }();
          }(switch__5845__auto__, c__5860__auto___21296, out);
        }();
        var state__5862__auto__ = function() {
          var statearr_21295 = f__5861__auto__.call(null);
          statearr_21295[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___21296;
          return statearr_21295;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
      };
    }(c__5860__auto___21296, out));
    return out;
  };
  mapchan = function(f, in$) {
    switch(arguments.length) {
      case 1:
        return mapchan__1.call(this, f);
      case 2:
        return mapchan__2.call(this, f, in$);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapchan.cljs$core$IFn$_invoke$arity$1 = mapchan__1;
  mapchan.cljs$core$IFn$_invoke$arity$2 = mapchan__2;
  return mapchan;
}();
wilkerdev.util.reactive.mapcat = function() {
  var mapcat = null;
  var mapcat__1 = function(in$) {
    return mapcat.call(null, null, in$);
  };
  var mapcat__2 = function(f, in$) {
    var out = cljs.core.async.chan.call(null);
    var c__5860__auto___21435 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto___21435, out) {
      return function() {
        var f__5861__auto__ = function() {
          var switch__5845__auto__ = function(c__5860__auto___21435, out) {
            return function(state_21406) {
              var state_val_21407 = state_21406[1];
              if (state_val_21407 === 7) {
                var inst_21402 = state_21406[2];
                var state_21406__$1 = state_21406;
                var statearr_21408_21436 = state_21406__$1;
                statearr_21408_21436[2] = inst_21402;
                statearr_21408_21436[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_21407 === 1) {
                  var state_21406__$1 = state_21406;
                  var statearr_21409_21437 = state_21406__$1;
                  statearr_21409_21437[2] = null;
                  statearr_21409_21437[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_21407 === 4) {
                    var inst_21378 = state_21406[7];
                    var inst_21378__$1 = state_21406[2];
                    var state_21406__$1 = function() {
                      var statearr_21410 = state_21406;
                      statearr_21410[7] = inst_21378__$1;
                      return statearr_21410;
                    }();
                    if (cljs.core.truth_(inst_21378__$1)) {
                      var statearr_21411_21438 = state_21406__$1;
                      statearr_21411_21438[1] = 5;
                    } else {
                      var statearr_21412_21439 = state_21406__$1;
                      statearr_21412_21439[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_21407 === 15) {
                      var inst_21395 = state_21406[2];
                      var state_21406__$1 = state_21406;
                      var statearr_21413_21440 = state_21406__$1;
                      statearr_21413_21440[2] = inst_21395;
                      statearr_21413_21440[1] = 12;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_21407 === 13) {
                        var inst_21385 = state_21406[8];
                        var inst_21388 = cljs.core.first.call(null, inst_21385);
                        var state_21406__$1 = state_21406;
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21406__$1, 16, out, inst_21388);
                      } else {
                        if (state_val_21407 === 6) {
                          var inst_21400 = cljs.core.async.close_BANG_.call(null, out);
                          var state_21406__$1 = state_21406;
                          var statearr_21414_21441 = state_21406__$1;
                          statearr_21414_21441[2] = inst_21400;
                          statearr_21414_21441[1] = 7;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_21407 === 3) {
                            var inst_21404 = state_21406[2];
                            var state_21406__$1 = state_21406;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21406__$1, inst_21404);
                          } else {
                            if (state_val_21407 === 12) {
                              var inst_21397 = state_21406[2];
                              var state_21406__$1 = function() {
                                var statearr_21415 = state_21406;
                                statearr_21415[9] = inst_21397;
                                return statearr_21415;
                              }();
                              var statearr_21416_21442 = state_21406__$1;
                              statearr_21416_21442[2] = null;
                              statearr_21416_21442[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_21407 === 2) {
                                var state_21406__$1 = state_21406;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21406__$1, 4, in$);
                              } else {
                                if (state_val_21407 === 11) {
                                  var inst_21385 = state_21406[8];
                                  var state_21406__$1 = state_21406;
                                  if (cljs.core.truth_(inst_21385)) {
                                    var statearr_21417_21443 = state_21406__$1;
                                    statearr_21417_21443[1] = 13;
                                  } else {
                                    var statearr_21418_21444 = state_21406__$1;
                                    statearr_21418_21444[1] = 14;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_21407 === 9) {
                                    var inst_21378 = state_21406[7];
                                    var state_21406__$1 = state_21406;
                                    var statearr_21419_21445 = state_21406__$1;
                                    statearr_21419_21445[2] = inst_21378;
                                    statearr_21419_21445[1] = 10;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_21407 === 5) {
                                      var state_21406__$1 = state_21406;
                                      if (cljs.core.truth_(f)) {
                                        var statearr_21420_21446 = state_21406__$1;
                                        statearr_21420_21446[1] = 8;
                                      } else {
                                        var statearr_21421_21447 = state_21406__$1;
                                        statearr_21421_21447[1] = 9;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_21407 === 14) {
                                        var state_21406__$1 = state_21406;
                                        var statearr_21422_21448 = state_21406__$1;
                                        statearr_21422_21448[2] = null;
                                        statearr_21422_21448[1] = 15;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_21407 === 16) {
                                          var inst_21385 = state_21406[8];
                                          var inst_21390 = state_21406[2];
                                          var inst_21391 = cljs.core.next.call(null, inst_21385);
                                          var inst_21385__$1 = inst_21391;
                                          var state_21406__$1 = function() {
                                            var statearr_21423 = state_21406;
                                            statearr_21423[10] = inst_21390;
                                            statearr_21423[8] = inst_21385__$1;
                                            return statearr_21423;
                                          }();
                                          var statearr_21424_21449 = state_21406__$1;
                                          statearr_21424_21449[2] = null;
                                          statearr_21424_21449[1] = 11;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_21407 === 10) {
                                            var inst_21384 = state_21406[2];
                                            var inst_21385 = inst_21384;
                                            var state_21406__$1 = function() {
                                              var statearr_21425 = state_21406;
                                              statearr_21425[8] = inst_21385;
                                              return statearr_21425;
                                            }();
                                            var statearr_21426_21450 = state_21406__$1;
                                            statearr_21426_21450[2] = null;
                                            statearr_21426_21450[1] = 11;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_21407 === 8) {
                                              var inst_21378 = state_21406[7];
                                              var inst_21381 = f.call(null, inst_21378);
                                              var state_21406__$1 = state_21406;
                                              var statearr_21427_21451 = state_21406__$1;
                                              statearr_21427_21451[2] = inst_21381;
                                              statearr_21427_21451[1] = 10;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              return null;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5860__auto___21435, out);
          return function(switch__5845__auto__, c__5860__auto___21435, out) {
            return function() {
              var state_machine__5846__auto__ = null;
              var state_machine__5846__auto____0 = function() {
                var statearr_21431 = [null, null, null, null, null, null, null, null, null, null, null];
                statearr_21431[0] = state_machine__5846__auto__;
                statearr_21431[1] = 1;
                return statearr_21431;
              };
              var state_machine__5846__auto____1 = function(state_21406) {
                while (true) {
                  var ret_value__5847__auto__ = function() {
                    try {
                      while (true) {
                        var result__5848__auto__ = switch__5845__auto__.call(null, state_21406);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__5848__auto__;
                        }
                        break;
                      }
                    } catch (e21432) {
                      if (e21432 instanceof Object) {
                        var ex__5849__auto__ = e21432;
                        var statearr_21433_21452 = state_21406;
                        statearr_21433_21452[5] = ex__5849__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21406);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e21432;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__21453 = state_21406;
                    state_21406 = G__21453;
                    continue;
                  } else {
                    return ret_value__5847__auto__;
                  }
                  break;
                }
              };
              state_machine__5846__auto__ = function(state_21406) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5846__auto____0.call(this);
                  case 1:
                    return state_machine__5846__auto____1.call(this, state_21406);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
              return state_machine__5846__auto__;
            }();
          }(switch__5845__auto__, c__5860__auto___21435, out);
        }();
        var state__5862__auto__ = function() {
          var statearr_21434 = f__5861__auto__.call(null);
          statearr_21434[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___21435;
          return statearr_21434;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
      };
    }(c__5860__auto___21435, out));
    return out;
  };
  mapcat = function(f, in$) {
    switch(arguments.length) {
      case 1:
        return mapcat__1.call(this, f);
      case 2:
        return mapcat__2.call(this, f, in$);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$core$IFn$_invoke$arity$1 = mapcat__1;
  mapcat.cljs$core$IFn$_invoke$arity$2 = mapcat__2;
  return mapcat;
}();
wilkerdev.util.reactive.filter = function filter(pred, in$) {
  var out = cljs.core.async.chan.call(null);
  var c__5860__auto___21540 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto___21540, out) {
    return function() {
      var f__5861__auto__ = function() {
        var switch__5845__auto__ = function(c__5860__auto___21540, out) {
          return function(state_21519) {
            var state_val_21520 = state_21519[1];
            if (state_val_21520 === 7) {
              var inst_21515 = state_21519[2];
              var state_21519__$1 = state_21519;
              var statearr_21521_21541 = state_21519__$1;
              statearr_21521_21541[2] = inst_21515;
              statearr_21521_21541[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_21520 === 1) {
                var state_21519__$1 = state_21519;
                var statearr_21522_21542 = state_21519__$1;
                statearr_21522_21542[2] = null;
                statearr_21522_21542[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_21520 === 4) {
                  var inst_21499 = state_21519[7];
                  var inst_21499__$1 = state_21519[2];
                  var state_21519__$1 = function() {
                    var statearr_21523 = state_21519;
                    statearr_21523[7] = inst_21499__$1;
                    return statearr_21523;
                  }();
                  if (cljs.core.truth_(inst_21499__$1)) {
                    var statearr_21524_21543 = state_21519__$1;
                    statearr_21524_21543[1] = 5;
                  } else {
                    var statearr_21525_21544 = state_21519__$1;
                    statearr_21525_21544[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_21520 === 6) {
                    var inst_21513 = cljs.core.async.close_BANG_.call(null, out);
                    var state_21519__$1 = state_21519;
                    var statearr_21526_21545 = state_21519__$1;
                    statearr_21526_21545[2] = inst_21513;
                    statearr_21526_21545[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_21520 === 3) {
                      var inst_21517 = state_21519[2];
                      var state_21519__$1 = state_21519;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21519__$1, inst_21517);
                    } else {
                      if (state_val_21520 === 12) {
                        var inst_21507 = state_21519[2];
                        var state_21519__$1 = state_21519;
                        var statearr_21527_21546 = state_21519__$1;
                        statearr_21527_21546[2] = inst_21507;
                        statearr_21527_21546[1] = 11;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_21520 === 2) {
                          var state_21519__$1 = state_21519;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21519__$1, 4, in$);
                        } else {
                          if (state_val_21520 === 11) {
                            var inst_21510 = state_21519[2];
                            var state_21519__$1 = function() {
                              var statearr_21528 = state_21519;
                              statearr_21528[8] = inst_21510;
                              return statearr_21528;
                            }();
                            var statearr_21529_21547 = state_21519__$1;
                            statearr_21529_21547[2] = null;
                            statearr_21529_21547[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_21520 === 9) {
                              var inst_21499 = state_21519[7];
                              var state_21519__$1 = state_21519;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21519__$1, 12, out, inst_21499);
                            } else {
                              if (state_val_21520 === 5) {
                                var inst_21499 = state_21519[7];
                                var inst_21501 = pred.call(null, inst_21499);
                                var inst_21502 = wilkerdev.util.reactive.expand_value.call(null, inst_21501);
                                var state_21519__$1 = state_21519;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21519__$1, 8, inst_21502);
                              } else {
                                if (state_val_21520 === 10) {
                                  var state_21519__$1 = state_21519;
                                  var statearr_21530_21548 = state_21519__$1;
                                  statearr_21530_21548[2] = null;
                                  statearr_21530_21548[1] = 11;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_21520 === 8) {
                                    var inst_21504 = state_21519[2];
                                    var state_21519__$1 = state_21519;
                                    if (cljs.core.truth_(inst_21504)) {
                                      var statearr_21531_21549 = state_21519__$1;
                                      statearr_21531_21549[1] = 9;
                                    } else {
                                      var statearr_21532_21550 = state_21519__$1;
                                      statearr_21532_21550[1] = 10;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5860__auto___21540, out);
        return function(switch__5845__auto__, c__5860__auto___21540, out) {
          return function() {
            var state_machine__5846__auto__ = null;
            var state_machine__5846__auto____0 = function() {
              var statearr_21536 = [null, null, null, null, null, null, null, null, null];
              statearr_21536[0] = state_machine__5846__auto__;
              statearr_21536[1] = 1;
              return statearr_21536;
            };
            var state_machine__5846__auto____1 = function(state_21519) {
              while (true) {
                var ret_value__5847__auto__ = function() {
                  try {
                    while (true) {
                      var result__5848__auto__ = switch__5845__auto__.call(null, state_21519);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__5848__auto__;
                      }
                      break;
                    }
                  } catch (e21537) {
                    if (e21537 instanceof Object) {
                      var ex__5849__auto__ = e21537;
                      var statearr_21538_21551 = state_21519;
                      statearr_21538_21551[5] = ex__5849__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21519);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e21537;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__21552 = state_21519;
                  state_21519 = G__21552;
                  continue;
                } else {
                  return ret_value__5847__auto__;
                }
                break;
              }
            };
            state_machine__5846__auto__ = function(state_21519) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5846__auto____0.call(this);
                case 1:
                  return state_machine__5846__auto____1.call(this, state_21519);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
            return state_machine__5846__auto__;
          }();
        }(switch__5845__auto__, c__5860__auto___21540, out);
      }();
      var state__5862__auto__ = function() {
        var statearr_21539 = f__5861__auto__.call(null);
        statearr_21539[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___21540;
        return statearr_21539;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
    };
  }(c__5860__auto___21540, out));
  return out;
};
wilkerdev.util.reactive.remove = function remove(f, in$) {
  var out = cljs.core.async.chan.call(null);
  var c__5860__auto___21639 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto___21639, out) {
    return function() {
      var f__5861__auto__ = function() {
        var switch__5845__auto__ = function(c__5860__auto___21639, out) {
          return function(state_21618) {
            var state_val_21619 = state_21618[1];
            if (state_val_21619 === 7) {
              var inst_21614 = state_21618[2];
              var state_21618__$1 = state_21618;
              var statearr_21620_21640 = state_21618__$1;
              statearr_21620_21640[2] = inst_21614;
              statearr_21620_21640[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_21619 === 1) {
                var state_21618__$1 = state_21618;
                var statearr_21621_21641 = state_21618__$1;
                statearr_21621_21641[2] = null;
                statearr_21621_21641[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_21619 === 4) {
                  var inst_21598 = state_21618[7];
                  var inst_21598__$1 = state_21618[2];
                  var state_21618__$1 = function() {
                    var statearr_21622 = state_21618;
                    statearr_21622[7] = inst_21598__$1;
                    return statearr_21622;
                  }();
                  if (cljs.core.truth_(inst_21598__$1)) {
                    var statearr_21623_21642 = state_21618__$1;
                    statearr_21623_21642[1] = 5;
                  } else {
                    var statearr_21624_21643 = state_21618__$1;
                    statearr_21624_21643[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_21619 === 6) {
                    var inst_21612 = cljs.core.async.close_BANG_.call(null, out);
                    var state_21618__$1 = state_21618;
                    var statearr_21625_21644 = state_21618__$1;
                    statearr_21625_21644[2] = inst_21612;
                    statearr_21625_21644[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_21619 === 3) {
                      var inst_21616 = state_21618[2];
                      var state_21618__$1 = state_21618;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21618__$1, inst_21616);
                    } else {
                      if (state_val_21619 === 12) {
                        var inst_21607 = state_21618[2];
                        var state_21618__$1 = state_21618;
                        var statearr_21626_21645 = state_21618__$1;
                        statearr_21626_21645[2] = inst_21607;
                        statearr_21626_21645[1] = 11;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_21619 === 2) {
                          var state_21618__$1 = state_21618;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21618__$1, 4, in$);
                        } else {
                          if (state_val_21619 === 11) {
                            var inst_21609 = state_21618[2];
                            var state_21618__$1 = function() {
                              var statearr_21627 = state_21618;
                              statearr_21627[8] = inst_21609;
                              return statearr_21627;
                            }();
                            var statearr_21628_21646 = state_21618__$1;
                            statearr_21628_21646[2] = null;
                            statearr_21628_21646[1] = 2;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_21619 === 9) {
                              var state_21618__$1 = state_21618;
                              var statearr_21629_21647 = state_21618__$1;
                              statearr_21629_21647[2] = null;
                              statearr_21629_21647[1] = 11;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_21619 === 5) {
                                var inst_21598 = state_21618[7];
                                var inst_21600 = f.call(null, inst_21598);
                                var inst_21601 = wilkerdev.util.reactive.expand_value.call(null, inst_21600);
                                var state_21618__$1 = state_21618;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21618__$1, 8, inst_21601);
                              } else {
                                if (state_val_21619 === 10) {
                                  var inst_21598 = state_21618[7];
                                  var state_21618__$1 = state_21618;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21618__$1, 12, out, inst_21598);
                                } else {
                                  if (state_val_21619 === 8) {
                                    var inst_21603 = state_21618[2];
                                    var state_21618__$1 = state_21618;
                                    if (cljs.core.truth_(inst_21603)) {
                                      var statearr_21630_21648 = state_21618__$1;
                                      statearr_21630_21648[1] = 9;
                                    } else {
                                      var statearr_21631_21649 = state_21618__$1;
                                      statearr_21631_21649[1] = 10;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5860__auto___21639, out);
        return function(switch__5845__auto__, c__5860__auto___21639, out) {
          return function() {
            var state_machine__5846__auto__ = null;
            var state_machine__5846__auto____0 = function() {
              var statearr_21635 = [null, null, null, null, null, null, null, null, null];
              statearr_21635[0] = state_machine__5846__auto__;
              statearr_21635[1] = 1;
              return statearr_21635;
            };
            var state_machine__5846__auto____1 = function(state_21618) {
              while (true) {
                var ret_value__5847__auto__ = function() {
                  try {
                    while (true) {
                      var result__5848__auto__ = switch__5845__auto__.call(null, state_21618);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__5848__auto__;
                      }
                      break;
                    }
                  } catch (e21636) {
                    if (e21636 instanceof Object) {
                      var ex__5849__auto__ = e21636;
                      var statearr_21637_21650 = state_21618;
                      statearr_21637_21650[5] = ex__5849__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21618);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e21636;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__21651 = state_21618;
                  state_21618 = G__21651;
                  continue;
                } else {
                  return ret_value__5847__auto__;
                }
                break;
              }
            };
            state_machine__5846__auto__ = function(state_21618) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5846__auto____0.call(this);
                case 1:
                  return state_machine__5846__auto____1.call(this, state_21618);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
            return state_machine__5846__auto__;
          }();
        }(switch__5845__auto__, c__5860__auto___21639, out);
      }();
      var state__5862__auto__ = function() {
        var statearr_21638 = f__5861__auto__.call(null);
        statearr_21638[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___21639;
        return statearr_21638;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
    };
  }(c__5860__auto___21639, out));
  return out;
};
wilkerdev.util.reactive.spool = function spool(xs) {
  var out = cljs.core.async.chan.call(null);
  var c__5860__auto___21718 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto___21718, out) {
    return function() {
      var f__5861__auto__ = function() {
        var switch__5845__auto__ = function(c__5860__auto___21718, out) {
          return function(state_21701) {
            var state_val_21702 = state_21701[1];
            if (state_val_21702 === 7) {
              var inst_21686 = state_21701[7];
              var inst_21691 = state_21701[2];
              var inst_21692 = cljs.core.next.call(null, inst_21686);
              var inst_21686__$1 = inst_21692;
              var state_21701__$1 = function() {
                var statearr_21703 = state_21701;
                statearr_21703[7] = inst_21686__$1;
                statearr_21703[8] = inst_21691;
                return statearr_21703;
              }();
              var statearr_21704_21719 = state_21701__$1;
              statearr_21704_21719[2] = null;
              statearr_21704_21719[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_21702 === 6) {
                var inst_21697 = state_21701[2];
                var state_21701__$1 = state_21701;
                var statearr_21705_21720 = state_21701__$1;
                statearr_21705_21720[2] = inst_21697;
                statearr_21705_21720[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_21702 === 5) {
                  var inst_21695 = cljs.core.async.close_BANG_.call(null, out);
                  var state_21701__$1 = state_21701;
                  var statearr_21706_21721 = state_21701__$1;
                  statearr_21706_21721[2] = inst_21695;
                  statearr_21706_21721[1] = 6;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_21702 === 4) {
                    var inst_21686 = state_21701[7];
                    var inst_21689 = cljs.core.first.call(null, inst_21686);
                    var state_21701__$1 = state_21701;
                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21701__$1, 7, out, inst_21689);
                  } else {
                    if (state_val_21702 === 3) {
                      var inst_21699 = state_21701[2];
                      var state_21701__$1 = state_21701;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21701__$1, inst_21699);
                    } else {
                      if (state_val_21702 === 2) {
                        var inst_21686 = state_21701[7];
                        var state_21701__$1 = state_21701;
                        if (cljs.core.truth_(inst_21686)) {
                          var statearr_21707_21722 = state_21701__$1;
                          statearr_21707_21722[1] = 4;
                        } else {
                          var statearr_21708_21723 = state_21701__$1;
                          statearr_21708_21723[1] = 5;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_21702 === 1) {
                          var inst_21685 = cljs.core.seq.call(null, xs);
                          var inst_21686 = inst_21685;
                          var state_21701__$1 = function() {
                            var statearr_21709 = state_21701;
                            statearr_21709[7] = inst_21686;
                            return statearr_21709;
                          }();
                          var statearr_21710_21724 = state_21701__$1;
                          statearr_21710_21724[2] = null;
                          statearr_21710_21724[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5860__auto___21718, out);
        return function(switch__5845__auto__, c__5860__auto___21718, out) {
          return function() {
            var state_machine__5846__auto__ = null;
            var state_machine__5846__auto____0 = function() {
              var statearr_21714 = [null, null, null, null, null, null, null, null, null];
              statearr_21714[0] = state_machine__5846__auto__;
              statearr_21714[1] = 1;
              return statearr_21714;
            };
            var state_machine__5846__auto____1 = function(state_21701) {
              while (true) {
                var ret_value__5847__auto__ = function() {
                  try {
                    while (true) {
                      var result__5848__auto__ = switch__5845__auto__.call(null, state_21701);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__5848__auto__;
                      }
                      break;
                    }
                  } catch (e21715) {
                    if (e21715 instanceof Object) {
                      var ex__5849__auto__ = e21715;
                      var statearr_21716_21725 = state_21701;
                      statearr_21716_21725[5] = ex__5849__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21701);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e21715;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__21726 = state_21701;
                  state_21701 = G__21726;
                  continue;
                } else {
                  return ret_value__5847__auto__;
                }
                break;
              }
            };
            state_machine__5846__auto__ = function(state_21701) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5846__auto____0.call(this);
                case 1:
                  return state_machine__5846__auto____1.call(this, state_21701);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
            return state_machine__5846__auto__;
          }();
        }(switch__5845__auto__, c__5860__auto___21718, out);
      }();
      var state__5862__auto__ = function() {
        var statearr_21717 = f__5861__auto__.call(null);
        statearr_21717[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___21718;
        return statearr_21717;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
    };
  }(c__5860__auto___21718, out));
  return out;
};
wilkerdev.util.reactive.split = function() {
  var split = null;
  var split__2 = function(pred, in$) {
    return split.call(null, pred, in$, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.async.chan.call(null), cljs.core.async.chan.call(null)], null));
  };
  var split__3 = function(pred, in$, p__21727) {
    var vec__21772 = p__21727;
    var out1 = cljs.core.nth.call(null, vec__21772, 0, null);
    var out2 = cljs.core.nth.call(null, vec__21772, 1, null);
    var c__5860__auto___21816 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto___21816, vec__21772, out1, out2) {
      return function() {
        var f__5861__auto__ = function() {
          var switch__5845__auto__ = function(c__5860__auto___21816, vec__21772, out1, out2) {
            return function(state_21794) {
              var state_val_21795 = state_21794[1];
              if (state_val_21795 === 7) {
                var inst_21790 = state_21794[2];
                var state_21794__$1 = state_21794;
                var statearr_21796_21817 = state_21794__$1;
                statearr_21796_21817[2] = inst_21790;
                statearr_21796_21817[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_21795 === 1) {
                  var state_21794__$1 = state_21794;
                  var statearr_21797_21818 = state_21794__$1;
                  statearr_21797_21818[2] = null;
                  statearr_21797_21818[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_21795 === 4) {
                    var inst_21775 = state_21794[7];
                    var inst_21775__$1 = state_21794[2];
                    var state_21794__$1 = function() {
                      var statearr_21798 = state_21794;
                      statearr_21798[7] = inst_21775__$1;
                      return statearr_21798;
                    }();
                    if (cljs.core.truth_(inst_21775__$1)) {
                      var statearr_21799_21819 = state_21794__$1;
                      statearr_21799_21819[1] = 5;
                    } else {
                      var statearr_21800_21820 = state_21794__$1;
                      statearr_21800_21820[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_21795 === 6) {
                      var state_21794__$1 = state_21794;
                      var statearr_21801_21821 = state_21794__$1;
                      statearr_21801_21821[2] = null;
                      statearr_21801_21821[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_21795 === 3) {
                        var inst_21792 = state_21794[2];
                        var state_21794__$1 = state_21794;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21794__$1, inst_21792);
                      } else {
                        if (state_val_21795 === 12) {
                          var inst_21784 = state_21794[2];
                          var state_21794__$1 = function() {
                            var statearr_21802 = state_21794;
                            statearr_21802[8] = inst_21784;
                            return statearr_21802;
                          }();
                          var statearr_21803_21822 = state_21794__$1;
                          statearr_21803_21822[2] = null;
                          statearr_21803_21822[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_21795 === 2) {
                            var state_21794__$1 = state_21794;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21794__$1, 4, in$);
                          } else {
                            if (state_val_21795 === 11) {
                              var inst_21780 = state_21794[2];
                              var state_21794__$1 = function() {
                                var statearr_21804 = state_21794;
                                statearr_21804[9] = inst_21780;
                                return statearr_21804;
                              }();
                              var statearr_21805_21823 = state_21794__$1;
                              statearr_21805_21823[2] = null;
                              statearr_21805_21823[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_21795 === 9) {
                                var inst_21775 = state_21794[7];
                                var state_21794__$1 = state_21794;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21794__$1, 12, out2, inst_21775);
                              } else {
                                if (state_val_21795 === 5) {
                                  var inst_21775 = state_21794[7];
                                  var inst_21777 = pred.call(null, inst_21775);
                                  var state_21794__$1 = state_21794;
                                  if (cljs.core.truth_(inst_21777)) {
                                    var statearr_21806_21824 = state_21794__$1;
                                    statearr_21806_21824[1] = 8;
                                  } else {
                                    var statearr_21807_21825 = state_21794__$1;
                                    statearr_21807_21825[1] = 9;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_21795 === 10) {
                                    var inst_21787 = state_21794[2];
                                    var state_21794__$1 = state_21794;
                                    var statearr_21808_21826 = state_21794__$1;
                                    statearr_21808_21826[2] = inst_21787;
                                    statearr_21808_21826[1] = 7;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_21795 === 8) {
                                      var inst_21775 = state_21794[7];
                                      var state_21794__$1 = state_21794;
                                      return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21794__$1, 11, out1, inst_21775);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5860__auto___21816, vec__21772, out1, out2);
          return function(switch__5845__auto__, c__5860__auto___21816, vec__21772, out1, out2) {
            return function() {
              var state_machine__5846__auto__ = null;
              var state_machine__5846__auto____0 = function() {
                var statearr_21812 = [null, null, null, null, null, null, null, null, null, null];
                statearr_21812[0] = state_machine__5846__auto__;
                statearr_21812[1] = 1;
                return statearr_21812;
              };
              var state_machine__5846__auto____1 = function(state_21794) {
                while (true) {
                  var ret_value__5847__auto__ = function() {
                    try {
                      while (true) {
                        var result__5848__auto__ = switch__5845__auto__.call(null, state_21794);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__5848__auto__;
                        }
                        break;
                      }
                    } catch (e21813) {
                      if (e21813 instanceof Object) {
                        var ex__5849__auto__ = e21813;
                        var statearr_21814_21827 = state_21794;
                        statearr_21814_21827[5] = ex__5849__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21794);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e21813;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__21828 = state_21794;
                    state_21794 = G__21828;
                    continue;
                  } else {
                    return ret_value__5847__auto__;
                  }
                  break;
                }
              };
              state_machine__5846__auto__ = function(state_21794) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5846__auto____0.call(this);
                  case 1:
                    return state_machine__5846__auto____1.call(this, state_21794);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
              return state_machine__5846__auto__;
            }();
          }(switch__5845__auto__, c__5860__auto___21816, vec__21772, out1, out2);
        }();
        var state__5862__auto__ = function() {
          var statearr_21815 = f__5861__auto__.call(null);
          statearr_21815[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___21816;
          return statearr_21815;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
      };
    }(c__5860__auto___21816, vec__21772, out1, out2));
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [out1, out2], null);
  };
  split = function(pred, in$, p__21727) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, pred, in$);
      case 3:
        return split__3.call(this, pred, in$, p__21727);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
wilkerdev.util.reactive.concat = function concat(xs, in$) {
  var out = cljs.core.async.chan.call(null);
  var c__5860__auto___21927 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto___21927, out) {
    return function() {
      var f__5861__auto__ = function() {
        var switch__5845__auto__ = function(c__5860__auto___21927, out) {
          return function(state_21903) {
            var state_val_21904 = state_21903[1];
            if (state_val_21904 === 7) {
              var inst_21879 = state_21903[7];
              var inst_21884 = state_21903[2];
              var inst_21885 = cljs.core.next.call(null, inst_21879);
              var inst_21879__$1 = inst_21885;
              var state_21903__$1 = function() {
                var statearr_21905 = state_21903;
                statearr_21905[7] = inst_21879__$1;
                statearr_21905[8] = inst_21884;
                return statearr_21905;
              }();
              var statearr_21906_21928 = state_21903__$1;
              statearr_21906_21928[2] = null;
              statearr_21906_21928[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_21904 === 1) {
                var inst_21878 = cljs.core.seq.call(null, xs);
                var inst_21879 = inst_21878;
                var state_21903__$1 = function() {
                  var statearr_21907 = state_21903;
                  statearr_21907[7] = inst_21879;
                  return statearr_21907;
                }();
                var statearr_21908_21929 = state_21903__$1;
                statearr_21908_21929[2] = null;
                statearr_21908_21929[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_21904 === 4) {
                  var inst_21879 = state_21903[7];
                  var inst_21882 = cljs.core.first.call(null, inst_21879);
                  var state_21903__$1 = state_21903;
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21903__$1, 7, out, inst_21882);
                } else {
                  if (state_val_21904 === 6) {
                    var inst_21899 = state_21903[2];
                    var state_21903__$1 = state_21903;
                    var statearr_21910_21930 = state_21903__$1;
                    statearr_21910_21930[2] = inst_21899;
                    statearr_21910_21930[1] = 3;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_21904 === 3) {
                      var inst_21901 = state_21903[2];
                      var state_21903__$1 = state_21903;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_21903__$1, inst_21901);
                    } else {
                      if (state_val_21904 === 12) {
                        var inst_21879 = state_21903[7];
                        var inst_21892 = state_21903[2];
                        var tmp21909 = inst_21879;
                        var inst_21879__$1 = tmp21909;
                        var state_21903__$1 = function() {
                          var statearr_21911 = state_21903;
                          statearr_21911[7] = inst_21879__$1;
                          statearr_21911[9] = inst_21892;
                          return statearr_21911;
                        }();
                        var statearr_21912_21931 = state_21903__$1;
                        statearr_21912_21931[2] = null;
                        statearr_21912_21931[1] = 2;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_21904 === 2) {
                          var inst_21879 = state_21903[7];
                          var state_21903__$1 = state_21903;
                          if (cljs.core.truth_(inst_21879)) {
                            var statearr_21913_21932 = state_21903__$1;
                            statearr_21913_21932[1] = 4;
                          } else {
                            var statearr_21914_21933 = state_21903__$1;
                            statearr_21914_21933[1] = 5;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_21904 === 11) {
                            var inst_21897 = state_21903[2];
                            var state_21903__$1 = state_21903;
                            var statearr_21915_21934 = state_21903__$1;
                            statearr_21915_21934[2] = inst_21897;
                            statearr_21915_21934[1] = 6;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_21904 === 9) {
                              var inst_21889 = state_21903[10];
                              var state_21903__$1 = state_21903;
                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_21903__$1, 12, out, inst_21889);
                            } else {
                              if (state_val_21904 === 5) {
                                var state_21903__$1 = state_21903;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_21903__$1, 8, in$);
                              } else {
                                if (state_val_21904 === 10) {
                                  var inst_21895 = cljs.core.async.close_BANG_.call(null, out);
                                  var state_21903__$1 = state_21903;
                                  var statearr_21916_21935 = state_21903__$1;
                                  statearr_21916_21935[2] = inst_21895;
                                  statearr_21916_21935[1] = 11;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_21904 === 8) {
                                    var inst_21889 = state_21903[10];
                                    var inst_21889__$1 = state_21903[2];
                                    var state_21903__$1 = function() {
                                      var statearr_21917 = state_21903;
                                      statearr_21917[10] = inst_21889__$1;
                                      return statearr_21917;
                                    }();
                                    if (cljs.core.truth_(inst_21889__$1)) {
                                      var statearr_21918_21936 = state_21903__$1;
                                      statearr_21918_21936[1] = 9;
                                    } else {
                                      var statearr_21919_21937 = state_21903__$1;
                                      statearr_21919_21937[1] = 10;
                                    }
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5860__auto___21927, out);
        return function(switch__5845__auto__, c__5860__auto___21927, out) {
          return function() {
            var state_machine__5846__auto__ = null;
            var state_machine__5846__auto____0 = function() {
              var statearr_21923 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_21923[0] = state_machine__5846__auto__;
              statearr_21923[1] = 1;
              return statearr_21923;
            };
            var state_machine__5846__auto____1 = function(state_21903) {
              while (true) {
                var ret_value__5847__auto__ = function() {
                  try {
                    while (true) {
                      var result__5848__auto__ = switch__5845__auto__.call(null, state_21903);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__5848__auto__;
                      }
                      break;
                    }
                  } catch (e21924) {
                    if (e21924 instanceof Object) {
                      var ex__5849__auto__ = e21924;
                      var statearr_21925_21938 = state_21903;
                      statearr_21925_21938[5] = ex__5849__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_21903);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e21924;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__21939 = state_21903;
                  state_21903 = G__21939;
                  continue;
                } else {
                  return ret_value__5847__auto__;
                }
                break;
              }
            };
            state_machine__5846__auto__ = function(state_21903) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5846__auto____0.call(this);
                case 1:
                  return state_machine__5846__auto____1.call(this, state_21903);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
            return state_machine__5846__auto__;
          }();
        }(switch__5845__auto__, c__5860__auto___21927, out);
      }();
      var state__5862__auto__ = function() {
        var statearr_21926 = f__5861__auto__.call(null);
        statearr_21926[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___21927;
        return statearr_21926;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
    };
  }(c__5860__auto___21927, out));
  return out;
};
wilkerdev.util.reactive.distinct = function distinct(in$) {
  var out = cljs.core.async.chan.call(null);
  var c__5860__auto___22024 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto___22024, out) {
    return function() {
      var f__5861__auto__ = function() {
        var switch__5845__auto__ = function(c__5860__auto___22024, out) {
          return function(state_22002) {
            var state_val_22003 = state_22002[1];
            if (state_val_22003 === 7) {
              var inst_21998 = state_22002[2];
              var state_22002__$1 = state_22002;
              var statearr_22004_22025 = state_22002__$1;
              statearr_22004_22025[2] = inst_21998;
              statearr_22004_22025[1] = 3;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_22003 === 1) {
                var inst_21982 = null;
                var state_22002__$1 = function() {
                  var statearr_22005 = state_22002;
                  statearr_22005[7] = inst_21982;
                  return statearr_22005;
                }();
                var statearr_22006_22026 = state_22002__$1;
                statearr_22006_22026[2] = null;
                statearr_22006_22026[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_22003 === 4) {
                  var inst_21985 = state_22002[8];
                  var inst_21985__$1 = state_22002[2];
                  var state_22002__$1 = function() {
                    var statearr_22007 = state_22002;
                    statearr_22007[8] = inst_21985__$1;
                    return statearr_22007;
                  }();
                  if (cljs.core.truth_(inst_21985__$1)) {
                    var statearr_22008_22027 = state_22002__$1;
                    statearr_22008_22027[1] = 5;
                  } else {
                    var statearr_22009_22028 = state_22002__$1;
                    statearr_22009_22028[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_22003 === 6) {
                    var inst_21996 = cljs.core.async.close_BANG_.call(null, out);
                    var state_22002__$1 = state_22002;
                    var statearr_22010_22029 = state_22002__$1;
                    statearr_22010_22029[2] = inst_21996;
                    statearr_22010_22029[1] = 7;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_22003 === 3) {
                      var inst_22000 = state_22002[2];
                      var state_22002__$1 = state_22002;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_22002__$1, inst_22000);
                    } else {
                      if (state_val_22003 === 2) {
                        var state_22002__$1 = state_22002;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_22002__$1, 4, in$);
                      } else {
                        if (state_val_22003 === 11) {
                          var inst_21990 = state_22002[2];
                          var state_22002__$1 = state_22002;
                          var statearr_22011_22030 = state_22002__$1;
                          statearr_22011_22030[2] = inst_21990;
                          statearr_22011_22030[1] = 10;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_22003 === 9) {
                            var state_22002__$1 = state_22002;
                            var statearr_22012_22031 = state_22002__$1;
                            statearr_22012_22031[2] = null;
                            statearr_22012_22031[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_22003 === 5) {
                              var inst_21985 = state_22002[8];
                              var inst_21982 = state_22002[7];
                              var inst_21987 = cljs.core.not_EQ_.call(null, inst_21985, inst_21982);
                              var state_22002__$1 = state_22002;
                              if (inst_21987) {
                                var statearr_22013_22032 = state_22002__$1;
                                statearr_22013_22032[1] = 8;
                              } else {
                                var statearr_22014_22033 = state_22002__$1;
                                statearr_22014_22033[1] = 9;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_22003 === 10) {
                                var inst_21985 = state_22002[8];
                                var inst_21993 = state_22002[2];
                                var inst_21982 = inst_21985;
                                var state_22002__$1 = function() {
                                  var statearr_22015 = state_22002;
                                  statearr_22015[7] = inst_21982;
                                  statearr_22015[9] = inst_21993;
                                  return statearr_22015;
                                }();
                                var statearr_22016_22034 = state_22002__$1;
                                statearr_22016_22034[2] = null;
                                statearr_22016_22034[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_22003 === 8) {
                                  var inst_21985 = state_22002[8];
                                  var state_22002__$1 = state_22002;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_22002__$1, 11, out, inst_21985);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5860__auto___22024, out);
        return function(switch__5845__auto__, c__5860__auto___22024, out) {
          return function() {
            var state_machine__5846__auto__ = null;
            var state_machine__5846__auto____0 = function() {
              var statearr_22020 = [null, null, null, null, null, null, null, null, null, null];
              statearr_22020[0] = state_machine__5846__auto__;
              statearr_22020[1] = 1;
              return statearr_22020;
            };
            var state_machine__5846__auto____1 = function(state_22002) {
              while (true) {
                var ret_value__5847__auto__ = function() {
                  try {
                    while (true) {
                      var result__5848__auto__ = switch__5845__auto__.call(null, state_22002);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__5848__auto__;
                      }
                      break;
                    }
                  } catch (e22021) {
                    if (e22021 instanceof Object) {
                      var ex__5849__auto__ = e22021;
                      var statearr_22022_22035 = state_22002;
                      statearr_22022_22035[5] = ex__5849__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_22002);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e22021;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__22036 = state_22002;
                  state_22002 = G__22036;
                  continue;
                } else {
                  return ret_value__5847__auto__;
                }
                break;
              }
            };
            state_machine__5846__auto__ = function(state_22002) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5846__auto____0.call(this);
                case 1:
                  return state_machine__5846__auto____1.call(this, state_22002);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
            return state_machine__5846__auto__;
          }();
        }(switch__5845__auto__, c__5860__auto___22024, out);
      }();
      var state__5862__auto__ = function() {
        var statearr_22023 = f__5861__auto__.call(null);
        statearr_22023[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___22024;
        return statearr_22023;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
    };
  }(c__5860__auto___22024, out));
  return out;
};
wilkerdev.util.reactive.take_until = function() {
  var take_until = null;
  var take_until__2 = function(pred_sentinel, in$) {
    return take_until.call(null, pred_sentinel, in$, cljs.core.async.chan.call(null));
  };
  var take_until__3 = function(pred_sentinel, in$, out) {
    var c__5860__auto___22127 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto___22127) {
      return function() {
        var f__5861__auto__ = function() {
          var switch__5845__auto__ = function(c__5860__auto___22127) {
            return function(state_22106) {
              var state_val_22107 = state_22106[1];
              if (state_val_22107 === 7) {
                var inst_22102 = state_22106[2];
                var state_22106__$1 = state_22106;
                var statearr_22108_22128 = state_22106__$1;
                statearr_22108_22128[2] = inst_22102;
                statearr_22108_22128[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_22107 === 1) {
                  var state_22106__$1 = state_22106;
                  var statearr_22109_22129 = state_22106__$1;
                  statearr_22109_22129[2] = null;
                  statearr_22109_22129[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_22107 === 4) {
                    var inst_22084 = state_22106[7];
                    var inst_22084__$1 = state_22106[2];
                    var state_22106__$1 = function() {
                      var statearr_22110 = state_22106;
                      statearr_22110[7] = inst_22084__$1;
                      return statearr_22110;
                    }();
                    if (cljs.core.truth_(inst_22084__$1)) {
                      var statearr_22111_22130 = state_22106__$1;
                      statearr_22111_22130[1] = 5;
                    } else {
                      var statearr_22112_22131 = state_22106__$1;
                      statearr_22112_22131[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_22107 === 6) {
                      var inst_22100 = cljs.core.async.close_BANG_.call(null, out);
                      var state_22106__$1 = state_22106;
                      var statearr_22113_22132 = state_22106__$1;
                      statearr_22113_22132[2] = inst_22100;
                      statearr_22113_22132[1] = 7;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_22107 === 3) {
                        var inst_22104 = state_22106[2];
                        var state_22106__$1 = state_22106;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_22106__$1, inst_22104);
                      } else {
                        if (state_val_22107 === 12) {
                          var inst_22098 = state_22106[2];
                          var state_22106__$1 = state_22106;
                          var statearr_22114_22133 = state_22106__$1;
                          statearr_22114_22133[2] = inst_22098;
                          statearr_22114_22133[1] = 7;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_22107 === 2) {
                            var state_22106__$1 = state_22106;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_22106__$1, 4, in$);
                          } else {
                            if (state_val_22107 === 11) {
                              var inst_22096 = cljs.core.async.close_BANG_.call(null, out);
                              var state_22106__$1 = state_22106;
                              var statearr_22115_22134 = state_22106__$1;
                              statearr_22115_22134[2] = inst_22096;
                              statearr_22115_22134[1] = 12;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_22107 === 9) {
                                var inst_22091 = state_22106[2];
                                var inst_22092 = cljs.core.not.call(null, inst_22091);
                                var state_22106__$1 = state_22106;
                                if (inst_22092) {
                                  var statearr_22116_22135 = state_22106__$1;
                                  statearr_22116_22135[1] = 10;
                                } else {
                                  var statearr_22117_22136 = state_22106__$1;
                                  statearr_22117_22136[1] = 11;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_22107 === 5) {
                                  var inst_22084 = state_22106[7];
                                  var state_22106__$1 = state_22106;
                                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_22106__$1, 8, out, inst_22084);
                                } else {
                                  if (state_val_22107 === 10) {
                                    var state_22106__$1 = state_22106;
                                    var statearr_22118_22137 = state_22106__$1;
                                    statearr_22118_22137[2] = null;
                                    statearr_22118_22137[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_22107 === 8) {
                                      var inst_22084 = state_22106[7];
                                      var inst_22087 = state_22106[2];
                                      var inst_22088 = pred_sentinel.call(null, inst_22084);
                                      var inst_22089 = wilkerdev.util.reactive.expand_value.call(null, inst_22088);
                                      var state_22106__$1 = function() {
                                        var statearr_22119 = state_22106;
                                        statearr_22119[8] = inst_22087;
                                        return statearr_22119;
                                      }();
                                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_22106__$1, 9, inst_22089);
                                    } else {
                                      return null;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5860__auto___22127);
          return function(switch__5845__auto__, c__5860__auto___22127) {
            return function() {
              var state_machine__5846__auto__ = null;
              var state_machine__5846__auto____0 = function() {
                var statearr_22123 = [null, null, null, null, null, null, null, null, null];
                statearr_22123[0] = state_machine__5846__auto__;
                statearr_22123[1] = 1;
                return statearr_22123;
              };
              var state_machine__5846__auto____1 = function(state_22106) {
                while (true) {
                  var ret_value__5847__auto__ = function() {
                    try {
                      while (true) {
                        var result__5848__auto__ = switch__5845__auto__.call(null, state_22106);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__5848__auto__;
                        }
                        break;
                      }
                    } catch (e22124) {
                      if (e22124 instanceof Object) {
                        var ex__5849__auto__ = e22124;
                        var statearr_22125_22138 = state_22106;
                        statearr_22125_22138[5] = ex__5849__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_22106);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e22124;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__22139 = state_22106;
                    state_22106 = G__22139;
                    continue;
                  } else {
                    return ret_value__5847__auto__;
                  }
                  break;
                }
              };
              state_machine__5846__auto__ = function(state_22106) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5846__auto____0.call(this);
                  case 1:
                    return state_machine__5846__auto____1.call(this, state_22106);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
              return state_machine__5846__auto__;
            }();
          }(switch__5845__auto__, c__5860__auto___22127);
        }();
        var state__5862__auto__ = function() {
          var statearr_22126 = f__5861__auto__.call(null);
          statearr_22126[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___22127;
          return statearr_22126;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
      };
    }(c__5860__auto___22127));
    return out;
  };
  take_until = function(pred_sentinel, in$, out) {
    switch(arguments.length) {
      case 2:
        return take_until__2.call(this, pred_sentinel, in$);
      case 3:
        return take_until__3.call(this, pred_sentinel, in$, out);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_until.cljs$core$IFn$_invoke$arity$2 = take_until__2;
  take_until.cljs$core$IFn$_invoke$arity$3 = take_until__3;
  return take_until;
}();
wilkerdev.util.reactive.drop_while = function() {
  var drop_while = null;
  var drop_while__2 = function(sentinel, in$) {
    return drop_while.call(null, sentinel, in$, cljs.core.async.chan.call(null));
  };
  var drop_while__3 = function(sentinel, in$, out) {
    var c__5860__auto___22258 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto___22258) {
      return function() {
        var f__5861__auto__ = function() {
          var switch__5845__auto__ = function(c__5860__auto___22258) {
            return function(state_22230) {
              var state_val_22231 = state_22230[1];
              if (state_val_22231 === 7) {
                var inst_22226 = state_22230[2];
                var state_22230__$1 = state_22230;
                var statearr_22232_22259 = state_22230__$1;
                statearr_22232_22259[2] = inst_22226;
                statearr_22232_22259[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_22231 === 1) {
                  var inst_22199 = true;
                  var state_22230__$1 = function() {
                    var statearr_22233 = state_22230;
                    statearr_22233[7] = inst_22199;
                    return statearr_22233;
                  }();
                  var statearr_22234_22260 = state_22230__$1;
                  statearr_22234_22260[2] = null;
                  statearr_22234_22260[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_22231 === 4) {
                    var inst_22202 = state_22230[8];
                    var inst_22202__$1 = state_22230[2];
                    var state_22230__$1 = function() {
                      var statearr_22235 = state_22230;
                      statearr_22235[8] = inst_22202__$1;
                      return statearr_22235;
                    }();
                    if (cljs.core.truth_(inst_22202__$1)) {
                      var statearr_22236_22261 = state_22230__$1;
                      statearr_22236_22261[1] = 5;
                    } else {
                      var statearr_22237_22262 = state_22230__$1;
                      statearr_22237_22262[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_22231 === 15) {
                      var inst_22213 = state_22230[2];
                      var inst_22199 = false;
                      var state_22230__$1 = function() {
                        var statearr_22238 = state_22230;
                        statearr_22238[9] = inst_22213;
                        statearr_22238[7] = inst_22199;
                        return statearr_22238;
                      }();
                      var statearr_22239_22263 = state_22230__$1;
                      statearr_22239_22263[2] = null;
                      statearr_22239_22263[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_22231 === 13) {
                        var inst_22202 = state_22230[8];
                        var state_22230__$1 = state_22230;
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_22230__$1, 15, out, inst_22202);
                      } else {
                        if (state_val_22231 === 6) {
                          var inst_22224 = cljs.core.async.close_BANG_.call(null, out);
                          var state_22230__$1 = state_22230;
                          var statearr_22240_22264 = state_22230__$1;
                          statearr_22240_22264[2] = inst_22224;
                          statearr_22240_22264[1] = 7;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_22231 === 3) {
                            var inst_22228 = state_22230[2];
                            var state_22230__$1 = state_22230;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_22230__$1, inst_22228);
                          } else {
                            if (state_val_22231 === 12) {
                              var inst_22199 = true;
                              var state_22230__$1 = function() {
                                var statearr_22241 = state_22230;
                                statearr_22241[7] = inst_22199;
                                return statearr_22241;
                              }();
                              var statearr_22242_22265 = state_22230__$1;
                              statearr_22242_22265[2] = null;
                              statearr_22242_22265[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_22231 === 2) {
                                var state_22230__$1 = state_22230;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_22230__$1, 4, in$);
                              } else {
                                if (state_val_22231 === 11) {
                                  var inst_22208 = state_22230[2];
                                  var state_22230__$1 = state_22230;
                                  if (cljs.core.truth_(inst_22208)) {
                                    var statearr_22243_22266 = state_22230__$1;
                                    statearr_22243_22266[1] = 12;
                                  } else {
                                    var statearr_22244_22267 = state_22230__$1;
                                    statearr_22244_22267[1] = 13;
                                  }
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_22231 === 9) {
                                    var inst_22202 = state_22230[8];
                                    var state_22230__$1 = state_22230;
                                    return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_22230__$1, 16, out, inst_22202);
                                  } else {
                                    if (state_val_22231 === 5) {
                                      var inst_22199 = state_22230[7];
                                      var state_22230__$1 = state_22230;
                                      if (cljs.core.truth_(inst_22199)) {
                                        var statearr_22245_22268 = state_22230__$1;
                                        statearr_22245_22268[1] = 8;
                                      } else {
                                        var statearr_22246_22269 = state_22230__$1;
                                        statearr_22246_22269[1] = 9;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_22231 === 14) {
                                        var inst_22216 = state_22230[2];
                                        var state_22230__$1 = state_22230;
                                        var statearr_22247_22270 = state_22230__$1;
                                        statearr_22247_22270[2] = inst_22216;
                                        statearr_22247_22270[1] = 10;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_22231 === 16) {
                                          var inst_22219 = state_22230[2];
                                          var inst_22199 = false;
                                          var state_22230__$1 = function() {
                                            var statearr_22248 = state_22230;
                                            statearr_22248[10] = inst_22219;
                                            statearr_22248[7] = inst_22199;
                                            return statearr_22248;
                                          }();
                                          var statearr_22249_22271 = state_22230__$1;
                                          statearr_22249_22271[2] = null;
                                          statearr_22249_22271[1] = 2;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_22231 === 10) {
                                            var inst_22222 = state_22230[2];
                                            var state_22230__$1 = state_22230;
                                            var statearr_22250_22272 = state_22230__$1;
                                            statearr_22250_22272[2] = inst_22222;
                                            statearr_22250_22272[1] = 7;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_22231 === 8) {
                                              var inst_22202 = state_22230[8];
                                              var inst_22205 = sentinel.call(null, inst_22202);
                                              var inst_22206 = wilkerdev.util.reactive.expand_value.call(null, inst_22205);
                                              var state_22230__$1 = state_22230;
                                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_22230__$1, 11, inst_22206);
                                            } else {
                                              return null;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5860__auto___22258);
          return function(switch__5845__auto__, c__5860__auto___22258) {
            return function() {
              var state_machine__5846__auto__ = null;
              var state_machine__5846__auto____0 = function() {
                var statearr_22254 = [null, null, null, null, null, null, null, null, null, null, null];
                statearr_22254[0] = state_machine__5846__auto__;
                statearr_22254[1] = 1;
                return statearr_22254;
              };
              var state_machine__5846__auto____1 = function(state_22230) {
                while (true) {
                  var ret_value__5847__auto__ = function() {
                    try {
                      while (true) {
                        var result__5848__auto__ = switch__5845__auto__.call(null, state_22230);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__5848__auto__;
                        }
                        break;
                      }
                    } catch (e22255) {
                      if (e22255 instanceof Object) {
                        var ex__5849__auto__ = e22255;
                        var statearr_22256_22273 = state_22230;
                        statearr_22256_22273[5] = ex__5849__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_22230);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e22255;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__22274 = state_22230;
                    state_22230 = G__22274;
                    continue;
                  } else {
                    return ret_value__5847__auto__;
                  }
                  break;
                }
              };
              state_machine__5846__auto__ = function(state_22230) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5846__auto____0.call(this);
                  case 1:
                    return state_machine__5846__auto____1.call(this, state_22230);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
              return state_machine__5846__auto__;
            }();
          }(switch__5845__auto__, c__5860__auto___22258);
        }();
        var state__5862__auto__ = function() {
          var statearr_22257 = f__5861__auto__.call(null);
          statearr_22257[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___22258;
          return statearr_22257;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
      };
    }(c__5860__auto___22258));
    return out;
  };
  drop_while = function(sentinel, in$, out) {
    switch(arguments.length) {
      case 2:
        return drop_while__2.call(this, sentinel, in$);
      case 3:
        return drop_while__3.call(this, sentinel, in$, out);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_while.cljs$core$IFn$_invoke$arity$2 = drop_while__2;
  drop_while.cljs$core$IFn$_invoke$arity$3 = drop_while__3;
  return drop_while;
}();
wilkerdev.util.reactive.toggle = function toggle(in$) {
  var out = cljs.core.async.chan.call(null);
  var control = cljs.core.async.chan.call(null);
  var c__5860__auto___22425 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto___22425, out, control) {
    return function() {
      var f__5861__auto__ = function() {
        var switch__5845__auto__ = function(c__5860__auto___22425, out, control) {
          return function(state_22393) {
            var state_val_22394 = state_22393[1];
            if (state_val_22394 === 7) {
              var inst_22388 = state_22393[2];
              var inst_22350 = inst_22388;
              var state_22393__$1 = function() {
                var statearr_22395 = state_22393;
                statearr_22395[7] = inst_22350;
                return statearr_22395;
              }();
              var statearr_22396_22426 = state_22393__$1;
              statearr_22396_22426[2] = null;
              statearr_22396_22426[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_22394 === 1) {
                var inst_22350 = true;
                var state_22393__$1 = function() {
                  var statearr_22397 = state_22393;
                  statearr_22397[7] = inst_22350;
                  return statearr_22397;
                }();
                var statearr_22398_22427 = state_22393__$1;
                statearr_22398_22427[2] = null;
                statearr_22398_22427[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_22394 === 4) {
                  var inst_22363 = state_22393[8];
                  var inst_22361 = state_22393[9];
                  var inst_22361__$1 = state_22393[2];
                  var inst_22362 = cljs.core.nth.call(null, inst_22361__$1, 0, null);
                  var inst_22363__$1 = cljs.core.nth.call(null, inst_22361__$1, 1, null);
                  var inst_22364 = cljs.core._EQ_.call(null, inst_22363__$1, in$);
                  var state_22393__$1 = function() {
                    var statearr_22399 = state_22393;
                    statearr_22399[8] = inst_22363__$1;
                    statearr_22399[9] = inst_22361__$1;
                    statearr_22399[10] = inst_22362;
                    return statearr_22399;
                  }();
                  if (inst_22364) {
                    var statearr_22400_22428 = state_22393__$1;
                    statearr_22400_22428[1] = 5;
                  } else {
                    var statearr_22401_22429 = state_22393__$1;
                    statearr_22401_22429[1] = 6;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_22394 === 15) {
                    var inst_22362 = state_22393[10];
                    var state_22393__$1 = state_22393;
                    var statearr_22402_22430 = state_22393__$1;
                    statearr_22402_22430[2] = inst_22362;
                    statearr_22402_22430[1] = 17;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_22394 === 13) {
                      var inst_22363 = state_22393[8];
                      var inst_22380 = cljs.core._EQ_.call(null, inst_22363, new cljs.core.Keyword(null, "default", "default", -1987822328));
                      var state_22393__$1 = state_22393;
                      if (inst_22380) {
                        var statearr_22403_22431 = state_22393__$1;
                        statearr_22403_22431[1] = 15;
                      } else {
                        var statearr_22404_22432 = state_22393__$1;
                        statearr_22404_22432[1] = 16;
                      }
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_22394 === 6) {
                        var inst_22363 = state_22393[8];
                        var inst_22375 = cljs.core._EQ_.call(null, inst_22363, control);
                        var state_22393__$1 = state_22393;
                        if (inst_22375) {
                          var statearr_22405_22433 = state_22393__$1;
                          statearr_22405_22433[1] = 12;
                        } else {
                          var statearr_22406_22434 = state_22393__$1;
                          statearr_22406_22434[1] = 13;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_22394 === 17) {
                          var inst_22384 = state_22393[2];
                          var state_22393__$1 = state_22393;
                          var statearr_22407_22435 = state_22393__$1;
                          statearr_22407_22435[2] = inst_22384;
                          statearr_22407_22435[1] = 14;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_22394 === 3) {
                            var inst_22391 = state_22393[2];
                            var state_22393__$1 = state_22393;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_22393__$1, inst_22391);
                          } else {
                            if (state_val_22394 === 12) {
                              var inst_22361 = state_22393[9];
                              var inst_22378 = cljs.core.nth.call(null, inst_22361, 0, null);
                              var state_22393__$1 = state_22393;
                              var statearr_22408_22436 = state_22393__$1;
                              statearr_22408_22436[2] = inst_22378;
                              statearr_22408_22436[1] = 14;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_22394 === 2) {
                                var inst_22357 = cljs.core.PersistentVector.EMPTY_NODE;
                                var inst_22358 = [in$, control];
                                var inst_22359 = new cljs.core.PersistentVector(null, 2, 5, inst_22357, inst_22358, null);
                                var state_22393__$1 = state_22393;
                                return cljs.core.async.ioc_alts_BANG_.call(null, state_22393__$1, 4, inst_22359);
                              } else {
                                if (state_val_22394 === 11) {
                                  var inst_22370 = state_22393[2];
                                  var state_22393__$1 = state_22393;
                                  var statearr_22409_22437 = state_22393__$1;
                                  statearr_22409_22437[2] = inst_22370;
                                  statearr_22409_22437[1] = 10;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_22394 === 9) {
                                    var state_22393__$1 = state_22393;
                                    var statearr_22410_22438 = state_22393__$1;
                                    statearr_22410_22438[2] = null;
                                    statearr_22410_22438[1] = 10;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_22394 === 5) {
                                      var inst_22361 = state_22393[9];
                                      var inst_22350 = state_22393[7];
                                      var inst_22367 = cljs.core.nth.call(null, inst_22361, 0, null);
                                      var state_22393__$1 = function() {
                                        var statearr_22411 = state_22393;
                                        statearr_22411[11] = inst_22367;
                                        return statearr_22411;
                                      }();
                                      if (cljs.core.truth_(inst_22350)) {
                                        var statearr_22412_22439 = state_22393__$1;
                                        statearr_22412_22439[1] = 8;
                                      } else {
                                        var statearr_22413_22440 = state_22393__$1;
                                        statearr_22413_22440[1] = 9;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_22394 === 14) {
                                        var inst_22386 = state_22393[2];
                                        var state_22393__$1 = state_22393;
                                        var statearr_22414_22441 = state_22393__$1;
                                        statearr_22414_22441[2] = inst_22386;
                                        statearr_22414_22441[1] = 7;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_22394 === 16) {
                                          var state_22393__$1 = state_22393;
                                          var statearr_22415_22442 = state_22393__$1;
                                          statearr_22415_22442[2] = null;
                                          statearr_22415_22442[1] = 17;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_22394 === 10) {
                                            var inst_22350 = state_22393[7];
                                            var inst_22373 = state_22393[2];
                                            var state_22393__$1 = function() {
                                              var statearr_22416 = state_22393;
                                              statearr_22416[12] = inst_22373;
                                              return statearr_22416;
                                            }();
                                            var statearr_22417_22443 = state_22393__$1;
                                            statearr_22417_22443[2] = inst_22350;
                                            statearr_22417_22443[1] = 7;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_22394 === 8) {
                                              var inst_22367 = state_22393[11];
                                              var state_22393__$1 = state_22393;
                                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_22393__$1, 11, out, inst_22367);
                                            } else {
                                              return null;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5860__auto___22425, out, control);
        return function(switch__5845__auto__, c__5860__auto___22425, out, control) {
          return function() {
            var state_machine__5846__auto__ = null;
            var state_machine__5846__auto____0 = function() {
              var statearr_22421 = [null, null, null, null, null, null, null, null, null, null, null, null, null];
              statearr_22421[0] = state_machine__5846__auto__;
              statearr_22421[1] = 1;
              return statearr_22421;
            };
            var state_machine__5846__auto____1 = function(state_22393) {
              while (true) {
                var ret_value__5847__auto__ = function() {
                  try {
                    while (true) {
                      var result__5848__auto__ = switch__5845__auto__.call(null, state_22393);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__5848__auto__;
                      }
                      break;
                    }
                  } catch (e22422) {
                    if (e22422 instanceof Object) {
                      var ex__5849__auto__ = e22422;
                      var statearr_22423_22444 = state_22393;
                      statearr_22423_22444[5] = ex__5849__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_22393);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e22422;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__22445 = state_22393;
                  state_22393 = G__22445;
                  continue;
                } else {
                  return ret_value__5847__auto__;
                }
                break;
              }
            };
            state_machine__5846__auto__ = function(state_22393) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5846__auto____0.call(this);
                case 1:
                  return state_machine__5846__auto____1.call(this, state_22393);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
            return state_machine__5846__auto__;
          }();
        }(switch__5845__auto__, c__5860__auto___22425, out, control);
      }();
      var state__5862__auto__ = function() {
        var statearr_22424 = f__5861__auto__.call(null);
        statearr_22424[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___22425;
        return statearr_22424;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
    };
  }(c__5860__auto___22425, out, control));
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "chan", "chan", -2103021695), out, new cljs.core.Keyword(null, "control", "control", 1892578036), control], null);
};
wilkerdev.util.reactive.barrier = function barrier(cs) {
  var c__5860__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto__) {
    return function() {
      var f__5861__auto__ = function() {
        var switch__5845__auto__ = function(c__5860__auto__) {
          return function(state_22500) {
            var state_val_22501 = state_22500[1];
            if (state_val_22501 === 7) {
              var inst_22485 = state_22500[7];
              var inst_22488 = state_22500[8];
              var inst_22491 = state_22500[2];
              var inst_22492 = cljs.core.conj.call(null, inst_22485, inst_22491);
              var inst_22484 = inst_22488;
              var inst_22485__$1 = inst_22492;
              var state_22500__$1 = function() {
                var statearr_22502 = state_22500;
                statearr_22502[7] = inst_22485__$1;
                statearr_22502[9] = inst_22484;
                return statearr_22502;
              }();
              var statearr_22503_22518 = state_22500__$1;
              statearr_22503_22518[2] = null;
              statearr_22503_22518[1] = 2;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_22501 === 6) {
                var inst_22496 = state_22500[2];
                var state_22500__$1 = state_22500;
                var statearr_22504_22519 = state_22500__$1;
                statearr_22504_22519[2] = inst_22496;
                statearr_22504_22519[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_22501 === 5) {
                  var inst_22485 = state_22500[7];
                  var state_22500__$1 = state_22500;
                  var statearr_22505_22520 = state_22500__$1;
                  statearr_22505_22520[2] = inst_22485;
                  statearr_22505_22520[1] = 6;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_22501 === 4) {
                    var inst_22484 = state_22500[9];
                    var inst_22488 = cljs.core.next.call(null, inst_22484);
                    var inst_22489 = cljs.core.first.call(null, inst_22484);
                    var state_22500__$1 = function() {
                      var statearr_22506 = state_22500;
                      statearr_22506[8] = inst_22488;
                      return statearr_22506;
                    }();
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_22500__$1, 7, inst_22489);
                  } else {
                    if (state_val_22501 === 3) {
                      var inst_22498 = state_22500[2];
                      var state_22500__$1 = state_22500;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_22500__$1, inst_22498);
                    } else {
                      if (state_val_22501 === 2) {
                        var inst_22484 = state_22500[9];
                        var state_22500__$1 = state_22500;
                        if (cljs.core.truth_(inst_22484)) {
                          var statearr_22507_22521 = state_22500__$1;
                          statearr_22507_22521[1] = 4;
                        } else {
                          var statearr_22508_22522 = state_22500__$1;
                          statearr_22508_22522[1] = 5;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_22501 === 1) {
                          var inst_22482 = cljs.core.seq.call(null, cs);
                          var inst_22483 = cljs.core.PersistentVector.EMPTY;
                          var inst_22484 = inst_22482;
                          var inst_22485 = inst_22483;
                          var state_22500__$1 = function() {
                            var statearr_22509 = state_22500;
                            statearr_22509[7] = inst_22485;
                            statearr_22509[9] = inst_22484;
                            return statearr_22509;
                          }();
                          var statearr_22510_22523 = state_22500__$1;
                          statearr_22510_22523[2] = null;
                          statearr_22510_22523[1] = 2;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5860__auto__);
        return function(switch__5845__auto__, c__5860__auto__) {
          return function() {
            var state_machine__5846__auto__ = null;
            var state_machine__5846__auto____0 = function() {
              var statearr_22514 = [null, null, null, null, null, null, null, null, null, null];
              statearr_22514[0] = state_machine__5846__auto__;
              statearr_22514[1] = 1;
              return statearr_22514;
            };
            var state_machine__5846__auto____1 = function(state_22500) {
              while (true) {
                var ret_value__5847__auto__ = function() {
                  try {
                    while (true) {
                      var result__5848__auto__ = switch__5845__auto__.call(null, state_22500);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__5848__auto__;
                      }
                      break;
                    }
                  } catch (e22515) {
                    if (e22515 instanceof Object) {
                      var ex__5849__auto__ = e22515;
                      var statearr_22516_22524 = state_22500;
                      statearr_22516_22524[5] = ex__5849__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_22500);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e22515;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__22525 = state_22500;
                  state_22500 = G__22525;
                  continue;
                } else {
                  return ret_value__5847__auto__;
                }
                break;
              }
            };
            state_machine__5846__auto__ = function(state_22500) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5846__auto____0.call(this);
                case 1:
                  return state_machine__5846__auto____1.call(this, state_22500);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
            return state_machine__5846__auto__;
          }();
        }(switch__5845__auto__, c__5860__auto__);
      }();
      var state__5862__auto__ = function() {
        var statearr_22517 = f__5861__auto__.call(null);
        statearr_22517[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto__;
        return statearr_22517;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
    };
  }(c__5860__auto__));
  return c__5860__auto__;
};
wilkerdev.util.reactive.cyclic_barrier = function cyclic_barrier(cs) {
  var out = cljs.core.async.chan.call(null);
  var c__5860__auto___22570 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto___22570, out) {
    return function() {
      var f__5861__auto__ = function() {
        var switch__5845__auto__ = function(c__5860__auto___22570, out) {
          return function(state_22558) {
            var state_val_22559 = state_22558[1];
            if (state_val_22559 === 5) {
              var inst_22551 = state_22558[2];
              var state_22558__$1 = state_22558;
              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_22558__$1, 4, out, inst_22551);
            } else {
              if (state_val_22559 === 4) {
                var inst_22553 = state_22558[2];
                var state_22558__$1 = function() {
                  var statearr_22560 = state_22558;
                  statearr_22560[7] = inst_22553;
                  return statearr_22560;
                }();
                var statearr_22561_22571 = state_22558__$1;
                statearr_22561_22571[2] = null;
                statearr_22561_22571[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_22559 === 3) {
                  var inst_22556 = state_22558[2];
                  var state_22558__$1 = state_22558;
                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_22558__$1, inst_22556);
                } else {
                  if (state_val_22559 === 2) {
                    var inst_22549 = wilkerdev.util.reactive.barrier.call(null, cs);
                    var state_22558__$1 = state_22558;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_22558__$1, 5, inst_22549);
                  } else {
                    if (state_val_22559 === 1) {
                      var state_22558__$1 = state_22558;
                      var statearr_22562_22572 = state_22558__$1;
                      statearr_22562_22572[2] = null;
                      statearr_22562_22572[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          };
        }(c__5860__auto___22570, out);
        return function(switch__5845__auto__, c__5860__auto___22570, out) {
          return function() {
            var state_machine__5846__auto__ = null;
            var state_machine__5846__auto____0 = function() {
              var statearr_22566 = [null, null, null, null, null, null, null, null];
              statearr_22566[0] = state_machine__5846__auto__;
              statearr_22566[1] = 1;
              return statearr_22566;
            };
            var state_machine__5846__auto____1 = function(state_22558) {
              while (true) {
                var ret_value__5847__auto__ = function() {
                  try {
                    while (true) {
                      var result__5848__auto__ = switch__5845__auto__.call(null, state_22558);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__5848__auto__;
                      }
                      break;
                    }
                  } catch (e22567) {
                    if (e22567 instanceof Object) {
                      var ex__5849__auto__ = e22567;
                      var statearr_22568_22573 = state_22558;
                      statearr_22568_22573[5] = ex__5849__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_22558);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e22567;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__22574 = state_22558;
                  state_22558 = G__22574;
                  continue;
                } else {
                  return ret_value__5847__auto__;
                }
                break;
              }
            };
            state_machine__5846__auto__ = function(state_22558) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5846__auto____0.call(this);
                case 1:
                  return state_machine__5846__auto____1.call(this, state_22558);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
            return state_machine__5846__auto__;
          }();
        }(switch__5845__auto__, c__5860__auto___22570, out);
      }();
      var state__5862__auto__ = function() {
        var statearr_22569 = f__5861__auto__.call(null);
        statearr_22569[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___22570;
        return statearr_22569;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
    };
  }(c__5860__auto___22570, out));
  return out;
};
wilkerdev.util.reactive.throttle_STAR_ = function() {
  var throttle_STAR_ = null;
  var throttle_STAR___2 = function(in$, msecs) {
    return throttle_STAR_.call(null, in$, msecs, cljs.core.async.chan.call(null));
  };
  var throttle_STAR___3 = function(in$, msecs, out) {
    return throttle_STAR_.call(null, in$, msecs, out, cljs.core.async.chan.call(null));
  };
  var throttle_STAR___4 = function(in$, msecs, out, control) {
    var c__5860__auto___22865 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto___22865) {
      return function() {
        var f__5861__auto__ = function() {
          var switch__5845__auto__ = function(c__5860__auto___22865) {
            return function(state_22812) {
              var state_val_22813 = state_22812[1];
              if (state_val_22813 === 7) {
                var inst_22808 = state_22812[2];
                var state_22812__$1 = state_22812;
                var statearr_22814_22866 = state_22812__$1;
                statearr_22814_22866[2] = inst_22808;
                statearr_22814_22866[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_22813 === 20) {
                  var inst_22724 = state_22812[7];
                  var inst_22774 = cljs.core.PersistentVector.EMPTY_NODE;
                  var inst_22775 = [new cljs.core.Keyword("wilkerdev.util.reactive", "throttle", "wilkerdev.util.reactive/throttle", -2028662646), inst_22724];
                  var inst_22776 = new cljs.core.PersistentVector(null, 2, 5, inst_22774, inst_22775, null);
                  var state_22812__$1 = state_22812;
                  return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_22812__$1, 23, out, inst_22776);
                } else {
                  if (state_val_22813 === 27) {
                    var inst_22725 = state_22812[8];
                    var inst_22794 = cljs.core.pop.call(null, inst_22725);
                    var state_22812__$1 = state_22812;
                    var statearr_22815_22867 = state_22812__$1;
                    statearr_22815_22867[2] = inst_22794;
                    statearr_22815_22867[1] = 29;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_22813 === 1) {
                      var inst_22720 = cljs.core.PersistentVector.EMPTY_NODE;
                      var inst_22721 = [in$, control];
                      var inst_22722 = new cljs.core.PersistentVector(null, 2, 5, inst_22720, inst_22721, null);
                      var inst_22723 = new cljs.core.Keyword("wilkerdev.util.reactive", "init", "wilkerdev.util.reactive/init", -1911768360);
                      var inst_22724 = null;
                      var inst_22725 = inst_22722;
                      var state_22812__$1 = function() {
                        var statearr_22816 = state_22812;
                        statearr_22816[7] = inst_22724;
                        statearr_22816[8] = inst_22725;
                        statearr_22816[9] = inst_22723;
                        return statearr_22816;
                      }();
                      var statearr_22817_22868 = state_22812__$1;
                      statearr_22817_22868[2] = null;
                      statearr_22817_22868[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_22813 === 24) {
                        var inst_22725 = state_22812[8];
                        var inst_22791 = cljs.core.count.call(null, inst_22725);
                        var inst_22792 = cljs.core._EQ_.call(null, inst_22791, 3);
                        var state_22812__$1 = state_22812;
                        if (inst_22792) {
                          var statearr_22818_22869 = state_22812__$1;
                          statearr_22818_22869[1] = 27;
                        } else {
                          var statearr_22819_22870 = state_22812__$1;
                          statearr_22819_22870[1] = 28;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_22813 === 4) {
                          var inst_22735 = state_22812[10];
                          var inst_22733 = state_22812[2];
                          var inst_22734 = cljs.core.nth.call(null, inst_22733, 0, null);
                          var inst_22735__$1 = cljs.core.nth.call(null, inst_22733, 1, null);
                          var inst_22739 = cljs.core._EQ_.call(null, in$, inst_22735__$1);
                          var state_22812__$1 = function() {
                            var statearr_22821 = state_22812;
                            statearr_22821[11] = inst_22734;
                            statearr_22821[10] = inst_22735__$1;
                            return statearr_22821;
                          }();
                          if (inst_22739) {
                            var statearr_22822_22871 = state_22812__$1;
                            statearr_22822_22871[1] = 5;
                          } else {
                            var statearr_22823_22872 = state_22812__$1;
                            statearr_22823_22872[1] = 6;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_22813 === 15) {
                            var inst_22767 = state_22812[2];
                            var state_22812__$1 = state_22812;
                            var statearr_22824_22873 = state_22812__$1;
                            statearr_22824_22873[2] = inst_22767;
                            statearr_22824_22873[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_22813 === 21) {
                              var inst_22724 = state_22812[7];
                              var inst_22725 = state_22812[8];
                              var inst_22784 = cljs.core.pop.call(null, inst_22725);
                              var tmp22820 = inst_22724;
                              var inst_22723 = new cljs.core.Keyword("wilkerdev.util.reactive", "init", "wilkerdev.util.reactive/init", -1911768360);
                              var inst_22724__$1 = tmp22820;
                              var inst_22725__$1 = inst_22784;
                              var state_22812__$1 = function() {
                                var statearr_22825 = state_22812;
                                statearr_22825[7] = inst_22724__$1;
                                statearr_22825[8] = inst_22725__$1;
                                statearr_22825[9] = inst_22723;
                                return statearr_22825;
                              }();
                              var statearr_22826_22874 = state_22812__$1;
                              statearr_22826_22874[2] = null;
                              statearr_22826_22874[1] = 2;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_22813 === 13) {
                                var inst_22734 = state_22812[11];
                                var state_22812__$1 = state_22812;
                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_22812__$1, 16, out, inst_22734);
                              } else {
                                if (state_val_22813 === 22) {
                                  var inst_22787 = state_22812[2];
                                  var state_22812__$1 = state_22812;
                                  var statearr_22827_22875 = state_22812__$1;
                                  statearr_22827_22875[2] = inst_22787;
                                  statearr_22827_22875[1] = 19;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  if (state_val_22813 === 29) {
                                    var inst_22797 = state_22812[2];
                                    var inst_22723 = new cljs.core.Keyword("wilkerdev.util.reactive", "init", "wilkerdev.util.reactive/init", -1911768360);
                                    var inst_22724 = null;
                                    var inst_22725 = inst_22797;
                                    var state_22812__$1 = function() {
                                      var statearr_22828 = state_22812;
                                      statearr_22828[7] = inst_22724;
                                      statearr_22828[8] = inst_22725;
                                      statearr_22828[9] = inst_22723;
                                      return statearr_22828;
                                    }();
                                    var statearr_22829_22876 = state_22812__$1;
                                    statearr_22829_22876[2] = null;
                                    statearr_22829_22876[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_22813 === 6) {
                                      var inst_22730 = state_22812[12];
                                      var inst_22735 = state_22812[10];
                                      var inst_22771 = cljs.core._EQ_.call(null, inst_22730, inst_22735);
                                      var state_22812__$1 = state_22812;
                                      if (inst_22771) {
                                        var statearr_22830_22877 = state_22812__$1;
                                        statearr_22830_22877[1] = 17;
                                      } else {
                                        var statearr_22831_22878 = state_22812__$1;
                                        statearr_22831_22878[1] = 18;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_22813 === 28) {
                                        var inst_22725 = state_22812[8];
                                        var state_22812__$1 = state_22812;
                                        var statearr_22832_22879 = state_22812__$1;
                                        statearr_22832_22879[2] = inst_22725;
                                        statearr_22832_22879[1] = 29;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_22813 === 25) {
                                          var inst_22735 = state_22812[10];
                                          var inst_22800 = "No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(inst_22735);
                                          var inst_22801 = new Error(inst_22800);
                                          var inst_22802 = function() {
                                            throw inst_22801;
                                          }();
                                          var state_22812__$1 = state_22812;
                                          var statearr_22833_22880 = state_22812__$1;
                                          statearr_22833_22880[2] = inst_22802;
                                          statearr_22833_22880[1] = 26;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_22813 === 17) {
                                            var inst_22724 = state_22812[7];
                                            var state_22812__$1 = state_22812;
                                            if (cljs.core.truth_(inst_22724)) {
                                              var statearr_22835_22881 = state_22812__$1;
                                              statearr_22835_22881[1] = 20;
                                            } else {
                                              var statearr_22836_22882 = state_22812__$1;
                                              statearr_22836_22882[1] = 21;
                                            }
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_22813 === 3) {
                                              var inst_22810 = state_22812[2];
                                              var state_22812__$1 = state_22812;
                                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_22812__$1, inst_22810);
                                            } else {
                                              if (state_val_22813 === 12) {
                                                var inst_22724 = state_22812[7];
                                                var inst_22725 = state_22812[8];
                                                var inst_22752 = state_22812[2];
                                                var inst_22753 = cljs.core.async.timeout.call(null, msecs);
                                                var inst_22754 = cljs.core.conj.call(null, inst_22725, inst_22753);
                                                var tmp22834 = inst_22724;
                                                var inst_22723 = new cljs.core.Keyword("wilkerdev.util.reactive", "throttling", "wilkerdev.util.reactive/throttling", -1305230883);
                                                var inst_22724__$1 = tmp22834;
                                                var inst_22725__$1 = inst_22754;
                                                var state_22812__$1 = function() {
                                                  var statearr_22838 = state_22812;
                                                  statearr_22838[13] = inst_22752;
                                                  statearr_22838[7] = inst_22724__$1;
                                                  statearr_22838[8] = inst_22725__$1;
                                                  statearr_22838[9] = inst_22723;
                                                  return statearr_22838;
                                                }();
                                                var statearr_22839_22883 = state_22812__$1;
                                                statearr_22839_22883[2] = null;
                                                statearr_22839_22883[1] = 2;
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_22813 === 2) {
                                                  var inst_22725 = state_22812[8];
                                                  var inst_22728 = cljs.core.nth.call(null, inst_22725, 0, null);
                                                  var inst_22729 = cljs.core.nth.call(null, inst_22725, 1, null);
                                                  var inst_22730 = cljs.core.nth.call(null, inst_22725, 2, null);
                                                  var state_22812__$1 = function() {
                                                    var statearr_22840 = state_22812;
                                                    statearr_22840[14] = inst_22728;
                                                    statearr_22840[15] = inst_22729;
                                                    statearr_22840[12] = inst_22730;
                                                    return statearr_22840;
                                                  }();
                                                  return cljs.core.async.ioc_alts_BANG_.call(null, state_22812__$1, 4, inst_22725);
                                                } else {
                                                  if (state_val_22813 === 23) {
                                                    var inst_22725 = state_22812[8];
                                                    var inst_22723 = state_22812[9];
                                                    var inst_22778 = state_22812[2];
                                                    var inst_22779 = cljs.core.pop.call(null, inst_22725);
                                                    var inst_22780 = cljs.core.async.timeout.call(null, msecs);
                                                    var inst_22781 = cljs.core.conj.call(null, inst_22779, inst_22780);
                                                    var tmp22837 = inst_22723;
                                                    var inst_22723__$1 = tmp22837;
                                                    var inst_22724 = null;
                                                    var inst_22725__$1 = inst_22781;
                                                    var state_22812__$1 = function() {
                                                      var statearr_22841 = state_22812;
                                                      statearr_22841[7] = inst_22724;
                                                      statearr_22841[8] = inst_22725__$1;
                                                      statearr_22841[9] = inst_22723__$1;
                                                      statearr_22841[16] = inst_22778;
                                                      return statearr_22841;
                                                    }();
                                                    var statearr_22842_22884 = state_22812__$1;
                                                    statearr_22842_22884[2] = null;
                                                    statearr_22842_22884[1] = 2;
                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                  } else {
                                                    if (state_val_22813 === 19) {
                                                      var inst_22806 = state_22812[2];
                                                      var state_22812__$1 = state_22812;
                                                      var statearr_22843_22885 = state_22812__$1;
                                                      statearr_22843_22885[2] = inst_22806;
                                                      statearr_22843_22885[1] = 7;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      if (state_val_22813 === 11) {
                                                        var inst_22734 = state_22812[11];
                                                        var inst_22747 = state_22812[2];
                                                        var inst_22748 = cljs.core.PersistentVector.EMPTY_NODE;
                                                        var inst_22749 = [new cljs.core.Keyword("wilkerdev.util.reactive", "throttle", "wilkerdev.util.reactive/throttle", -2028662646), inst_22734];
                                                        var inst_22750 = new cljs.core.PersistentVector(null, 2, 5, inst_22748, inst_22749, null);
                                                        var state_22812__$1 = function() {
                                                          var statearr_22844 = state_22812;
                                                          statearr_22844[17] = inst_22747;
                                                          return statearr_22844;
                                                        }();
                                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_22812__$1, 12, out, inst_22750);
                                                      } else {
                                                        if (state_val_22813 === 9) {
                                                          var inst_22723 = state_22812[9];
                                                          var inst_22757 = cljs.core._EQ_.call(null, new cljs.core.Keyword("wilkerdev.util.reactive", "throttling", "wilkerdev.util.reactive/throttling", -1305230883), inst_22723);
                                                          var state_22812__$1 = state_22812;
                                                          if (inst_22757) {
                                                            var statearr_22845_22886 = state_22812__$1;
                                                            statearr_22845_22886[1] = 13;
                                                          } else {
                                                            var statearr_22846_22887 = state_22812__$1;
                                                            statearr_22846_22887[1] = 14;
                                                          }
                                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                        } else {
                                                          if (state_val_22813 === 5) {
                                                            var inst_22723 = state_22812[9];
                                                            var inst_22744 = cljs.core._EQ_.call(null, new cljs.core.Keyword("wilkerdev.util.reactive", "init", "wilkerdev.util.reactive/init", -1911768360), inst_22723);
                                                            var state_22812__$1 = state_22812;
                                                            if (inst_22744) {
                                                              var statearr_22847_22888 = state_22812__$1;
                                                              statearr_22847_22888[1] = 8;
                                                            } else {
                                                              var statearr_22848_22889 = state_22812__$1;
                                                              statearr_22848_22889[1] = 9;
                                                            }
                                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                          } else {
                                                            if (state_val_22813 === 14) {
                                                              var inst_22723 = state_22812[9];
                                                              var inst_22763 = "No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(inst_22723);
                                                              var inst_22764 = new Error(inst_22763);
                                                              var inst_22765 = function() {
                                                                throw inst_22764;
                                                              }();
                                                              var state_22812__$1 = state_22812;
                                                              var statearr_22851_22890 = state_22812__$1;
                                                              statearr_22851_22890[2] = inst_22765;
                                                              statearr_22851_22890[1] = 15;
                                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                            } else {
                                                              if (state_val_22813 === 26) {
                                                                var inst_22804 = state_22812[2];
                                                                var state_22812__$1 = state_22812;
                                                                var statearr_22852_22891 = state_22812__$1;
                                                                statearr_22852_22891[2] = inst_22804;
                                                                statearr_22852_22891[1] = 19;
                                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                              } else {
                                                                if (state_val_22813 === 16) {
                                                                  var inst_22734 = state_22812[11];
                                                                  var inst_22725 = state_22812[8];
                                                                  var inst_22723 = state_22812[9];
                                                                  var inst_22760 = state_22812[2];
                                                                  var tmp22849 = inst_22725;
                                                                  var tmp22850 = inst_22723;
                                                                  var inst_22723__$1 = tmp22850;
                                                                  var inst_22724 = inst_22734;
                                                                  var inst_22725__$1 = tmp22849;
                                                                  var state_22812__$1 = function() {
                                                                    var statearr_22853 = state_22812;
                                                                    statearr_22853[18] = inst_22760;
                                                                    statearr_22853[7] = inst_22724;
                                                                    statearr_22853[8] = inst_22725__$1;
                                                                    statearr_22853[9] = inst_22723__$1;
                                                                    return statearr_22853;
                                                                  }();
                                                                  var statearr_22854_22892 = state_22812__$1;
                                                                  statearr_22854_22892[2] = null;
                                                                  statearr_22854_22892[1] = 2;
                                                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                } else {
                                                                  if (state_val_22813 === 10) {
                                                                    var inst_22769 = state_22812[2];
                                                                    var state_22812__$1 = state_22812;
                                                                    var statearr_22855_22893 = state_22812__$1;
                                                                    statearr_22855_22893[2] = inst_22769;
                                                                    statearr_22855_22893[1] = 7;
                                                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                  } else {
                                                                    if (state_val_22813 === 18) {
                                                                      var inst_22735 = state_22812[10];
                                                                      var inst_22789 = cljs.core._EQ_.call(null, control, inst_22735);
                                                                      var state_22812__$1 = state_22812;
                                                                      if (inst_22789) {
                                                                        var statearr_22856_22894 = state_22812__$1;
                                                                        statearr_22856_22894[1] = 24;
                                                                      } else {
                                                                        var statearr_22857_22895 = state_22812__$1;
                                                                        statearr_22857_22895[1] = 25;
                                                                      }
                                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                                    } else {
                                                                      if (state_val_22813 === 8) {
                                                                        var inst_22734 = state_22812[11];
                                                                        var state_22812__$1 = state_22812;
                                                                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_22812__$1, 11, out, inst_22734);
                                                                      } else {
                                                                        return null;
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5860__auto___22865);
          return function(switch__5845__auto__, c__5860__auto___22865) {
            return function() {
              var state_machine__5846__auto__ = null;
              var state_machine__5846__auto____0 = function() {
                var statearr_22861 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_22861[0] = state_machine__5846__auto__;
                statearr_22861[1] = 1;
                return statearr_22861;
              };
              var state_machine__5846__auto____1 = function(state_22812) {
                while (true) {
                  var ret_value__5847__auto__ = function() {
                    try {
                      while (true) {
                        var result__5848__auto__ = switch__5845__auto__.call(null, state_22812);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__5848__auto__;
                        }
                        break;
                      }
                    } catch (e22862) {
                      if (e22862 instanceof Object) {
                        var ex__5849__auto__ = e22862;
                        var statearr_22863_22896 = state_22812;
                        statearr_22863_22896[5] = ex__5849__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_22812);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e22862;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__22897 = state_22812;
                    state_22812 = G__22897;
                    continue;
                  } else {
                    return ret_value__5847__auto__;
                  }
                  break;
                }
              };
              state_machine__5846__auto__ = function(state_22812) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5846__auto____0.call(this);
                  case 1:
                    return state_machine__5846__auto____1.call(this, state_22812);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
              return state_machine__5846__auto__;
            }();
          }(switch__5845__auto__, c__5860__auto___22865);
        }();
        var state__5862__auto__ = function() {
          var statearr_22864 = f__5861__auto__.call(null);
          statearr_22864[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___22865;
          return statearr_22864;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
      };
    }(c__5860__auto___22865));
    return out;
  };
  throttle_STAR_ = function(in$, msecs, out, control) {
    switch(arguments.length) {
      case 2:
        return throttle_STAR___2.call(this, in$, msecs);
      case 3:
        return throttle_STAR___3.call(this, in$, msecs, out);
      case 4:
        return throttle_STAR___4.call(this, in$, msecs, out, control);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  throttle_STAR_.cljs$core$IFn$_invoke$arity$2 = throttle_STAR___2;
  throttle_STAR_.cljs$core$IFn$_invoke$arity$3 = throttle_STAR___3;
  throttle_STAR_.cljs$core$IFn$_invoke$arity$4 = throttle_STAR___4;
  return throttle_STAR_;
}();
wilkerdev.util.reactive.throttle_msg_QMARK_ = function throttle_msg_QMARK_(x) {
  return cljs.core.vector_QMARK_.call(null, x) && cljs.core._EQ_.call(null, cljs.core.first.call(null, x), new cljs.core.Keyword("wilkerdev.util.reactive", "throttle", "wilkerdev.util.reactive/throttle", -2028662646));
};
wilkerdev.util.reactive.throttle = function() {
  var throttle = null;
  var throttle__2 = function(in$, msecs) {
    return throttle.call(null, in$, msecs, cljs.core.async.chan.call(null));
  };
  var throttle__3 = function(in$, msecs, out) {
    return wilkerdev.util.reactive.map.call(null, cljs.core.second, wilkerdev.util.reactive.filter.call(null, function(p1__22898_SHARP_) {
      return cljs.core.vector_QMARK_.call(null, p1__22898_SHARP_) && cljs.core._EQ_.call(null, cljs.core.first.call(null, p1__22898_SHARP_), new cljs.core.Keyword("wilkerdev.util.reactive", "throttle", "wilkerdev.util.reactive/throttle", -2028662646));
    }, wilkerdev.util.reactive.throttle_STAR_.call(null, in$, msecs, out)));
  };
  throttle = function(in$, msecs, out) {
    switch(arguments.length) {
      case 2:
        return throttle__2.call(this, in$, msecs);
      case 3:
        return throttle__3.call(this, in$, msecs, out);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  throttle.cljs$core$IFn$_invoke$arity$2 = throttle__2;
  throttle.cljs$core$IFn$_invoke$arity$3 = throttle__3;
  return throttle;
}();
wilkerdev.util.reactive.debounce = function() {
  var debounce = null;
  var debounce__2 = function(source, msecs) {
    return debounce.call(null, cljs.core.async.chan.call(null), source, msecs);
  };
  var debounce__3 = function(out, source, msecs) {
    var c__5860__auto___23087 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto___23087) {
      return function() {
        var f__5861__auto__ = function() {
          var switch__5845__auto__ = function(c__5860__auto___23087) {
            return function(state_23053) {
              var state_val_23054 = state_23053[1];
              if (state_val_23054 === 7) {
                var inst_23049 = state_23053[2];
                var state_23053__$1 = state_23053;
                var statearr_23055_23088 = state_23053__$1;
                statearr_23055_23088[2] = inst_23049;
                statearr_23055_23088[1] = 3;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_23054 === 1) {
                  var inst_22993 = cljs.core.PersistentVector.EMPTY_NODE;
                  var inst_22994 = [source];
                  var inst_22995 = new cljs.core.PersistentVector(null, 1, 5, inst_22993, inst_22994, null);
                  var inst_22996 = new cljs.core.Keyword("wilkerdev.util.reactive", "init", "wilkerdev.util.reactive/init", -1911768360);
                  var inst_22997 = inst_22995;
                  var state_23053__$1 = function() {
                    var statearr_23056 = state_23053;
                    statearr_23056[7] = inst_22996;
                    statearr_23056[8] = inst_22997;
                    return statearr_23056;
                  }();
                  var statearr_23057_23089 = state_23053__$1;
                  statearr_23057_23089[2] = null;
                  statearr_23057_23089[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_23054 === 4) {
                    var inst_23006 = state_23053[9];
                    var inst_23004 = state_23053[2];
                    var inst_23005 = cljs.core.nth.call(null, inst_23004, 0, null);
                    var inst_23006__$1 = cljs.core.nth.call(null, inst_23004, 1, null);
                    var inst_23010 = cljs.core._EQ_.call(null, source, inst_23006__$1);
                    var state_23053__$1 = function() {
                      var statearr_23058 = state_23053;
                      statearr_23058[10] = inst_23005;
                      statearr_23058[9] = inst_23006__$1;
                      return statearr_23058;
                    }();
                    if (inst_23010) {
                      var statearr_23059_23090 = state_23053__$1;
                      statearr_23059_23090[1] = 5;
                    } else {
                      var statearr_23060_23091 = state_23053__$1;
                      statearr_23060_23091[1] = 6;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_23054 === 15) {
                      var inst_22997 = state_23053[8];
                      var inst_23040 = cljs.core.pop.call(null, inst_22997);
                      var inst_22996 = new cljs.core.Keyword("wilkerdev.util.reactive", "init", "wilkerdev.util.reactive/init", -1911768360);
                      var inst_22997__$1 = inst_23040;
                      var state_23053__$1 = function() {
                        var statearr_23061 = state_23053;
                        statearr_23061[7] = inst_22996;
                        statearr_23061[8] = inst_22997__$1;
                        return statearr_23061;
                      }();
                      var statearr_23062_23092 = state_23053__$1;
                      statearr_23062_23092[2] = null;
                      statearr_23062_23092[1] = 2;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_23054 === 13) {
                        var inst_22996 = state_23053[7];
                        var inst_23030 = "No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(inst_22996);
                        var inst_23031 = new Error(inst_23030);
                        var inst_23032 = function() {
                          throw inst_23031;
                        }();
                        var state_23053__$1 = state_23053;
                        var statearr_23063_23093 = state_23053__$1;
                        statearr_23063_23093[2] = inst_23032;
                        statearr_23063_23093[1] = 14;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_23054 === 6) {
                          var inst_23001 = state_23053[11];
                          var inst_23006 = state_23053[9];
                          var inst_23038 = cljs.core._EQ_.call(null, inst_23001, inst_23006);
                          var state_23053__$1 = state_23053;
                          if (inst_23038) {
                            var statearr_23064_23094 = state_23053__$1;
                            statearr_23064_23094[1] = 15;
                          } else {
                            var statearr_23065_23095 = state_23053__$1;
                            statearr_23065_23095[1] = 16;
                          }
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_23054 === 17) {
                            var inst_23047 = state_23053[2];
                            var state_23053__$1 = state_23053;
                            var statearr_23067_23096 = state_23053__$1;
                            statearr_23067_23096[2] = inst_23047;
                            statearr_23067_23096[1] = 7;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_23054 === 3) {
                              var inst_23051 = state_23053[2];
                              var state_23053__$1 = state_23053;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_23053__$1, inst_23051);
                            } else {
                              if (state_val_23054 === 12) {
                                var inst_22996 = state_23053[7];
                                var inst_22997 = state_23053[8];
                                var inst_23025 = cljs.core.pop.call(null, inst_22997);
                                var inst_23026 = cljs.core.async.timeout.call(null, msecs);
                                var inst_23027 = cljs.core.conj.call(null, inst_23025, inst_23026);
                                var tmp23066 = inst_22996;
                                var inst_22996__$1 = tmp23066;
                                var inst_22997__$1 = inst_23027;
                                var state_23053__$1 = function() {
                                  var statearr_23068 = state_23053;
                                  statearr_23068[7] = inst_22996__$1;
                                  statearr_23068[8] = inst_22997__$1;
                                  return statearr_23068;
                                }();
                                var statearr_23069_23097 = state_23053__$1;
                                statearr_23069_23097[2] = null;
                                statearr_23069_23097[1] = 2;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_23054 === 2) {
                                  var inst_22997 = state_23053[8];
                                  var inst_23000 = cljs.core.nth.call(null, inst_22997, 0, null);
                                  var inst_23001 = cljs.core.nth.call(null, inst_22997, 1, null);
                                  var state_23053__$1 = function() {
                                    var statearr_23070 = state_23053;
                                    statearr_23070[12] = inst_23000;
                                    statearr_23070[11] = inst_23001;
                                    return statearr_23070;
                                  }();
                                  return cljs.core.async.ioc_alts_BANG_.call(null, state_23053__$1, 4, inst_22997);
                                } else {
                                  if (state_val_23054 === 11) {
                                    var inst_22997 = state_23053[8];
                                    var inst_23018 = state_23053[2];
                                    var inst_23019 = cljs.core.async.timeout.call(null, msecs);
                                    var inst_23020 = cljs.core.conj.call(null, inst_22997, inst_23019);
                                    var inst_22996 = new cljs.core.Keyword("wilkerdev.util.reactive", "debouncing", "wilkerdev.util.reactive/debouncing", 1463790710);
                                    var inst_22997__$1 = inst_23020;
                                    var state_23053__$1 = function() {
                                      var statearr_23071 = state_23053;
                                      statearr_23071[7] = inst_22996;
                                      statearr_23071[8] = inst_22997__$1;
                                      statearr_23071[13] = inst_23018;
                                      return statearr_23071;
                                    }();
                                    var statearr_23072_23098 = state_23053__$1;
                                    statearr_23072_23098[2] = null;
                                    statearr_23072_23098[1] = 2;
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_23054 === 9) {
                                      var inst_22996 = state_23053[7];
                                      var inst_23023 = cljs.core._EQ_.call(null, new cljs.core.Keyword("wilkerdev.util.reactive", "debouncing", "wilkerdev.util.reactive/debouncing", 1463790710), inst_22996);
                                      var state_23053__$1 = state_23053;
                                      if (inst_23023) {
                                        var statearr_23073_23099 = state_23053__$1;
                                        statearr_23073_23099[1] = 12;
                                      } else {
                                        var statearr_23074_23100 = state_23053__$1;
                                        statearr_23074_23100[1] = 13;
                                      }
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_23054 === 5) {
                                        var inst_22996 = state_23053[7];
                                        var inst_23015 = cljs.core._EQ_.call(null, new cljs.core.Keyword("wilkerdev.util.reactive", "init", "wilkerdev.util.reactive/init", -1911768360), inst_22996);
                                        var state_23053__$1 = state_23053;
                                        if (inst_23015) {
                                          var statearr_23075_23101 = state_23053__$1;
                                          statearr_23075_23101[1] = 8;
                                        } else {
                                          var statearr_23076_23102 = state_23053__$1;
                                          statearr_23076_23102[1] = 9;
                                        }
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_23054 === 14) {
                                          var inst_23034 = state_23053[2];
                                          var state_23053__$1 = state_23053;
                                          var statearr_23077_23103 = state_23053__$1;
                                          statearr_23077_23103[2] = inst_23034;
                                          statearr_23077_23103[1] = 10;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_23054 === 16) {
                                            var inst_23006 = state_23053[9];
                                            var inst_23043 = "No matching clause: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(inst_23006);
                                            var inst_23044 = new Error(inst_23043);
                                            var inst_23045 = function() {
                                              throw inst_23044;
                                            }();
                                            var state_23053__$1 = state_23053;
                                            var statearr_23078_23104 = state_23053__$1;
                                            statearr_23078_23104[2] = inst_23045;
                                            statearr_23078_23104[1] = 17;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_23054 === 10) {
                                              var inst_23036 = state_23053[2];
                                              var state_23053__$1 = state_23053;
                                              var statearr_23079_23105 = state_23053__$1;
                                              statearr_23079_23105[2] = inst_23036;
                                              statearr_23079_23105[1] = 7;
                                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                            } else {
                                              if (state_val_23054 === 8) {
                                                var inst_23005 = state_23053[10];
                                                var state_23053__$1 = state_23053;
                                                return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_23053__$1, 11, out, inst_23005);
                                              } else {
                                                return null;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5860__auto___23087);
          return function(switch__5845__auto__, c__5860__auto___23087) {
            return function() {
              var state_machine__5846__auto__ = null;
              var state_machine__5846__auto____0 = function() {
                var statearr_23083 = [null, null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_23083[0] = state_machine__5846__auto__;
                statearr_23083[1] = 1;
                return statearr_23083;
              };
              var state_machine__5846__auto____1 = function(state_23053) {
                while (true) {
                  var ret_value__5847__auto__ = function() {
                    try {
                      while (true) {
                        var result__5848__auto__ = switch__5845__auto__.call(null, state_23053);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__5848__auto__;
                        }
                        break;
                      }
                    } catch (e23084) {
                      if (e23084 instanceof Object) {
                        var ex__5849__auto__ = e23084;
                        var statearr_23085_23106 = state_23053;
                        statearr_23085_23106[5] = ex__5849__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_23053);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e23084;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__23107 = state_23053;
                    state_23053 = G__23107;
                    continue;
                  } else {
                    return ret_value__5847__auto__;
                  }
                  break;
                }
              };
              state_machine__5846__auto__ = function(state_23053) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5846__auto____0.call(this);
                  case 1:
                    return state_machine__5846__auto____1.call(this, state_23053);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
              return state_machine__5846__auto__;
            }();
          }(switch__5845__auto__, c__5860__auto___23087);
        }();
        var state__5862__auto__ = function() {
          var statearr_23086 = f__5861__auto__.call(null);
          statearr_23086[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___23087;
          return statearr_23086;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
      };
    }(c__5860__auto___23087));
    return out;
  };
  debounce = function(out, source, msecs) {
    switch(arguments.length) {
      case 2:
        return debounce__2.call(this, out, source);
      case 3:
        return debounce__3.call(this, out, source, msecs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  debounce.cljs$core$IFn$_invoke$arity$2 = debounce__2;
  debounce.cljs$core$IFn$_invoke$arity$3 = debounce__3;
  return debounce;
}();
wilkerdev.util.reactive.once = function once(f, in$) {
  var out = cljs.core.async.chan.call(null);
  var c__5860__auto___23184 = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto___23184, out) {
    return function() {
      var f__5861__auto__ = function() {
        var switch__5845__auto__ = function(c__5860__auto___23184, out) {
          return function(state_23165) {
            var state_val_23166 = state_23165[1];
            if (state_val_23166 === 7) {
              var inst_23153 = state_23165[7];
              var state_23165__$1 = state_23165;
              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_23165__$1, 10, out, inst_23153);
            } else {
              if (state_val_23166 === 1) {
                var state_23165__$1 = state_23165;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_23165__$1, 2, in$);
              } else {
                if (state_val_23166 === 4) {
                  var state_23165__$1 = state_23165;
                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_23165__$1, 6, in$);
                } else {
                  if (state_val_23166 === 6) {
                    var inst_23153 = state_23165[7];
                    var inst_23153__$1 = state_23165[2];
                    var state_23165__$1 = function() {
                      var statearr_23167 = state_23165;
                      statearr_23167[7] = inst_23153__$1;
                      return statearr_23167;
                    }();
                    if (cljs.core.truth_(inst_23153__$1)) {
                      var statearr_23168_23185 = state_23165__$1;
                      statearr_23168_23185[1] = 7;
                    } else {
                      var statearr_23169_23186 = state_23165__$1;
                      statearr_23169_23186[1] = 8;
                    }
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_23166 === 3) {
                      var inst_23150 = state_23165[2];
                      var state_23165__$1 = function() {
                        var statearr_23170 = state_23165;
                        statearr_23170[8] = inst_23150;
                        return statearr_23170;
                      }();
                      var statearr_23171_23187 = state_23165__$1;
                      statearr_23171_23187[2] = null;
                      statearr_23171_23187[1] = 4;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_23166 === 2) {
                        var inst_23147 = state_23165[2];
                        var inst_23148 = f.call(null, inst_23147);
                        var state_23165__$1 = function() {
                          var statearr_23172 = state_23165;
                          statearr_23172[9] = inst_23148;
                          return statearr_23172;
                        }();
                        return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_23165__$1, 3, out, inst_23147);
                      } else {
                        if (state_val_23166 === 9) {
                          var inst_23161 = state_23165[2];
                          var state_23165__$1 = state_23165;
                          var statearr_23173_23188 = state_23165__$1;
                          statearr_23173_23188[2] = inst_23161;
                          statearr_23173_23188[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_23166 === 5) {
                            var inst_23163 = state_23165[2];
                            var state_23165__$1 = state_23165;
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_23165__$1, inst_23163);
                          } else {
                            if (state_val_23166 === 10) {
                              var inst_23156 = state_23165[2];
                              var state_23165__$1 = function() {
                                var statearr_23174 = state_23165;
                                statearr_23174[10] = inst_23156;
                                return statearr_23174;
                              }();
                              var statearr_23175_23189 = state_23165__$1;
                              statearr_23175_23189[2] = null;
                              statearr_23175_23189[1] = 4;
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_23166 === 8) {
                                var inst_23159 = cljs.core.async.close_BANG_.call(null, out);
                                var state_23165__$1 = state_23165;
                                var statearr_23176_23190 = state_23165__$1;
                                statearr_23176_23190[2] = inst_23159;
                                statearr_23176_23190[1] = 9;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5860__auto___23184, out);
        return function(switch__5845__auto__, c__5860__auto___23184, out) {
          return function() {
            var state_machine__5846__auto__ = null;
            var state_machine__5846__auto____0 = function() {
              var statearr_23180 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_23180[0] = state_machine__5846__auto__;
              statearr_23180[1] = 1;
              return statearr_23180;
            };
            var state_machine__5846__auto____1 = function(state_23165) {
              while (true) {
                var ret_value__5847__auto__ = function() {
                  try {
                    while (true) {
                      var result__5848__auto__ = switch__5845__auto__.call(null, state_23165);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__5848__auto__;
                      }
                      break;
                    }
                  } catch (e23181) {
                    if (e23181 instanceof Object) {
                      var ex__5849__auto__ = e23181;
                      var statearr_23182_23191 = state_23165;
                      statearr_23182_23191[5] = ex__5849__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_23165);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e23181;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__23192 = state_23165;
                  state_23165 = G__23192;
                  continue;
                } else {
                  return ret_value__5847__auto__;
                }
                break;
              }
            };
            state_machine__5846__auto__ = function(state_23165) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5846__auto____0.call(this);
                case 1:
                  return state_machine__5846__auto____1.call(this, state_23165);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
            return state_machine__5846__auto__;
          }();
        }(switch__5845__auto__, c__5860__auto___23184, out);
      }();
      var state__5862__auto__ = function() {
        var statearr_23183 = f__5861__auto__.call(null);
        statearr_23183[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___23184;
        return statearr_23183;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
    };
  }(c__5860__auto___23184, out));
  return out;
};
wilkerdev.util.reactive.complement = function complement(f) {
  return function() {
    var G__23243__delegate = function(args) {
      var c__5860__auto__ = cljs.core.async.chan.call(null, 1);
      cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto__) {
        return function() {
          var f__5861__auto__ = function() {
            var switch__5845__auto__ = function(c__5860__auto__) {
              return function(state_23231) {
                var state_val_23232 = state_23231[1];
                if (state_val_23232 === 5) {
                  var inst_23224 = state_23231[2];
                  var inst_23225 = wilkerdev.util.reactive.throw_err.call(null, inst_23224);
                  var inst_23226 = cljs.core.not.call(null, inst_23225);
                  var inst_23227 = cljs.core.boolean$.call(null, inst_23226);
                  var state_23231__$1 = state_23231;
                  var statearr_23233_23244 = state_23231__$1;
                  statearr_23233_23244[2] = inst_23227;
                  cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_23231__$1);
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_23232 === 4) {
                    var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_23231, 3, Error, null, 2);
                    var inst_23222 = cljs.core.apply.call(null, f, args);
                    var state_23231__$1 = state_23231;
                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_23231__$1, 5, inst_23222);
                  } else {
                    if (state_val_23232 === 3) {
                      var inst_23218 = state_23231[2];
                      var state_23231__$1 = state_23231;
                      var statearr_23234_23245 = state_23231__$1;
                      statearr_23234_23245[2] = inst_23218;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_23231__$1);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_23232 === 2) {
                        var inst_23229 = state_23231[2];
                        var state_23231__$1 = state_23231;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_23231__$1, inst_23229);
                      } else {
                        if (state_val_23232 === 1) {
                          var state_23231__$1 = state_23231;
                          var statearr_23235_23246 = state_23231__$1;
                          statearr_23235_23246[2] = null;
                          statearr_23235_23246[1] = 4;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          return null;
                        }
                      }
                    }
                  }
                }
              };
            }(c__5860__auto__);
            return function(switch__5845__auto__, c__5860__auto__) {
              return function() {
                var state_machine__5846__auto__ = null;
                var state_machine__5846__auto____0 = function() {
                  var statearr_23239 = [null, null, null, null, null, null, null];
                  statearr_23239[0] = state_machine__5846__auto__;
                  statearr_23239[1] = 1;
                  return statearr_23239;
                };
                var state_machine__5846__auto____1 = function(state_23231) {
                  while (true) {
                    var ret_value__5847__auto__ = function() {
                      try {
                        while (true) {
                          var result__5848__auto__ = switch__5845__auto__.call(null, state_23231);
                          if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                            continue;
                          } else {
                            return result__5848__auto__;
                          }
                          break;
                        }
                      } catch (e23240) {
                        if (e23240 instanceof Object) {
                          var ex__5849__auto__ = e23240;
                          var statearr_23241_23247 = state_23231;
                          statearr_23241_23247[5] = ex__5849__auto__;
                          cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_23231);
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          throw e23240;
                        }
                      }
                    }();
                    if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                      var G__23248 = state_23231;
                      state_23231 = G__23248;
                      continue;
                    } else {
                      return ret_value__5847__auto__;
                    }
                    break;
                  }
                };
                state_machine__5846__auto__ = function(state_23231) {
                  switch(arguments.length) {
                    case 0:
                      return state_machine__5846__auto____0.call(this);
                    case 1:
                      return state_machine__5846__auto____1.call(this, state_23231);
                  }
                  throw new Error("Invalid arity: " + arguments.length);
                };
                state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
                state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
                return state_machine__5846__auto__;
              }();
            }(switch__5845__auto__, c__5860__auto__);
          }();
          var state__5862__auto__ = function() {
            var statearr_23242 = f__5861__auto__.call(null);
            statearr_23242[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto__;
            return statearr_23242;
          }();
          return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
        };
      }(c__5860__auto__));
      return c__5860__auto__;
    };
    var G__23243 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__23243__delegate.call(this, args);
    };
    G__23243.cljs$lang$maxFixedArity = 0;
    G__23243.cljs$lang$applyTo = function(arglist__23249) {
      var args = cljs.core.seq(arglist__23249);
      return G__23243__delegate(args);
    };
    G__23243.cljs$core$IFn$_invoke$arity$variadic = G__23243__delegate;
    return G__23243;
  }();
};
wilkerdev.util.reactive.memoize_async = function memoize_async(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function(mem) {
    return function() {
      var G__23322__delegate = function(args) {
        var v = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args, new cljs.core.Keyword(null, "undefined", "undefined", -1970511116));
        if (cljs.core._EQ_.call(null, v, new cljs.core.Keyword(null, "undefined", "undefined", -1970511116))) {
          var c = cljs.core.apply.call(null, f, args);
          cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "source", "source", -433931539), c], null));
          var c__5860__auto__ = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto__, c, v, mem) {
            return function() {
              var f__5861__auto__ = function() {
                var switch__5845__auto__ = function(c__5860__auto__, c, v, mem) {
                  return function(state_23293) {
                    var state_val_23294 = state_23293[1];
                    if (state_val_23294 === 2) {
                      var inst_23287 = state_23293[2];
                      var inst_23288 = cljs.core.PersistentVector.EMPTY_NODE;
                      var inst_23289 = [args, new cljs.core.Keyword(null, "value", "value", 305978217)];
                      var inst_23290 = new cljs.core.PersistentVector(null, 2, 5, inst_23288, inst_23289, null);
                      var inst_23291 = cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc_in, inst_23290, inst_23287);
                      var state_23293__$1 = function() {
                        var statearr_23295 = state_23293;
                        statearr_23295[7] = inst_23291;
                        return statearr_23295;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_23293__$1, inst_23287);
                    } else {
                      if (state_val_23294 === 1) {
                        var state_23293__$1 = state_23293;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_23293__$1, 2, c);
                      } else {
                        return null;
                      }
                    }
                  };
                }(c__5860__auto__, c, v, mem);
                return function(switch__5845__auto__, c__5860__auto__, c, v, mem) {
                  return function() {
                    var state_machine__5846__auto__ = null;
                    var state_machine__5846__auto____0 = function() {
                      var statearr_23299 = [null, null, null, null, null, null, null, null];
                      statearr_23299[0] = state_machine__5846__auto__;
                      statearr_23299[1] = 1;
                      return statearr_23299;
                    };
                    var state_machine__5846__auto____1 = function(state_23293) {
                      while (true) {
                        var ret_value__5847__auto__ = function() {
                          try {
                            while (true) {
                              var result__5848__auto__ = switch__5845__auto__.call(null, state_23293);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__5848__auto__;
                              }
                              break;
                            }
                          } catch (e23300) {
                            if (e23300 instanceof Object) {
                              var ex__5849__auto__ = e23300;
                              var statearr_23301_23323 = state_23293;
                              statearr_23301_23323[5] = ex__5849__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_23293);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e23300;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__23324 = state_23293;
                          state_23293 = G__23324;
                          continue;
                        } else {
                          return ret_value__5847__auto__;
                        }
                        break;
                      }
                    };
                    state_machine__5846__auto__ = function(state_23293) {
                      switch(arguments.length) {
                        case 0:
                          return state_machine__5846__auto____0.call(this);
                        case 1:
                          return state_machine__5846__auto____1.call(this, state_23293);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
                    state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
                    return state_machine__5846__auto__;
                  }();
                }(switch__5845__auto__, c__5860__auto__, c, v, mem);
              }();
              var state__5862__auto__ = function() {
                var statearr_23302 = f__5861__auto__.call(null);
                statearr_23302[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto__;
                return statearr_23302;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
            };
          }(c__5860__auto__, c, v, mem));
          return c__5860__auto__;
        } else {
          var c__5860__auto__ = cljs.core.async.chan.call(null, 1);
          cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto__, v, mem) {
            return function() {
              var f__5861__auto__ = function() {
                var switch__5845__auto__ = function(c__5860__auto__, v, mem) {
                  return function(state_23312) {
                    var state_val_23313 = state_23312[1];
                    if (state_val_23313 === 2) {
                      var inst_23305 = state_23312[2];
                      var inst_23306 = cljs.core.deref.call(null, mem);
                      var inst_23307 = cljs.core.PersistentVector.EMPTY_NODE;
                      var inst_23308 = [args, new cljs.core.Keyword(null, "value", "value", 305978217)];
                      var inst_23309 = new cljs.core.PersistentVector(null, 2, 5, inst_23307, inst_23308, null);
                      var inst_23310 = cljs.core.get_in.call(null, inst_23306, inst_23309);
                      var state_23312__$1 = function() {
                        var statearr_23314 = state_23312;
                        statearr_23314[7] = inst_23305;
                        return statearr_23314;
                      }();
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_23312__$1, inst_23310);
                    } else {
                      if (state_val_23313 === 1) {
                        var inst_23303 = (new cljs.core.Keyword(null, "source", "source", -433931539)).cljs$core$IFn$_invoke$arity$1(v);
                        var state_23312__$1 = state_23312;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_23312__$1, 2, inst_23303);
                      } else {
                        return null;
                      }
                    }
                  };
                }(c__5860__auto__, v, mem);
                return function(switch__5845__auto__, c__5860__auto__, v, mem) {
                  return function() {
                    var state_machine__5846__auto__ = null;
                    var state_machine__5846__auto____0 = function() {
                      var statearr_23318 = [null, null, null, null, null, null, null, null];
                      statearr_23318[0] = state_machine__5846__auto__;
                      statearr_23318[1] = 1;
                      return statearr_23318;
                    };
                    var state_machine__5846__auto____1 = function(state_23312) {
                      while (true) {
                        var ret_value__5847__auto__ = function() {
                          try {
                            while (true) {
                              var result__5848__auto__ = switch__5845__auto__.call(null, state_23312);
                              if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                continue;
                              } else {
                                return result__5848__auto__;
                              }
                              break;
                            }
                          } catch (e23319) {
                            if (e23319 instanceof Object) {
                              var ex__5849__auto__ = e23319;
                              var statearr_23320_23325 = state_23312;
                              statearr_23320_23325[5] = ex__5849__auto__;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_23312);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              throw e23319;
                            }
                          }
                        }();
                        if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          var G__23326 = state_23312;
                          state_23312 = G__23326;
                          continue;
                        } else {
                          return ret_value__5847__auto__;
                        }
                        break;
                      }
                    };
                    state_machine__5846__auto__ = function(state_23312) {
                      switch(arguments.length) {
                        case 0:
                          return state_machine__5846__auto____0.call(this);
                        case 1:
                          return state_machine__5846__auto____1.call(this, state_23312);
                      }
                      throw new Error("Invalid arity: " + arguments.length);
                    };
                    state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
                    state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
                    return state_machine__5846__auto__;
                  }();
                }(switch__5845__auto__, c__5860__auto__, v, mem);
              }();
              var state__5862__auto__ = function() {
                var statearr_23321 = f__5861__auto__.call(null);
                statearr_23321[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto__;
                return statearr_23321;
              }();
              return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
            };
          }(c__5860__auto__, v, mem));
          return c__5860__auto__;
        }
      };
      var G__23322 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__23322__delegate.call(this, args);
      };
      G__23322.cljs$lang$maxFixedArity = 0;
      G__23322.cljs$lang$applyTo = function(arglist__23327) {
        var args = cljs.core.seq(arglist__23327);
        return G__23322__delegate(args);
      };
      G__23322.cljs$core$IFn$_invoke$arity$variadic = G__23322__delegate;
      return G__23322;
    }();
  }(mem);
};
wilkerdev.util.reactive.channel_pool = function() {
  var channel_pool = null;
  var channel_pool__1 = function(n) {
    return channel_pool.call(null, n, cljs.core.async.chan.call(null, 2048));
  };
  var channel_pool__2 = function(n, queue) {
    var n__4547__auto___23466 = n;
    var __23467 = 0;
    while (true) {
      if (__23467 < n__4547__auto___23466) {
        var chan__20106__auto___23468 = queue;
        var c__5860__auto___23469 = cljs.core.async.chan.call(null, 1);
        cljs.core.async.impl.dispatch.run.call(null, function(__23467, c__5860__auto___23469, chan__20106__auto___23468, n__4547__auto___23466) {
          return function() {
            var f__5861__auto__ = function() {
              var switch__5845__auto__ = function(__23467, c__5860__auto___23469, chan__20106__auto___23468, n__4547__auto___23466) {
                return function(state_23433) {
                  var state_val_23434 = state_23433[1];
                  if (state_val_23434 === 8) {
                    var inst_23403 = state_23433[7];
                    var inst_23424 = state_23433[2];
                    var inst_23425 = cljs.core.async.close_BANG_.call(null, inst_23403);
                    var state_23433__$1 = function() {
                      var statearr_23435 = state_23433;
                      statearr_23435[8] = inst_23425;
                      statearr_23435[9] = inst_23424;
                      return statearr_23435;
                    }();
                    var statearr_23436_23470 = state_23433__$1;
                    statearr_23436_23470[2] = null;
                    statearr_23436_23470[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_23434 === 7) {
                      var inst_23429 = state_23433[2];
                      var state_23433__$1 = state_23433;
                      var statearr_23437_23471 = state_23433__$1;
                      statearr_23437_23471[2] = inst_23429;
                      statearr_23437_23471[1] = 3;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_23434 === 6) {
                        var state_23433__$1 = state_23433;
                        var statearr_23438_23472 = state_23433__$1;
                        statearr_23438_23472[2] = new cljs.core.Keyword(null, "done", "done", -889844188);
                        statearr_23438_23472[1] = 7;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_23434 === 5) {
                          var inst_23403 = state_23433[7];
                          var inst_23399 = state_23433[10];
                          var inst_23402 = cljs.core.nth.call(null, inst_23399, 0, null);
                          var inst_23403__$1 = cljs.core.nth.call(null, inst_23399, 1, null);
                          var inst_23404 = inst_23402.call(null);
                          var inst_23420 = cljs.core.async.chan.call(null, 1);
                          var inst_23421 = function() {
                            var c__5860__auto____$1 = inst_23420;
                            var chan__20106__auto____$1 = inst_23404;
                            var input = inst_23404;
                            var output = inst_23403__$1;
                            var initializer = inst_23402;
                            var vec__23401 = inst_23399;
                            var temp__4220__auto__ = inst_23399;
                            return function(__23467, c__5860__auto____$1, chan__20106__auto____$1, input, output, initializer, vec__23401, temp__4220__auto__, inst_23403, inst_23399, inst_23402, inst_23403__$1, inst_23404, inst_23420, state_val_23434, c__5860__auto___23469, chan__20106__auto___23468, n__4547__auto___23466) {
                              return function() {
                                var f__5861__auto__ = function() {
                                  var switch__5845__auto__ = function(__23467, c__5860__auto____$1, chan__20106__auto____$1, input, output, initializer, vec__23401, temp__4220__auto__, inst_23403, inst_23399, inst_23402, inst_23403__$1, inst_23404, inst_23420, state_val_23434, c__5860__auto___23469, chan__20106__auto___23468, n__4547__auto___23466) {
                                    return function(state_23418) {
                                      var state_val_23419 = state_23418[1];
                                      if (state_val_23419 === 8) {
                                        var inst_23410 = state_23418[2];
                                        var state_23418__$1 = function() {
                                          var statearr_23439 = state_23418;
                                          statearr_23439[7] = inst_23410;
                                          return statearr_23439;
                                        }();
                                        var statearr_23440_23473 = state_23418__$1;
                                        statearr_23440_23473[2] = null;
                                        statearr_23440_23473[1] = 2;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_23419 === 7) {
                                          var inst_23414 = state_23418[2];
                                          var state_23418__$1 = state_23418;
                                          var statearr_23441_23474 = state_23418__$1;
                                          statearr_23441_23474[2] = inst_23414;
                                          statearr_23441_23474[1] = 3;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_23419 === 6) {
                                            var state_23418__$1 = state_23418;
                                            var statearr_23442_23475 = state_23418__$1;
                                            statearr_23442_23475[2] = new cljs.core.Keyword(null, "done", "done", -889844188);
                                            statearr_23442_23475[1] = 7;
                                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                          } else {
                                            if (state_val_23419 === 5) {
                                              var inst_23407 = state_23418[8];
                                              var state_23418__$1 = state_23418;
                                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_23418__$1, 8, output, inst_23407);
                                            } else {
                                              if (state_val_23419 === 4) {
                                                var inst_23407 = state_23418[8];
                                                var inst_23407__$1 = state_23418[2];
                                                var state_23418__$1 = function() {
                                                  var statearr_23443 = state_23418;
                                                  statearr_23443[8] = inst_23407__$1;
                                                  return statearr_23443;
                                                }();
                                                if (cljs.core.truth_(inst_23407__$1)) {
                                                  var statearr_23444_23476 = state_23418__$1;
                                                  statearr_23444_23476[1] = 5;
                                                } else {
                                                  var statearr_23445_23477 = state_23418__$1;
                                                  statearr_23445_23477[1] = 6;
                                                }
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                if (state_val_23419 === 3) {
                                                  var inst_23416 = state_23418[2];
                                                  var state_23418__$1 = state_23418;
                                                  return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_23418__$1, inst_23416);
                                                } else {
                                                  if (state_val_23419 === 2) {
                                                    var state_23418__$1 = state_23418;
                                                    return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_23418__$1, 4, chan__20106__auto____$1);
                                                  } else {
                                                    if (state_val_23419 === 1) {
                                                      var state_23418__$1 = state_23418;
                                                      var statearr_23446_23478 = state_23418__$1;
                                                      statearr_23446_23478[2] = null;
                                                      statearr_23446_23478[1] = 2;
                                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                                    } else {
                                                      return null;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    };
                                  }(__23467, c__5860__auto____$1, chan__20106__auto____$1, input, output, initializer, vec__23401, temp__4220__auto__, inst_23403, inst_23399, inst_23402, inst_23403__$1, inst_23404, inst_23420, state_val_23434, c__5860__auto___23469, chan__20106__auto___23468, n__4547__auto___23466);
                                  return function(__23467, switch__5845__auto__, c__5860__auto____$1, chan__20106__auto____$1, input, output, initializer, vec__23401, temp__4220__auto__, inst_23403, inst_23399, inst_23402, inst_23403__$1, inst_23404, inst_23420, state_val_23434, c__5860__auto___23469, chan__20106__auto___23468, n__4547__auto___23466) {
                                    return function() {
                                      var state_machine__5846__auto__ = null;
                                      var state_machine__5846__auto____0 = function() {
                                        var statearr_23450 = [null, null, null, null, null, null, null, null, null];
                                        statearr_23450[0] = state_machine__5846__auto__;
                                        statearr_23450[1] = 1;
                                        return statearr_23450;
                                      };
                                      var state_machine__5846__auto____1 = function(state_23418) {
                                        while (true) {
                                          var ret_value__5847__auto__ = function() {
                                            try {
                                              while (true) {
                                                var result__5848__auto__ = switch__5845__auto__.call(null, state_23418);
                                                if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                                  continue;
                                                } else {
                                                  return result__5848__auto__;
                                                }
                                                break;
                                              }
                                            } catch (e23451) {
                                              if (e23451 instanceof Object) {
                                                var ex__5849__auto__ = e23451;
                                                var statearr_23452_23479 = state_23418;
                                                statearr_23452_23479[5] = ex__5849__auto__;
                                                cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_23418);
                                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                              } else {
                                                throw e23451;
                                              }
                                            }
                                          }();
                                          if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                                            var G__23480 = state_23418;
                                            state_23418 = G__23480;
                                            continue;
                                          } else {
                                            return ret_value__5847__auto__;
                                          }
                                          break;
                                        }
                                      };
                                      state_machine__5846__auto__ = function(state_23418) {
                                        switch(arguments.length) {
                                          case 0:
                                            return state_machine__5846__auto____0.call(this);
                                          case 1:
                                            return state_machine__5846__auto____1.call(this, state_23418);
                                        }
                                        throw new Error("Invalid arity: " + arguments.length);
                                      };
                                      state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
                                      state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
                                      return state_machine__5846__auto__;
                                    }();
                                  }(__23467, switch__5845__auto__, c__5860__auto____$1, chan__20106__auto____$1, input, output, initializer, vec__23401, temp__4220__auto__, inst_23403, inst_23399, inst_23402, inst_23403__$1, inst_23404, inst_23420, state_val_23434, c__5860__auto___23469, chan__20106__auto___23468, n__4547__auto___23466);
                                }();
                                var state__5862__auto__ = function() {
                                  var statearr_23453 = f__5861__auto__.call(null);
                                  statearr_23453[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto____$1;
                                  return statearr_23453;
                                }();
                                return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
                              };
                            }(__23467, c__5860__auto____$1, chan__20106__auto____$1, input, output, initializer, vec__23401, temp__4220__auto__, inst_23403, inst_23399, inst_23402, inst_23403__$1, inst_23404, inst_23420, state_val_23434, c__5860__auto___23469, chan__20106__auto___23468, n__4547__auto___23466);
                          }();
                          var inst_23422 = cljs.core.async.impl.dispatch.run.call(null, inst_23421);
                          var state_23433__$1 = function() {
                            var statearr_23454 = state_23433;
                            statearr_23454[7] = inst_23403__$1;
                            statearr_23454[11] = inst_23422;
                            return statearr_23454;
                          }();
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_23433__$1, 8, inst_23420);
                        } else {
                          if (state_val_23434 === 4) {
                            var inst_23399 = state_23433[10];
                            var inst_23399__$1 = state_23433[2];
                            var state_23433__$1 = function() {
                              var statearr_23455 = state_23433;
                              statearr_23455[10] = inst_23399__$1;
                              return statearr_23455;
                            }();
                            if (cljs.core.truth_(inst_23399__$1)) {
                              var statearr_23456_23481 = state_23433__$1;
                              statearr_23456_23481[1] = 5;
                            } else {
                              var statearr_23457_23482 = state_23433__$1;
                              statearr_23457_23482[1] = 6;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_23434 === 3) {
                              var inst_23431 = state_23433[2];
                              var state_23433__$1 = state_23433;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_23433__$1, inst_23431);
                            } else {
                              if (state_val_23434 === 2) {
                                var state_23433__$1 = state_23433;
                                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_23433__$1, 4, chan__20106__auto___23468);
                              } else {
                                if (state_val_23434 === 1) {
                                  var state_23433__$1 = state_23433;
                                  var statearr_23458_23483 = state_23433__$1;
                                  statearr_23458_23483[2] = null;
                                  statearr_23458_23483[1] = 2;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                };
              }(__23467, c__5860__auto___23469, chan__20106__auto___23468, n__4547__auto___23466);
              return function(__23467, switch__5845__auto__, c__5860__auto___23469, chan__20106__auto___23468, n__4547__auto___23466) {
                return function() {
                  var state_machine__5846__auto__ = null;
                  var state_machine__5846__auto____0 = function() {
                    var statearr_23462 = [null, null, null, null, null, null, null, null, null, null, null, null];
                    statearr_23462[0] = state_machine__5846__auto__;
                    statearr_23462[1] = 1;
                    return statearr_23462;
                  };
                  var state_machine__5846__auto____1 = function(state_23433) {
                    while (true) {
                      var ret_value__5847__auto__ = function() {
                        try {
                          while (true) {
                            var result__5848__auto__ = switch__5845__auto__.call(null, state_23433);
                            if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                              continue;
                            } else {
                              return result__5848__auto__;
                            }
                            break;
                          }
                        } catch (e23463) {
                          if (e23463 instanceof Object) {
                            var ex__5849__auto__ = e23463;
                            var statearr_23464_23484 = state_23433;
                            statearr_23464_23484[5] = ex__5849__auto__;
                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_23433);
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            throw e23463;
                          }
                        }
                      }();
                      if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        var G__23485 = state_23433;
                        state_23433 = G__23485;
                        continue;
                      } else {
                        return ret_value__5847__auto__;
                      }
                      break;
                    }
                  };
                  state_machine__5846__auto__ = function(state_23433) {
                    switch(arguments.length) {
                      case 0:
                        return state_machine__5846__auto____0.call(this);
                      case 1:
                        return state_machine__5846__auto____1.call(this, state_23433);
                    }
                    throw new Error("Invalid arity: " + arguments.length);
                  };
                  state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
                  state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
                  return state_machine__5846__auto__;
                }();
              }(__23467, switch__5845__auto__, c__5860__auto___23469, chan__20106__auto___23468, n__4547__auto___23466);
            }();
            var state__5862__auto__ = function() {
              var statearr_23465 = f__5861__auto__.call(null);
              statearr_23465[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___23469;
              return statearr_23465;
            }();
            return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
          };
        }(__23467, c__5860__auto___23469, chan__20106__auto___23468, n__4547__auto___23466));
        var G__23486 = __23467 + 1;
        __23467 = G__23486;
        continue;
      } else {
      }
      break;
    }
    return queue;
  };
  channel_pool = function(n, queue) {
    switch(arguments.length) {
      case 1:
        return channel_pool__1.call(this, n);
      case 2:
        return channel_pool__2.call(this, n, queue);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  channel_pool.cljs$core$IFn$_invoke$arity$1 = channel_pool__1;
  channel_pool.cljs$core$IFn$_invoke$arity$2 = channel_pool__2;
  return channel_pool;
}();
wilkerdev.util.reactive.reduce = function reduce(f, init, ch) {
  var c__5860__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto__) {
    return function() {
      var f__5861__auto__ = function() {
        var switch__5845__auto__ = function(c__5860__auto__) {
          return function(state_23554) {
            var state_val_23555 = state_23554[1];
            if (state_val_23555 === 7) {
              var inst_23538 = state_23554[7];
              var inst_23538__$1 = state_23554[2];
              var inst_23539 = inst_23538__$1 == null;
              var state_23554__$1 = function() {
                var statearr_23556 = state_23554;
                statearr_23556[7] = inst_23538__$1;
                return statearr_23556;
              }();
              if (cljs.core.truth_(inst_23539)) {
                var statearr_23557_23575 = state_23554__$1;
                statearr_23557_23575[1] = 8;
              } else {
                var statearr_23558_23576 = state_23554__$1;
                statearr_23558_23576[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_23555 === 1) {
                var state_23554__$1 = state_23554;
                var statearr_23559_23577 = state_23554__$1;
                statearr_23559_23577[2] = null;
                statearr_23559_23577[1] = 4;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_23555 === 4) {
                  var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_23554, 3, Error, null, 2);
                  var inst_23535 = init;
                  var state_23554__$1 = function() {
                    var statearr_23560 = state_23554;
                    statearr_23560[8] = inst_23535;
                    return statearr_23560;
                  }();
                  var statearr_23561_23578 = state_23554__$1;
                  statearr_23561_23578[2] = null;
                  statearr_23561_23578[1] = 5;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_23555 === 6) {
                    var inst_23550 = state_23554[2];
                    var state_23554__$1 = state_23554;
                    var statearr_23562_23579 = state_23554__$1;
                    statearr_23562_23579[2] = inst_23550;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_23554__$1);
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_23555 === 3) {
                      var inst_23531 = state_23554[2];
                      var state_23554__$1 = state_23554;
                      var statearr_23563_23580 = state_23554__$1;
                      statearr_23563_23580[2] = inst_23531;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_23554__$1);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_23555 === 2) {
                        var inst_23552 = state_23554[2];
                        var state_23554__$1 = state_23554;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_23554__$1, inst_23552);
                      } else {
                        if (state_val_23555 === 11) {
                          var inst_23544 = state_23554[2];
                          var inst_23545 = wilkerdev.util.reactive.throw_err.call(null, inst_23544);
                          var inst_23535 = inst_23545;
                          var state_23554__$1 = function() {
                            var statearr_23564 = state_23554;
                            statearr_23564[8] = inst_23535;
                            return statearr_23564;
                          }();
                          var statearr_23565_23581 = state_23554__$1;
                          statearr_23565_23581[2] = null;
                          statearr_23565_23581[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_23555 === 9) {
                            var inst_23538 = state_23554[7];
                            var inst_23535 = state_23554[8];
                            var inst_23542 = f.call(null, inst_23535, inst_23538);
                            var state_23554__$1 = state_23554;
                            return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_23554__$1, 11, inst_23542);
                          } else {
                            if (state_val_23555 === 5) {
                              var state_23554__$1 = state_23554;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_23554__$1, 7, ch);
                            } else {
                              if (state_val_23555 === 10) {
                                var inst_23548 = state_23554[2];
                                var state_23554__$1 = state_23554;
                                var statearr_23566_23582 = state_23554__$1;
                                statearr_23566_23582[2] = inst_23548;
                                statearr_23566_23582[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_23555 === 8) {
                                  var inst_23535 = state_23554[8];
                                  var state_23554__$1 = state_23554;
                                  var statearr_23567_23583 = state_23554__$1;
                                  statearr_23567_23583[2] = inst_23535;
                                  statearr_23567_23583[1] = 10;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5860__auto__);
        return function(switch__5845__auto__, c__5860__auto__) {
          return function() {
            var state_machine__5846__auto__ = null;
            var state_machine__5846__auto____0 = function() {
              var statearr_23571 = [null, null, null, null, null, null, null, null, null];
              statearr_23571[0] = state_machine__5846__auto__;
              statearr_23571[1] = 1;
              return statearr_23571;
            };
            var state_machine__5846__auto____1 = function(state_23554) {
              while (true) {
                var ret_value__5847__auto__ = function() {
                  try {
                    while (true) {
                      var result__5848__auto__ = switch__5845__auto__.call(null, state_23554);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__5848__auto__;
                      }
                      break;
                    }
                  } catch (e23572) {
                    if (e23572 instanceof Object) {
                      var ex__5849__auto__ = e23572;
                      var statearr_23573_23584 = state_23554;
                      statearr_23573_23584[5] = ex__5849__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_23554);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e23572;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__23585 = state_23554;
                  state_23554 = G__23585;
                  continue;
                } else {
                  return ret_value__5847__auto__;
                }
                break;
              }
            };
            state_machine__5846__auto__ = function(state_23554) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5846__auto____0.call(this);
                case 1:
                  return state_machine__5846__auto____1.call(this, state_23554);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
            return state_machine__5846__auto__;
          }();
        }(switch__5845__auto__, c__5860__auto__);
      }();
      var state__5862__auto__ = function() {
        var statearr_23574 = f__5861__auto__.call(null);
        statearr_23574[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto__;
        return statearr_23574;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
    };
  }(c__5860__auto__));
  return c__5860__auto__;
};
wilkerdev.util.reactive.pool_enqueue = function pool_enqueue(pool, initializer) {
  var c = cljs.core.async.chan.call(null);
  cljs.core.async.put_BANG_.call(null, pool, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [initializer, c], null));
  return c;
};
wilkerdev.util.reactive.into_list = function() {
  var into_list = null;
  var into_list__1 = function(channels) {
    return into_list.call(null, channels, cljs.core.PersistentVector.EMPTY);
  };
  var into_list__2 = function(channels, base) {
    return cljs.core.async.into.call(null, base, cljs.core.async.merge.call(null, channels));
  };
  into_list = function(channels, base) {
    switch(arguments.length) {
      case 1:
        return into_list__1.call(this, channels);
      case 2:
        return into_list__2.call(this, channels, base);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_list.cljs$core$IFn$_invoke$arity$1 = into_list__1;
  into_list.cljs$core$IFn$_invoke$arity$2 = into_list__2;
  return into_list;
}();
wilkerdev.util.reactive.retry = function retry(f, n) {
  var c__5860__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto__) {
    return function() {
      var f__5861__auto__ = function() {
        var switch__5845__auto__ = function(c__5860__auto__) {
          return function(state_23651) {
            var state_val_23652 = state_23651[1];
            if (state_val_23652 === 7) {
              var inst_23631 = state_23651[7];
              var state_23651__$1 = state_23651;
              var statearr_23653_23672 = state_23651__$1;
              statearr_23653_23672[2] = inst_23631;
              statearr_23653_23672[1] = 8;
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_23652 === 1) {
                var inst_23629 = n;
                var state_23651__$1 = function() {
                  var statearr_23654 = state_23651;
                  statearr_23654[8] = inst_23629;
                  return statearr_23654;
                }();
                var statearr_23655_23673 = state_23651__$1;
                statearr_23655_23673[2] = null;
                statearr_23655_23673[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_23652 === 4) {
                  var inst_23647 = state_23651[2];
                  var state_23651__$1 = state_23651;
                  var statearr_23656_23674 = state_23651__$1;
                  statearr_23656_23674[2] = inst_23647;
                  statearr_23656_23674[1] = 3;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_23652 === 6) {
                    var inst_23629 = state_23651[8];
                    var inst_23634 = inst_23629 - 1;
                    var inst_23629__$1 = inst_23634;
                    var state_23651__$1 = function() {
                      var statearr_23657 = state_23651;
                      statearr_23657[8] = inst_23629__$1;
                      return statearr_23657;
                    }();
                    var statearr_23658_23675 = state_23651__$1;
                    statearr_23658_23675[2] = null;
                    statearr_23658_23675[1] = 2;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_23652 === 3) {
                      var inst_23649 = state_23651[2];
                      var state_23651__$1 = state_23651;
                      return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_23651__$1, inst_23649);
                    } else {
                      if (state_val_23652 === 2) {
                        var state_23651__$1 = state_23651;
                        var statearr_23659_23676 = state_23651__$1;
                        statearr_23659_23676[2] = null;
                        statearr_23659_23676[1] = 9;
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_23652 === 9) {
                          var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_23651, 5, Error, null, 4);
                          var inst_23642 = f.call(null);
                          var state_23651__$1 = state_23651;
                          return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_23651__$1, 10, inst_23642);
                        } else {
                          if (state_val_23652 === 5) {
                            var inst_23629 = state_23651[8];
                            var inst_23631 = state_23651[2];
                            var inst_23632 = inst_23629 > 0;
                            var state_23651__$1 = function() {
                              var statearr_23660 = state_23651;
                              statearr_23660[7] = inst_23631;
                              return statearr_23660;
                            }();
                            if (cljs.core.truth_(inst_23632)) {
                              var statearr_23661_23677 = state_23651__$1;
                              statearr_23661_23677[1] = 6;
                            } else {
                              var statearr_23662_23678 = state_23651__$1;
                              statearr_23662_23678[1] = 7;
                            }
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_23652 === 10) {
                              var inst_23644 = state_23651[2];
                              var inst_23645 = wilkerdev.util.reactive.throw_err.call(null, inst_23644);
                              var state_23651__$1 = state_23651;
                              var statearr_23663_23679 = state_23651__$1;
                              statearr_23663_23679[2] = inst_23645;
                              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_23651__$1);
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_23652 === 8) {
                                var inst_23638 = state_23651[2];
                                var state_23651__$1 = state_23651;
                                var statearr_23664_23680 = state_23651__$1;
                                statearr_23664_23680[2] = inst_23638;
                                cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_23651__$1);
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5860__auto__);
        return function(switch__5845__auto__, c__5860__auto__) {
          return function() {
            var state_machine__5846__auto__ = null;
            var state_machine__5846__auto____0 = function() {
              var statearr_23668 = [null, null, null, null, null, null, null, null, null];
              statearr_23668[0] = state_machine__5846__auto__;
              statearr_23668[1] = 1;
              return statearr_23668;
            };
            var state_machine__5846__auto____1 = function(state_23651) {
              while (true) {
                var ret_value__5847__auto__ = function() {
                  try {
                    while (true) {
                      var result__5848__auto__ = switch__5845__auto__.call(null, state_23651);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__5848__auto__;
                      }
                      break;
                    }
                  } catch (e23669) {
                    if (e23669 instanceof Object) {
                      var ex__5849__auto__ = e23669;
                      var statearr_23670_23681 = state_23651;
                      statearr_23670_23681[5] = ex__5849__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_23651);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e23669;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__23682 = state_23651;
                  state_23651 = G__23682;
                  continue;
                } else {
                  return ret_value__5847__auto__;
                }
                break;
              }
            };
            state_machine__5846__auto__ = function(state_23651) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5846__auto____0.call(this);
                case 1:
                  return state_machine__5846__auto____1.call(this, state_23651);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
            return state_machine__5846__auto__;
          }();
        }(switch__5845__auto__, c__5860__auto__);
      }();
      var state__5862__auto__ = function() {
        var statearr_23671 = f__5861__auto__.call(null);
        statearr_23671[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto__;
        return statearr_23671;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
    };
  }(c__5860__auto__));
  return c__5860__auto__;
};
wilkerdev.util.reactive.timeout = function timeout(c, msec) {
  var c__5860__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto__) {
    return function() {
      var f__5861__auto__ = function() {
        var switch__5845__auto__ = function(c__5860__auto__) {
          return function(state_23772) {
            var state_val_23773 = state_23772[1];
            if (state_val_23773 === 7) {
              var inst_23751 = state_23772[7];
              var inst_23762 = cljs.core._EQ_.call(null, inst_23751, new cljs.core.Keyword(null, "default", "default", -1987822328));
              var state_23772__$1 = state_23772;
              if (inst_23762) {
                var statearr_23774_23795 = state_23772__$1;
                statearr_23774_23795[1] = 9;
              } else {
                var statearr_23775_23796 = state_23772__$1;
                statearr_23775_23796[1] = 10;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_23773 === 1) {
                var inst_23744 = state_23772[8];
                var inst_23744__$1 = cljs.core.async.timeout.call(null, msec);
                var inst_23745 = cljs.core.PersistentVector.EMPTY_NODE;
                var inst_23746 = [c, inst_23744__$1];
                var inst_23747 = new cljs.core.PersistentVector(null, 2, 5, inst_23745, inst_23746, null);
                var state_23772__$1 = function() {
                  var statearr_23776 = state_23772;
                  statearr_23776[8] = inst_23744__$1;
                  return statearr_23776;
                }();
                return cljs.core.async.ioc_alts_BANG_.call(null, state_23772__$1, 2, inst_23747);
              } else {
                if (state_val_23773 === 4) {
                  var inst_23751 = state_23772[7];
                  var inst_23744 = state_23772[8];
                  var inst_23757 = cljs.core._EQ_.call(null, inst_23751, inst_23744);
                  var state_23772__$1 = state_23772;
                  if (inst_23757) {
                    var statearr_23777_23797 = state_23772__$1;
                    statearr_23777_23797[1] = 6;
                  } else {
                    var statearr_23778_23798 = state_23772__$1;
                    statearr_23778_23798[1] = 7;
                  }
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_23773 === 6) {
                    var inst_23759 = "Timeout " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(msec) + "ms";
                    var inst_23760 = new Error(inst_23759);
                    var state_23772__$1 = state_23772;
                    var statearr_23779_23799 = state_23772__$1;
                    statearr_23779_23799[2] = inst_23760;
                    statearr_23779_23799[1] = 8;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_23773 === 3) {
                      var inst_23749 = state_23772[9];
                      var inst_23755 = cljs.core.nth.call(null, inst_23749, 0, null);
                      var state_23772__$1 = state_23772;
                      var statearr_23780_23800 = state_23772__$1;
                      statearr_23780_23800[2] = inst_23755;
                      statearr_23780_23800[1] = 5;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_23773 === 2) {
                        var inst_23749 = state_23772[9];
                        var inst_23751 = state_23772[7];
                        var inst_23749__$1 = state_23772[2];
                        var inst_23750 = cljs.core.nth.call(null, inst_23749__$1, 0, null);
                        var inst_23751__$1 = cljs.core.nth.call(null, inst_23749__$1, 1, null);
                        var inst_23752 = cljs.core._EQ_.call(null, inst_23751__$1, c);
                        var state_23772__$1 = function() {
                          var statearr_23781 = state_23772;
                          statearr_23781[9] = inst_23749__$1;
                          statearr_23781[10] = inst_23750;
                          statearr_23781[7] = inst_23751__$1;
                          return statearr_23781;
                        }();
                        if (inst_23752) {
                          var statearr_23782_23801 = state_23772__$1;
                          statearr_23782_23801[1] = 3;
                        } else {
                          var statearr_23783_23802 = state_23772__$1;
                          statearr_23783_23802[1] = 4;
                        }
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_23773 === 11) {
                          var inst_23766 = state_23772[2];
                          var state_23772__$1 = state_23772;
                          var statearr_23784_23803 = state_23772__$1;
                          statearr_23784_23803[2] = inst_23766;
                          statearr_23784_23803[1] = 8;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_23773 === 9) {
                            var inst_23750 = state_23772[10];
                            var state_23772__$1 = state_23772;
                            var statearr_23785_23804 = state_23772__$1;
                            statearr_23785_23804[2] = inst_23750;
                            statearr_23785_23804[1] = 11;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_23773 === 5) {
                              var inst_23770 = state_23772[2];
                              var state_23772__$1 = state_23772;
                              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_23772__$1, inst_23770);
                            } else {
                              if (state_val_23773 === 10) {
                                var state_23772__$1 = state_23772;
                                var statearr_23786_23805 = state_23772__$1;
                                statearr_23786_23805[2] = null;
                                statearr_23786_23805[1] = 11;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_23773 === 8) {
                                  var inst_23768 = state_23772[2];
                                  var state_23772__$1 = state_23772;
                                  var statearr_23787_23806 = state_23772__$1;
                                  statearr_23787_23806[2] = inst_23768;
                                  statearr_23787_23806[1] = 5;
                                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5860__auto__);
        return function(switch__5845__auto__, c__5860__auto__) {
          return function() {
            var state_machine__5846__auto__ = null;
            var state_machine__5846__auto____0 = function() {
              var statearr_23791 = [null, null, null, null, null, null, null, null, null, null, null];
              statearr_23791[0] = state_machine__5846__auto__;
              statearr_23791[1] = 1;
              return statearr_23791;
            };
            var state_machine__5846__auto____1 = function(state_23772) {
              while (true) {
                var ret_value__5847__auto__ = function() {
                  try {
                    while (true) {
                      var result__5848__auto__ = switch__5845__auto__.call(null, state_23772);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__5848__auto__;
                      }
                      break;
                    }
                  } catch (e23792) {
                    if (e23792 instanceof Object) {
                      var ex__5849__auto__ = e23792;
                      var statearr_23793_23807 = state_23772;
                      statearr_23793_23807[5] = ex__5849__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_23772);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e23792;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__23808 = state_23772;
                  state_23772 = G__23808;
                  continue;
                } else {
                  return ret_value__5847__auto__;
                }
                break;
              }
            };
            state_machine__5846__auto__ = function(state_23772) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5846__auto____0.call(this);
                case 1:
                  return state_machine__5846__auto____1.call(this, state_23772);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
            return state_machine__5846__auto__;
          }();
        }(switch__5845__auto__, c__5860__auto__);
      }();
      var state__5862__auto__ = function() {
        var statearr_23794 = f__5861__auto__.call(null);
        statearr_23794[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto__;
        return statearr_23794;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
    };
  }(c__5860__auto__));
  return c__5860__auto__;
};
goog.provide("patterny.core");
goog.require("cljs.core");
goog.provide("wilkerdev.util.nodejs");
goog.require("cljs.core");
goog.require("cljs.core.async");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("wilkerdev.util.reactive");
goog.require("wilkerdev.util.reactive");
goog.require("cljs.core.async");
goog.require("cljs.core.async");
wilkerdev.util.nodejs.package_version = require("./package.json").version;
wilkerdev.util.nodejs.fs = require("fs");
wilkerdev.util.nodejs.node_request = require("request");
wilkerdev.util.nodejs.node_path = require("path");
wilkerdev.util.nodejs.node_stream = require("stream");
wilkerdev.util.nodejs.node_temp = require("temp");
wilkerdev.util.nodejs.crypto = require("crypto");
wilkerdev.util.nodejs.xmlrpc = require("xmlrpc");
wilkerdev.util.nodejs.zlib = require("zlib");
wilkerdev.util.nodejs.sep = wilkerdev.util.nodejs.node_path.sep;
wilkerdev.util.nodejs.dirname = function dirname(path) {
  return wilkerdev.util.nodejs.node_path.dirname(path);
};
wilkerdev.util.nodejs.extname = function extname(path) {
  return wilkerdev.util.nodejs.node_path.extname(path);
};
wilkerdev.util.nodejs.basename = function basename(path) {
  return wilkerdev.util.nodejs.node_path.basename(path);
};
wilkerdev.util.nodejs.basename_without_extension = function basename_without_extension(path) {
  return wilkerdev.util.nodejs.node_path.basename(path, wilkerdev.util.nodejs.extname.call(null, path));
};
wilkerdev.util.nodejs.path_join = function() {
  var path_join__delegate = function(paths) {
    return cljs.core.apply.call(null, wilkerdev.util.nodejs.node_path.join, paths);
  };
  var path_join = function(var_args) {
    var paths = null;
    if (arguments.length > 0) {
      paths = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return path_join__delegate.call(this, paths);
  };
  path_join.cljs$lang$maxFixedArity = 0;
  path_join.cljs$lang$applyTo = function(arglist__20135) {
    var paths = cljs.core.seq(arglist__20135);
    return path_join__delegate(paths);
  };
  path_join.cljs$core$IFn$_invoke$arity$variadic = path_join__delegate;
  return path_join;
}();
wilkerdev.util.nodejs.basepath = function basepath(path) {
  return wilkerdev.util.nodejs.path_join.call(null, wilkerdev.util.nodejs.dirname.call(null, path), wilkerdev.util.nodejs.basename_without_extension.call(null, path));
};
wilkerdev.util.nodejs.make_js_error = function make_js_error(node_err) {
  console.log("node err", node_err);
  if (node_err instanceof Error) {
    return node_err;
  } else {
    return new Error(node_err.message);
  }
};
wilkerdev.util.nodejs.node_callback = function node_callback(c) {
  return function(err, res) {
    if (cljs.core.not.call(null, err)) {
      cljs.core.async.put_BANG_.call(null, c, function() {
        var or__3677__auto__ = res;
        if (cljs.core.truth_(or__3677__auto__)) {
          return or__3677__auto__;
        } else {
          return new cljs.core.Keyword(null, "done", "done", -889844188);
        }
      }());
    } else {
      cljs.core.async.put_BANG_.call(null, c, wilkerdev.util.nodejs.make_js_error.call(null, err));
    }
    return cljs.core.async.close_BANG_.call(null, c);
  };
};
wilkerdev.util.nodejs.node__GT_chan_STAR_ = function() {
  var node__GT_chan_STAR___delegate = function(f, args) {
    var c = cljs.core.async.chan.call(null, 1);
    var args__$1 = cljs.core.conj.call(null, cljs.core.vec.call(null, args), wilkerdev.util.nodejs.node_callback.call(null, c));
    var res = cljs.core.apply.call(null, f, args__$1);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [c, res], null);
  };
  var node__GT_chan_STAR_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return node__GT_chan_STAR___delegate.call(this, f, args);
  };
  node__GT_chan_STAR_.cljs$lang$maxFixedArity = 1;
  node__GT_chan_STAR_.cljs$lang$applyTo = function(arglist__20136) {
    var f = cljs.core.first(arglist__20136);
    var args = cljs.core.rest(arglist__20136);
    return node__GT_chan_STAR___delegate(f, args);
  };
  node__GT_chan_STAR_.cljs$core$IFn$_invoke$arity$variadic = node__GT_chan_STAR___delegate;
  return node__GT_chan_STAR_;
}();
wilkerdev.util.nodejs.node__GT_chan = function() {
  var node__GT_chan__delegate = function(args) {
    return cljs.core.nth.call(null, cljs.core.apply.call(null, wilkerdev.util.nodejs.node__GT_chan_STAR_, args), 0);
  };
  var node__GT_chan = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return node__GT_chan__delegate.call(this, args);
  };
  node__GT_chan.cljs$lang$maxFixedArity = 0;
  node__GT_chan.cljs$lang$applyTo = function(arglist__20137) {
    var args = cljs.core.seq(arglist__20137);
    return node__GT_chan__delegate(args);
  };
  node__GT_chan.cljs$core$IFn$_invoke$arity$variadic = node__GT_chan__delegate;
  return node__GT_chan;
}();
wilkerdev.util.nodejs.node_lift = function() {
  var node_lift = null;
  var node_lift__1 = function(f) {
    return node_lift.call(null, f, cljs.core.identity);
  };
  var node_lift__2 = function(f, transformer) {
    return function() {
      var G__20186__delegate = function(args) {
        var c__5860__auto__ = cljs.core.async.chan.call(null, 1);
        cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto__) {
          return function() {
            var f__5861__auto__ = function() {
              var switch__5845__auto__ = function(c__5860__auto__) {
                return function(state_20174) {
                  var state_val_20175 = state_20174[1];
                  if (state_val_20175 === 5) {
                    var inst_20168 = state_20174[2];
                    var inst_20169 = wilkerdev.util.reactive.throw_err.call(null, inst_20168);
                    var inst_20170 = transformer.call(null, inst_20169);
                    var state_20174__$1 = state_20174;
                    var statearr_20176_20187 = state_20174__$1;
                    statearr_20176_20187[2] = inst_20170;
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20174__$1);
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_20175 === 4) {
                      var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_20174, 3, Error, null, 2);
                      var inst_20166 = cljs.core.apply.call(null, wilkerdev.util.nodejs.node__GT_chan, f, args);
                      var state_20174__$1 = state_20174;
                      return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_20174__$1, 5, inst_20166);
                    } else {
                      if (state_val_20175 === 3) {
                        var inst_20162 = state_20174[2];
                        var state_20174__$1 = state_20174;
                        var statearr_20177_20188 = state_20174__$1;
                        statearr_20177_20188[2] = inst_20162;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20174__$1);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        if (state_val_20175 === 2) {
                          var inst_20172 = state_20174[2];
                          var state_20174__$1 = state_20174;
                          return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20174__$1, inst_20172);
                        } else {
                          if (state_val_20175 === 1) {
                            var state_20174__$1 = state_20174;
                            var statearr_20178_20189 = state_20174__$1;
                            statearr_20178_20189[2] = null;
                            statearr_20178_20189[1] = 4;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            return null;
                          }
                        }
                      }
                    }
                  }
                };
              }(c__5860__auto__);
              return function(switch__5845__auto__, c__5860__auto__) {
                return function() {
                  var state_machine__5846__auto__ = null;
                  var state_machine__5846__auto____0 = function() {
                    var statearr_20182 = [null, null, null, null, null, null, null];
                    statearr_20182[0] = state_machine__5846__auto__;
                    statearr_20182[1] = 1;
                    return statearr_20182;
                  };
                  var state_machine__5846__auto____1 = function(state_20174) {
                    while (true) {
                      var ret_value__5847__auto__ = function() {
                        try {
                          while (true) {
                            var result__5848__auto__ = switch__5845__auto__.call(null, state_20174);
                            if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                              continue;
                            } else {
                              return result__5848__auto__;
                            }
                            break;
                          }
                        } catch (e20183) {
                          if (e20183 instanceof Object) {
                            var ex__5849__auto__ = e20183;
                            var statearr_20184_20190 = state_20174;
                            statearr_20184_20190[5] = ex__5849__auto__;
                            cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20174);
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            throw e20183;
                          }
                        }
                      }();
                      if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        var G__20191 = state_20174;
                        state_20174 = G__20191;
                        continue;
                      } else {
                        return ret_value__5847__auto__;
                      }
                      break;
                    }
                  };
                  state_machine__5846__auto__ = function(state_20174) {
                    switch(arguments.length) {
                      case 0:
                        return state_machine__5846__auto____0.call(this);
                      case 1:
                        return state_machine__5846__auto____1.call(this, state_20174);
                    }
                    throw new Error("Invalid arity: " + arguments.length);
                  };
                  state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
                  state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
                  return state_machine__5846__auto__;
                }();
              }(switch__5845__auto__, c__5860__auto__);
            }();
            var state__5862__auto__ = function() {
              var statearr_20185 = f__5861__auto__.call(null);
              statearr_20185[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto__;
              return statearr_20185;
            }();
            return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
          };
        }(c__5860__auto__));
        return c__5860__auto__;
      };
      var G__20186 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__20186__delegate.call(this, args);
      };
      G__20186.cljs$lang$maxFixedArity = 0;
      G__20186.cljs$lang$applyTo = function(arglist__20192) {
        var args = cljs.core.seq(arglist__20192);
        return G__20186__delegate(args);
      };
      G__20186.cljs$core$IFn$_invoke$arity$variadic = G__20186__delegate;
      return G__20186;
    }();
  };
  node_lift = function(f, transformer) {
    switch(arguments.length) {
      case 1:
        return node_lift__1.call(this, f);
      case 2:
        return node_lift__2.call(this, f, transformer);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  node_lift.cljs$core$IFn$_invoke$arity$1 = node_lift__1;
  node_lift.cljs$core$IFn$_invoke$arity$2 = node_lift__2;
  return node_lift;
}();
wilkerdev.util.nodejs.rename = wilkerdev.util.nodejs.node_lift.call(null, wilkerdev.util.nodejs.fs.rename);
wilkerdev.util.nodejs.mkdir = wilkerdev.util.nodejs.node_lift.call(null, wilkerdev.util.nodejs.fs.mkdir);
wilkerdev.util.nodejs.lstat = wilkerdev.util.nodejs.node_lift.call(null, wilkerdev.util.nodejs.fs.lstat);
wilkerdev.util.nodejs.fopen = wilkerdev.util.nodejs.node_lift.call(null, wilkerdev.util.nodejs.fs.open);
wilkerdev.util.nodejs.fread = wilkerdev.util.nodejs.node_lift.call(null, wilkerdev.util.nodejs.fs.read);
wilkerdev.util.nodejs.read_file = wilkerdev.util.nodejs.node_lift.call(null, wilkerdev.util.nodejs.fs.readFile);
wilkerdev.util.nodejs.read_dir = wilkerdev.util.nodejs.node_lift.call(null, wilkerdev.util.nodejs.fs.readdir, cljs.core.array_seq);
wilkerdev.util.nodejs.create_read_stream = function create_read_stream(path) {
  return wilkerdev.util.nodejs.fs.createReadStream(path);
};
wilkerdev.util.nodejs.create_write_stream = function create_write_stream(path) {
  return wilkerdev.util.nodejs.fs.createWriteStream(path);
};
wilkerdev.util.nodejs.delete_file = wilkerdev.util.nodejs.node_lift.call(null, wilkerdev.util.nodejs.fs.unlink);
wilkerdev.util.nodejs.http = function http(options) {
  var c__5860__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto__) {
    return function() {
      var f__5861__auto__ = function() {
        var switch__5845__auto__ = function(c__5860__auto__) {
          return function(state_20212) {
            var state_val_20213 = state_20212[1];
            if (state_val_20213 === 2) {
              var inst_20210 = state_20212[2];
              var state_20212__$1 = state_20212;
              return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20212__$1, inst_20210);
            } else {
              if (state_val_20213 === 1) {
                var inst_20207 = cljs.core.clj__GT_js.call(null, options);
                var inst_20208 = wilkerdev.util.nodejs.node__GT_chan.call(null, wilkerdev.util.nodejs.node_request, inst_20207);
                var state_20212__$1 = state_20212;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_20212__$1, 2, inst_20208);
              } else {
                return null;
              }
            }
          };
        }(c__5860__auto__);
        return function(switch__5845__auto__, c__5860__auto__) {
          return function() {
            var state_machine__5846__auto__ = null;
            var state_machine__5846__auto____0 = function() {
              var statearr_20217 = [null, null, null, null, null, null, null];
              statearr_20217[0] = state_machine__5846__auto__;
              statearr_20217[1] = 1;
              return statearr_20217;
            };
            var state_machine__5846__auto____1 = function(state_20212) {
              while (true) {
                var ret_value__5847__auto__ = function() {
                  try {
                    while (true) {
                      var result__5848__auto__ = switch__5845__auto__.call(null, state_20212);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__5848__auto__;
                      }
                      break;
                    }
                  } catch (e20218) {
                    if (e20218 instanceof Object) {
                      var ex__5849__auto__ = e20218;
                      var statearr_20219_20221 = state_20212;
                      statearr_20219_20221[5] = ex__5849__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20212);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e20218;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__20222 = state_20212;
                  state_20212 = G__20222;
                  continue;
                } else {
                  return ret_value__5847__auto__;
                }
                break;
              }
            };
            state_machine__5846__auto__ = function(state_20212) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5846__auto____0.call(this);
                case 1:
                  return state_machine__5846__auto____1.call(this, state_20212);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
            return state_machine__5846__auto__;
          }();
        }(switch__5845__auto__, c__5860__auto__);
      }();
      var state__5862__auto__ = function() {
        var statearr_20220 = f__5861__auto__.call(null);
        statearr_20220[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto__;
        return statearr_20220;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
    };
  }(c__5860__auto__));
  return c__5860__auto__;
};
wilkerdev.util.nodejs.http_stream = function http_stream(options) {
  return wilkerdev.util.nodejs.node_request.call(null, cljs.core.clj__GT_js.call(null, options));
};
wilkerdev.util.nodejs.http_post_form = function http_post_form(options, builder) {
  var options__$1 = cljs.core.clj__GT_js.call(null, cljs.core.merge.call(null, options, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "method", "method", 55703592), "POST", new cljs.core.Keyword(null, "postambleCRLF", "postambleCRLF", -448357028), true], null)));
  var vec__20224 = wilkerdev.util.nodejs.node__GT_chan_STAR_.call(null, wilkerdev.util.nodejs.node_request, options__$1);
  var c = cljs.core.nth.call(null, vec__20224, 0, null);
  var req = cljs.core.nth.call(null, vec__20224, 1, null);
  builder.call(null, req.form());
  return c;
};
wilkerdev.util.nodejs.md5_hex = function md5_hex(buffer) {
  var sum = wilkerdev.util.nodejs.crypto.createHash("md5");
  sum.update(buffer);
  return sum.digest("hex");
};
wilkerdev.util.nodejs.md5_file = function md5_file(path) {
  var c__5860__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto__) {
    return function() {
      var f__5861__auto__ = function() {
        var switch__5845__auto__ = function(c__5860__auto__) {
          return function(state_20267) {
            var state_val_20268 = state_20267[1];
            if (state_val_20268 === 5) {
              var inst_20257 = state_20267[7];
              var inst_20260 = state_20267[2];
              var inst_20261 = wilkerdev.util.reactive.throw_err.call(null, inst_20260);
              var inst_20262 = inst_20257.update(inst_20261);
              var inst_20263 = inst_20257.digest("hex");
              var state_20267__$1 = function() {
                var statearr_20269 = state_20267;
                statearr_20269[8] = inst_20262;
                return statearr_20269;
              }();
              var statearr_20270_20281 = state_20267__$1;
              statearr_20270_20281[2] = inst_20263;
              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20267__$1);
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_20268 === 4) {
                var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_20267, 3, Error, null, 2);
                var inst_20257 = wilkerdev.util.nodejs.crypto.createHash("md5");
                var inst_20258 = wilkerdev.util.nodejs.read_file.call(null, path);
                var state_20267__$1 = function() {
                  var statearr_20271 = state_20267;
                  statearr_20271[7] = inst_20257;
                  return statearr_20271;
                }();
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_20267__$1, 5, inst_20258);
              } else {
                if (state_val_20268 === 3) {
                  var inst_20253 = state_20267[2];
                  var state_20267__$1 = state_20267;
                  var statearr_20272_20282 = state_20267__$1;
                  statearr_20272_20282[2] = inst_20253;
                  cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20267__$1);
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_20268 === 2) {
                    var inst_20265 = state_20267[2];
                    var state_20267__$1 = state_20267;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20267__$1, inst_20265);
                  } else {
                    if (state_val_20268 === 1) {
                      var state_20267__$1 = state_20267;
                      var statearr_20273_20283 = state_20267__$1;
                      statearr_20273_20283[2] = null;
                      statearr_20273_20283[1] = 4;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          };
        }(c__5860__auto__);
        return function(switch__5845__auto__, c__5860__auto__) {
          return function() {
            var state_machine__5846__auto__ = null;
            var state_machine__5846__auto____0 = function() {
              var statearr_20277 = [null, null, null, null, null, null, null, null, null];
              statearr_20277[0] = state_machine__5846__auto__;
              statearr_20277[1] = 1;
              return statearr_20277;
            };
            var state_machine__5846__auto____1 = function(state_20267) {
              while (true) {
                var ret_value__5847__auto__ = function() {
                  try {
                    while (true) {
                      var result__5848__auto__ = switch__5845__auto__.call(null, state_20267);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__5848__auto__;
                      }
                      break;
                    }
                  } catch (e20278) {
                    if (e20278 instanceof Object) {
                      var ex__5849__auto__ = e20278;
                      var statearr_20279_20284 = state_20267;
                      statearr_20279_20284[5] = ex__5849__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20267);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e20278;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__20285 = state_20267;
                  state_20267 = G__20285;
                  continue;
                } else {
                  return ret_value__5847__auto__;
                }
                break;
              }
            };
            state_machine__5846__auto__ = function(state_20267) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5846__auto____0.call(this);
                case 1:
                  return state_machine__5846__auto____1.call(this, state_20267);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
            return state_machine__5846__auto__;
          }();
        }(switch__5845__auto__, c__5860__auto__);
      }();
      var state__5862__auto__ = function() {
        var statearr_20280 = f__5861__auto__.call(null);
        statearr_20280[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto__;
        return statearr_20280;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
    };
  }(c__5860__auto__));
  return c__5860__auto__;
};
wilkerdev.util.nodejs.xmlrpc_client = function xmlrpc_client(options) {
  return wilkerdev.util.nodejs.xmlrpc.createClient(cljs.core.clj__GT_js.call(null, options));
};
wilkerdev.util.nodejs.xmlrpc_call = function() {
  var xmlrpc_call__delegate = function(client, method, args) {
    var c = cljs.core.async.chan.call(null, 1);
    client.methodCall(method, cljs.core.clj__GT_js.call(null, args), wilkerdev.util.nodejs.node_callback.call(null, c));
    return c;
  };
  var xmlrpc_call = function(client, method, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return xmlrpc_call__delegate.call(this, client, method, args);
  };
  xmlrpc_call.cljs$lang$maxFixedArity = 2;
  xmlrpc_call.cljs$lang$applyTo = function(arglist__20286) {
    var client = cljs.core.first(arglist__20286);
    arglist__20286 = cljs.core.next(arglist__20286);
    var method = cljs.core.first(arglist__20286);
    var args = cljs.core.rest(arglist__20286);
    return xmlrpc_call__delegate(client, method, args);
  };
  xmlrpc_call.cljs$core$IFn$_invoke$arity$variadic = xmlrpc_call__delegate;
  return xmlrpc_call;
}();
wilkerdev.util.nodejs.stream_complete__GT_chan = function() {
  var stream_complete__GT_chan = null;
  var stream_complete__GT_chan__1 = function(stream) {
    return stream_complete__GT_chan.call(null, stream, cljs.core.async.chan.call(null));
  };
  var stream_complete__GT_chan__2 = function(stream, c) {
    stream.on("error", function(p1__20287_SHARP_) {
      cljs.core.async.put_BANG_.call(null, c, wilkerdev.util.nodejs.make_js_error.call(null, p1__20287_SHARP_));
      return cljs.core.async.close_BANG_.call(null, c);
    });
    stream.on("end", function() {
      return cljs.core.async.close_BANG_.call(null, c);
    });
    return c;
  };
  stream_complete__GT_chan = function(stream, c) {
    switch(arguments.length) {
      case 1:
        return stream_complete__GT_chan__1.call(this, stream);
      case 2:
        return stream_complete__GT_chan__2.call(this, stream, c);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  stream_complete__GT_chan.cljs$core$IFn$_invoke$arity$1 = stream_complete__GT_chan__1;
  stream_complete__GT_chan.cljs$core$IFn$_invoke$arity$2 = stream_complete__GT_chan__2;
  return stream_complete__GT_chan;
}();
wilkerdev.util.nodejs.stream__GT_chan = function() {
  var stream__GT_chan = null;
  var stream__GT_chan__1 = function(stream) {
    return stream__GT_chan.call(null, stream, cljs.core.async.chan.call(null, 1));
  };
  var stream__GT_chan__2 = function(stream, c) {
    wilkerdev.util.nodejs.stream_complete__GT_chan.call(null, stream, c);
    stream.on("data", function(p1__20288_SHARP_) {
      return cljs.core.async.put_BANG_.call(null, c, p1__20288_SHARP_);
    });
    return c;
  };
  stream__GT_chan = function(stream, c) {
    switch(arguments.length) {
      case 1:
        return stream__GT_chan__1.call(this, stream);
      case 2:
        return stream__GT_chan__2.call(this, stream, c);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  stream__GT_chan.cljs$core$IFn$_invoke$arity$1 = stream__GT_chan__1;
  stream__GT_chan.cljs$core$IFn$_invoke$arity$2 = stream__GT_chan__2;
  return stream__GT_chan;
}();
wilkerdev.util.nodejs.pipe_stream = function pipe_stream(source, target) {
  var c = wilkerdev.util.nodejs.stream_complete__GT_chan.call(null, source);
  source.pipe(target);
  return c;
};
wilkerdev.util.nodejs.save_stream_to = function save_stream_to(stream, path) {
  return wilkerdev.util.nodejs.pipe_stream.call(null, stream, wilkerdev.util.nodejs.create_write_stream.call(null, path));
};
wilkerdev.util.nodejs.stream__GT_str = function stream__GT_str(stream) {
  return cljs.core.async.reduce.call(null, cljs.core.str, "", wilkerdev.util.nodejs.stream__GT_chan.call(null, stream));
};
wilkerdev.util.nodejs.make_stream = function make_stream(s) {
  var Readable = wilkerdev.util.nodejs.node_stream.Readable;
  var G__20290 = new Readable;
  G__20290.push(s);
  G__20290.push(null);
  return G__20290;
};
wilkerdev.util.nodejs.temp_stream = function temp_stream(suffix) {
  return wilkerdev.util.nodejs.node_temp.createWriteStream({"suffix":suffix});
};
wilkerdev.util.nodejs.file_exists_QMARK_ = function file_exists_QMARK_(path) {
  var out = cljs.core.async.chan.call(null);
  wilkerdev.util.nodejs.fs.exists(path, function(out) {
    return function(p1__20291_SHARP_) {
      cljs.core.async.put_BANG_.call(null, out, p1__20291_SHARP_);
      return cljs.core.async.close_BANG_.call(null, out);
    };
  }(out));
  return out;
};
wilkerdev.util.nodejs.exists_QMARK_ = function exists_QMARK_(path) {
  var out = cljs.core.async.chan.call(null);
  wilkerdev.util.nodejs.fs.exists(path, function(out) {
    return function(p1__20292_SHARP_) {
      cljs.core.async.put_BANG_.call(null, out, p1__20292_SHARP_);
      return cljs.core.async.close_BANG_.call(null, out);
    };
  }(out));
  return out;
};
wilkerdev.util.nodejs.is_dir_QMARK_ = function is_dir_QMARK_(path) {
  var c__5860__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto__) {
    return function() {
      var f__5861__auto__ = function() {
        var switch__5845__auto__ = function(c__5860__auto__) {
          return function(state_20329) {
            var state_val_20330 = state_20329[1];
            if (state_val_20330 === 5) {
              var inst_20323 = state_20329[2];
              var inst_20324 = wilkerdev.util.reactive.throw_err.call(null, inst_20323);
              var inst_20325 = inst_20324.isDirectory();
              var state_20329__$1 = state_20329;
              var statearr_20331_20341 = state_20329__$1;
              statearr_20331_20341[2] = inst_20325;
              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20329__$1);
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_20330 === 4) {
                var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_20329, 3, Error, null, 2);
                var inst_20321 = wilkerdev.util.nodejs.lstat.call(null, path);
                var state_20329__$1 = state_20329;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_20329__$1, 5, inst_20321);
              } else {
                if (state_val_20330 === 3) {
                  var inst_20317 = state_20329[2];
                  var state_20329__$1 = state_20329;
                  var statearr_20332_20342 = state_20329__$1;
                  statearr_20332_20342[2] = inst_20317;
                  cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20329__$1);
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_20330 === 2) {
                    var inst_20327 = state_20329[2];
                    var state_20329__$1 = state_20329;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20329__$1, inst_20327);
                  } else {
                    if (state_val_20330 === 1) {
                      var state_20329__$1 = state_20329;
                      var statearr_20333_20343 = state_20329__$1;
                      statearr_20333_20343[2] = null;
                      statearr_20333_20343[1] = 4;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          };
        }(c__5860__auto__);
        return function(switch__5845__auto__, c__5860__auto__) {
          return function() {
            var state_machine__5846__auto__ = null;
            var state_machine__5846__auto____0 = function() {
              var statearr_20337 = [null, null, null, null, null, null, null];
              statearr_20337[0] = state_machine__5846__auto__;
              statearr_20337[1] = 1;
              return statearr_20337;
            };
            var state_machine__5846__auto____1 = function(state_20329) {
              while (true) {
                var ret_value__5847__auto__ = function() {
                  try {
                    while (true) {
                      var result__5848__auto__ = switch__5845__auto__.call(null, state_20329);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__5848__auto__;
                      }
                      break;
                    }
                  } catch (e20338) {
                    if (e20338 instanceof Object) {
                      var ex__5849__auto__ = e20338;
                      var statearr_20339_20344 = state_20329;
                      statearr_20339_20344[5] = ex__5849__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20329);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e20338;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__20345 = state_20329;
                  state_20329 = G__20345;
                  continue;
                } else {
                  return ret_value__5847__auto__;
                }
                break;
              }
            };
            state_machine__5846__auto__ = function(state_20329) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5846__auto____0.call(this);
                case 1:
                  return state_machine__5846__auto____1.call(this, state_20329);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
            return state_machine__5846__auto__;
          }();
        }(switch__5845__auto__, c__5860__auto__);
      }();
      var state__5862__auto__ = function() {
        var statearr_20340 = f__5861__auto__.call(null);
        statearr_20340[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto__;
        return statearr_20340;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
    };
  }(c__5860__auto__));
  return c__5860__auto__;
};
wilkerdev.util.nodejs.is_file_QMARK_ = function is_file_QMARK_(path) {
  var c__5860__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto__) {
    return function() {
      var f__5861__auto__ = function() {
        var switch__5845__auto__ = function(c__5860__auto__) {
          return function(state_20382) {
            var state_val_20383 = state_20382[1];
            if (state_val_20383 === 5) {
              var inst_20376 = state_20382[2];
              var inst_20377 = wilkerdev.util.reactive.throw_err.call(null, inst_20376);
              var inst_20378 = inst_20377.isFile();
              var state_20382__$1 = state_20382;
              var statearr_20384_20394 = state_20382__$1;
              statearr_20384_20394[2] = inst_20378;
              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20382__$1);
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_20383 === 4) {
                var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_20382, 3, Error, null, 2);
                var inst_20374 = wilkerdev.util.nodejs.lstat.call(null, path);
                var state_20382__$1 = state_20382;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_20382__$1, 5, inst_20374);
              } else {
                if (state_val_20383 === 3) {
                  var inst_20370 = state_20382[2];
                  var state_20382__$1 = state_20382;
                  var statearr_20385_20395 = state_20382__$1;
                  statearr_20385_20395[2] = inst_20370;
                  cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20382__$1);
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_20383 === 2) {
                    var inst_20380 = state_20382[2];
                    var state_20382__$1 = state_20382;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20382__$1, inst_20380);
                  } else {
                    if (state_val_20383 === 1) {
                      var state_20382__$1 = state_20382;
                      var statearr_20386_20396 = state_20382__$1;
                      statearr_20386_20396[2] = null;
                      statearr_20386_20396[1] = 4;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          };
        }(c__5860__auto__);
        return function(switch__5845__auto__, c__5860__auto__) {
          return function() {
            var state_machine__5846__auto__ = null;
            var state_machine__5846__auto____0 = function() {
              var statearr_20390 = [null, null, null, null, null, null, null];
              statearr_20390[0] = state_machine__5846__auto__;
              statearr_20390[1] = 1;
              return statearr_20390;
            };
            var state_machine__5846__auto____1 = function(state_20382) {
              while (true) {
                var ret_value__5847__auto__ = function() {
                  try {
                    while (true) {
                      var result__5848__auto__ = switch__5845__auto__.call(null, state_20382);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__5848__auto__;
                      }
                      break;
                    }
                  } catch (e20391) {
                    if (e20391 instanceof Object) {
                      var ex__5849__auto__ = e20391;
                      var statearr_20392_20397 = state_20382;
                      statearr_20392_20397[5] = ex__5849__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20382);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e20391;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__20398 = state_20382;
                  state_20382 = G__20398;
                  continue;
                } else {
                  return ret_value__5847__auto__;
                }
                break;
              }
            };
            state_machine__5846__auto__ = function(state_20382) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5846__auto____0.call(this);
                case 1:
                  return state_machine__5846__auto____1.call(this, state_20382);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
            return state_machine__5846__auto__;
          }();
        }(switch__5845__auto__, c__5860__auto__);
      }();
      var state__5862__auto__ = function() {
        var statearr_20393 = f__5861__auto__.call(null);
        statearr_20393[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto__;
        return statearr_20393;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
    };
  }(c__5860__auto__));
  return c__5860__auto__;
};
wilkerdev.util.nodejs.path_iterator = function() {
  var path_iterator = null;
  var path_iterator__1 = function(path) {
    return path_iterator.call(null, "", cljs.core.remove.call(null, clojure.string.blank_QMARK_, clojure.string.split.call(null, path, wilkerdev.util.nodejs.sep)));
  };
  var path_iterator__2 = function(current, left) {
    if (cljs.core.truth_(left)) {
      var cur = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(current) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(wilkerdev.util.nodejs.sep) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, left));
      return cljs.core.cons.call(null, cur, new cljs.core.LazySeq(null, function(cur) {
        return function() {
          return path_iterator.call(null, cur, cljs.core.next.call(null, left));
        };
      }(cur), null, null));
    } else {
      return null;
    }
  };
  path_iterator = function(current, left) {
    switch(arguments.length) {
      case 1:
        return path_iterator__1.call(this, current);
      case 2:
        return path_iterator__2.call(this, current, left);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  path_iterator.cljs$core$IFn$_invoke$arity$1 = path_iterator__1;
  path_iterator.cljs$core$IFn$_invoke$arity$2 = path_iterator__2;
  return path_iterator;
}();
wilkerdev.util.nodejs.mkdir_p = function mkdir_p(path) {
  var c = wilkerdev.util.reactive.drop_while.call(null, wilkerdev.util.nodejs.exists_QMARK_, wilkerdev.util.reactive.spool.call(null, wilkerdev.util.nodejs.path_iterator.call(null, path)));
  var c__5860__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto__, c) {
    return function() {
      var f__5861__auto__ = function() {
        var switch__5845__auto__ = function(c__5860__auto__, c) {
          return function(state_20462) {
            var state_val_20463 = state_20462[1];
            if (state_val_20463 === 7) {
              var inst_20447 = state_20462[7];
              var inst_20447__$1 = state_20462[2];
              var state_20462__$1 = function() {
                var statearr_20464 = state_20462;
                statearr_20464[7] = inst_20447__$1;
                return statearr_20464;
              }();
              if (cljs.core.truth_(inst_20447__$1)) {
                var statearr_20465_20483 = state_20462__$1;
                statearr_20465_20483[1] = 8;
              } else {
                var statearr_20466_20484 = state_20462__$1;
                statearr_20466_20484[1] = 9;
              }
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_20463 === 1) {
                var state_20462__$1 = state_20462;
                var statearr_20467_20485 = state_20462__$1;
                statearr_20467_20485[2] = null;
                statearr_20467_20485[1] = 4;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_20463 === 4) {
                  var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_20462, 3, Error, null, 2);
                  var state_20462__$1 = state_20462;
                  var statearr_20468_20486 = state_20462__$1;
                  statearr_20468_20486[2] = null;
                  statearr_20468_20486[1] = 5;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_20463 === 6) {
                    var inst_20458 = state_20462[2];
                    var state_20462__$1 = function() {
                      var statearr_20469 = state_20462;
                      statearr_20469[8] = inst_20458;
                      return statearr_20469;
                    }();
                    var statearr_20470_20487 = state_20462__$1;
                    statearr_20470_20487[2] = new cljs.core.Keyword(null, "done", "done", -889844188);
                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20462__$1);
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_20463 === 3) {
                      var inst_20441 = state_20462[2];
                      var state_20462__$1 = state_20462;
                      var statearr_20471_20488 = state_20462__$1;
                      statearr_20471_20488[2] = inst_20441;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20462__$1);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_20463 === 2) {
                        var inst_20460 = state_20462[2];
                        var state_20462__$1 = state_20462;
                        return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20462__$1, inst_20460);
                      } else {
                        if (state_val_20463 === 11) {
                          var inst_20451 = state_20462[2];
                          var inst_20452 = wilkerdev.util.reactive.throw_err.call(null, inst_20451);
                          var state_20462__$1 = function() {
                            var statearr_20472 = state_20462;
                            statearr_20472[9] = inst_20452;
                            return statearr_20472;
                          }();
                          var statearr_20473_20489 = state_20462__$1;
                          statearr_20473_20489[2] = null;
                          statearr_20473_20489[1] = 5;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_20463 === 9) {
                            var state_20462__$1 = state_20462;
                            var statearr_20474_20490 = state_20462__$1;
                            statearr_20474_20490[2] = null;
                            statearr_20474_20490[1] = 10;
                            return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                          } else {
                            if (state_val_20463 === 5) {
                              var state_20462__$1 = state_20462;
                              return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_20462__$1, 7, c);
                            } else {
                              if (state_val_20463 === 10) {
                                var inst_20456 = state_20462[2];
                                var state_20462__$1 = state_20462;
                                var statearr_20475_20491 = state_20462__$1;
                                statearr_20475_20491[2] = inst_20456;
                                statearr_20475_20491[1] = 6;
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_20463 === 8) {
                                  var inst_20447 = state_20462[7];
                                  var inst_20449 = wilkerdev.util.nodejs.mkdir.call(null, inst_20447);
                                  var state_20462__$1 = state_20462;
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_20462__$1, 11, inst_20449);
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          };
        }(c__5860__auto__, c);
        return function(switch__5845__auto__, c__5860__auto__, c) {
          return function() {
            var state_machine__5846__auto__ = null;
            var state_machine__5846__auto____0 = function() {
              var statearr_20479 = [null, null, null, null, null, null, null, null, null, null];
              statearr_20479[0] = state_machine__5846__auto__;
              statearr_20479[1] = 1;
              return statearr_20479;
            };
            var state_machine__5846__auto____1 = function(state_20462) {
              while (true) {
                var ret_value__5847__auto__ = function() {
                  try {
                    while (true) {
                      var result__5848__auto__ = switch__5845__auto__.call(null, state_20462);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__5848__auto__;
                      }
                      break;
                    }
                  } catch (e20480) {
                    if (e20480 instanceof Object) {
                      var ex__5849__auto__ = e20480;
                      var statearr_20481_20492 = state_20462;
                      statearr_20481_20492[5] = ex__5849__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20462);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e20480;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__20493 = state_20462;
                  state_20462 = G__20493;
                  continue;
                } else {
                  return ret_value__5847__auto__;
                }
                break;
              }
            };
            state_machine__5846__auto__ = function(state_20462) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5846__auto____0.call(this);
                case 1:
                  return state_machine__5846__auto____1.call(this, state_20462);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
            return state_machine__5846__auto__;
          }();
        }(switch__5845__auto__, c__5860__auto__, c);
      }();
      var state__5862__auto__ = function() {
        var statearr_20482 = f__5861__auto__.call(null);
        statearr_20482[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto__;
        return statearr_20482;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
    };
  }(c__5860__auto__, c));
  return c__5860__auto__;
};
wilkerdev.util.nodejs.match_extensions_QMARK_ = function match_extensions_QMARK_(path, extensions) {
  return extensions.call(null, cljs.core.subs.call(null, wilkerdev.util.nodejs.extname.call(null, path), 1));
};
wilkerdev.util.nodejs.read_dir_abs = function read_dir_abs(path) {
  var fullpath = cljs.core.partial.call(null, cljs.core.str, path, wilkerdev.util.nodejs.sep);
  var c__5860__auto__ = cljs.core.async.chan.call(null, 1);
  cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto__, fullpath) {
    return function() {
      var f__5861__auto__ = function() {
        var switch__5845__auto__ = function(c__5860__auto__, fullpath) {
          return function(state_20530) {
            var state_val_20531 = state_20530[1];
            if (state_val_20531 === 5) {
              var inst_20524 = state_20530[2];
              var inst_20525 = wilkerdev.util.reactive.throw_err.call(null, inst_20524);
              var inst_20526 = cljs.core.map.call(null, fullpath, inst_20525);
              var state_20530__$1 = state_20530;
              var statearr_20532_20542 = state_20530__$1;
              statearr_20532_20542[2] = inst_20526;
              cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20530__$1);
              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
            } else {
              if (state_val_20531 === 4) {
                var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_20530, 3, Error, null, 2);
                var inst_20522 = wilkerdev.util.nodejs.read_dir.call(null, path);
                var state_20530__$1 = state_20530;
                return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_20530__$1, 5, inst_20522);
              } else {
                if (state_val_20531 === 3) {
                  var inst_20518 = state_20530[2];
                  var state_20530__$1 = state_20530;
                  var statearr_20533_20543 = state_20530__$1;
                  statearr_20533_20543[2] = inst_20518;
                  cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20530__$1);
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_20531 === 2) {
                    var inst_20528 = state_20530[2];
                    var state_20530__$1 = state_20530;
                    return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20530__$1, inst_20528);
                  } else {
                    if (state_val_20531 === 1) {
                      var state_20530__$1 = state_20530;
                      var statearr_20534_20544 = state_20530__$1;
                      statearr_20534_20544[2] = null;
                      statearr_20534_20544[1] = 4;
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          };
        }(c__5860__auto__, fullpath);
        return function(switch__5845__auto__, c__5860__auto__, fullpath) {
          return function() {
            var state_machine__5846__auto__ = null;
            var state_machine__5846__auto____0 = function() {
              var statearr_20538 = [null, null, null, null, null, null, null];
              statearr_20538[0] = state_machine__5846__auto__;
              statearr_20538[1] = 1;
              return statearr_20538;
            };
            var state_machine__5846__auto____1 = function(state_20530) {
              while (true) {
                var ret_value__5847__auto__ = function() {
                  try {
                    while (true) {
                      var result__5848__auto__ = switch__5845__auto__.call(null, state_20530);
                      if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                        continue;
                      } else {
                        return result__5848__auto__;
                      }
                      break;
                    }
                  } catch (e20539) {
                    if (e20539 instanceof Object) {
                      var ex__5849__auto__ = e20539;
                      var statearr_20540_20545 = state_20530;
                      statearr_20540_20545[5] = ex__5849__auto__;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20530);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      throw e20539;
                    }
                  }
                }();
                if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                  var G__20546 = state_20530;
                  state_20530 = G__20546;
                  continue;
                } else {
                  return ret_value__5847__auto__;
                }
                break;
              }
            };
            state_machine__5846__auto__ = function(state_20530) {
              switch(arguments.length) {
                case 0:
                  return state_machine__5846__auto____0.call(this);
                case 1:
                  return state_machine__5846__auto____1.call(this, state_20530);
              }
              throw new Error("Invalid arity: " + arguments.length);
            };
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
            state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
            return state_machine__5846__auto__;
          }();
        }(switch__5845__auto__, c__5860__auto__, fullpath);
      }();
      var state__5862__auto__ = function() {
        var statearr_20541 = f__5861__auto__.call(null);
        statearr_20541[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto__;
        return statearr_20541;
      }();
      return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
    };
  }(c__5860__auto__, fullpath));
  return c__5860__auto__;
};
wilkerdev.util.nodejs.scan_paths = function() {
  var scan_paths = null;
  var scan_paths__1 = function(paths) {
    return scan_paths.call(null, paths, cljs.core.async.chan.call(null));
  };
  var scan_paths__2 = function(input_paths, out) {
    var c__5860__auto___20679 = cljs.core.async.chan.call(null, 1);
    cljs.core.async.impl.dispatch.run.call(null, function(c__5860__auto___20679) {
      return function() {
        var f__5861__auto__ = function() {
          var switch__5845__auto__ = function(c__5860__auto___20679) {
            return function(state_20652) {
              var state_val_20653 = state_20652[1];
              if (state_val_20653 === 7) {
                var inst_20643 = state_20652[2];
                var state_20652__$1 = function() {
                  var statearr_20654 = state_20652;
                  statearr_20654[7] = inst_20643;
                  return statearr_20654;
                }();
                var statearr_20655_20680 = state_20652__$1;
                statearr_20655_20680[2] = null;
                statearr_20655_20680[1] = 2;
                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
              } else {
                if (state_val_20653 === 1) {
                  var inst_20613 = cljs.core.vec.call(null, input_paths);
                  var inst_20614 = cljs.core.atom.call(null, inst_20613);
                  var state_20652__$1 = function() {
                    var statearr_20656 = state_20652;
                    statearr_20656[8] = inst_20614;
                    return statearr_20656;
                  }();
                  var statearr_20657_20681 = state_20652__$1;
                  statearr_20657_20681[2] = null;
                  statearr_20657_20681[1] = 2;
                  return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                } else {
                  if (state_val_20653 === 4) {
                    var state_20652__$1 = state_20652;
                    var statearr_20658_20682 = state_20652__$1;
                    statearr_20658_20682[2] = null;
                    statearr_20658_20682[1] = 10;
                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                  } else {
                    if (state_val_20653 === 15) {
                      var inst_20641 = state_20652[2];
                      var state_20652__$1 = state_20652;
                      var statearr_20659_20683 = state_20652__$1;
                      statearr_20659_20683[2] = inst_20641;
                      cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20652__$1);
                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                    } else {
                      if (state_val_20653 === 13) {
                        var inst_20625 = state_20652[9];
                        var inst_20634 = wilkerdev.util.nodejs.read_dir_abs.call(null, inst_20625);
                        var state_20652__$1 = state_20652;
                        return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_20652__$1, 16, inst_20634);
                      } else {
                        if (state_val_20653 === 6) {
                          var inst_20647 = state_20652[2];
                          var state_20652__$1 = state_20652;
                          var statearr_20660_20684 = state_20652__$1;
                          statearr_20660_20684[2] = inst_20647;
                          statearr_20660_20684[1] = 3;
                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                        } else {
                          if (state_val_20653 === 3) {
                            var inst_20649 = state_20652[2];
                            var inst_20650 = cljs.core.async.close_BANG_.call(null, out);
                            var state_20652__$1 = function() {
                              var statearr_20661 = state_20652;
                              statearr_20661[10] = inst_20649;
                              return statearr_20661;
                            }();
                            return cljs.core.async.impl.ioc_helpers.return_chan.call(null, state_20652__$1, inst_20650);
                          } else {
                            if (state_val_20653 === 12) {
                              var inst_20631 = state_20652[2];
                              var inst_20632 = wilkerdev.util.reactive.throw_err.call(null, inst_20631);
                              var state_20652__$1 = state_20652;
                              if (cljs.core.truth_(inst_20632)) {
                                var statearr_20662_20685 = state_20652__$1;
                                statearr_20662_20685[1] = 13;
                              } else {
                                var statearr_20663_20686 = state_20652__$1;
                                statearr_20663_20686[1] = 14;
                              }
                              return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                            } else {
                              if (state_val_20653 === 2) {
                                var inst_20614 = state_20652[8];
                                var inst_20616 = cljs.core.deref.call(null, inst_20614);
                                var state_20652__$1 = state_20652;
                                if (cljs.core.truth_(inst_20616)) {
                                  var statearr_20664_20687 = state_20652__$1;
                                  statearr_20664_20687[1] = 4;
                                } else {
                                  var statearr_20665_20688 = state_20652__$1;
                                  statearr_20665_20688[1] = 5;
                                }
                                return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                              } else {
                                if (state_val_20653 === 11) {
                                  var inst_20625 = state_20652[9];
                                  var inst_20628 = state_20652[2];
                                  var inst_20629 = wilkerdev.util.nodejs.is_dir_QMARK_.call(null, inst_20625);
                                  var state_20652__$1 = function() {
                                    var statearr_20666 = state_20652;
                                    statearr_20666[11] = inst_20628;
                                    return statearr_20666;
                                  }();
                                  return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null, state_20652__$1, 12, inst_20629);
                                } else {
                                  if (state_val_20653 === 9) {
                                    var inst_20620 = state_20652[2];
                                    var state_20652__$1 = state_20652;
                                    var statearr_20667_20689 = state_20652__$1;
                                    statearr_20667_20689[2] = inst_20620;
                                    cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20652__$1);
                                    return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                  } else {
                                    if (state_val_20653 === 5) {
                                      var state_20652__$1 = state_20652;
                                      var statearr_20668_20690 = state_20652__$1;
                                      statearr_20668_20690[2] = null;
                                      statearr_20668_20690[1] = 6;
                                      return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                    } else {
                                      if (state_val_20653 === 14) {
                                        var state_20652__$1 = state_20652;
                                        var statearr_20669_20691 = state_20652__$1;
                                        statearr_20669_20691[2] = null;
                                        statearr_20669_20691[1] = 15;
                                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                      } else {
                                        if (state_val_20653 === 16) {
                                          var inst_20614 = state_20652[8];
                                          var inst_20636 = state_20652[2];
                                          var inst_20637 = wilkerdev.util.reactive.throw_err.call(null, inst_20636);
                                          var inst_20638 = cljs.core.swap_BANG_.call(null, inst_20614, cljs.core.into, inst_20637);
                                          var state_20652__$1 = state_20652;
                                          var statearr_20670_20692 = state_20652__$1;
                                          statearr_20670_20692[2] = inst_20638;
                                          statearr_20670_20692[1] = 15;
                                          return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                                        } else {
                                          if (state_val_20653 === 10) {
                                            var inst_20625 = state_20652[9];
                                            var inst_20614 = state_20652[8];
                                            var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null, state_20652, 8, Error, null, 7);
                                            var inst_20624 = cljs.core.deref.call(null, inst_20614);
                                            var inst_20625__$1 = cljs.core.peek.call(null, inst_20624);
                                            var inst_20626 = cljs.core.swap_BANG_.call(null, inst_20614, cljs.core.next);
                                            var state_20652__$1 = function() {
                                              var statearr_20671 = state_20652;
                                              statearr_20671[12] = inst_20626;
                                              statearr_20671[9] = inst_20625__$1;
                                              return statearr_20671;
                                            }();
                                            return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_20652__$1, 11, out, inst_20625__$1);
                                          } else {
                                            if (state_val_20653 === 8) {
                                              var inst_20618 = state_20652[2];
                                              var state_20652__$1 = state_20652;
                                              return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null, state_20652__$1, 9, out, inst_20618);
                                            } else {
                                              return null;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            };
          }(c__5860__auto___20679);
          return function(switch__5845__auto__, c__5860__auto___20679) {
            return function() {
              var state_machine__5846__auto__ = null;
              var state_machine__5846__auto____0 = function() {
                var statearr_20675 = [null, null, null, null, null, null, null, null, null, null, null, null, null];
                statearr_20675[0] = state_machine__5846__auto__;
                statearr_20675[1] = 1;
                return statearr_20675;
              };
              var state_machine__5846__auto____1 = function(state_20652) {
                while (true) {
                  var ret_value__5847__auto__ = function() {
                    try {
                      while (true) {
                        var result__5848__auto__ = switch__5845__auto__.call(null, state_20652);
                        if (cljs.core.keyword_identical_QMARK_.call(null, result__5848__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                          continue;
                        } else {
                          return result__5848__auto__;
                        }
                        break;
                      }
                    } catch (e20676) {
                      if (e20676 instanceof Object) {
                        var ex__5849__auto__ = e20676;
                        var statearr_20677_20693 = state_20652;
                        statearr_20677_20693[5] = ex__5849__auto__;
                        cljs.core.async.impl.ioc_helpers.process_exception.call(null, state_20652);
                        return new cljs.core.Keyword(null, "recur", "recur", -437573268);
                      } else {
                        throw e20676;
                      }
                    }
                  }();
                  if (cljs.core.keyword_identical_QMARK_.call(null, ret_value__5847__auto__, new cljs.core.Keyword(null, "recur", "recur", -437573268))) {
                    var G__20694 = state_20652;
                    state_20652 = G__20694;
                    continue;
                  } else {
                    return ret_value__5847__auto__;
                  }
                  break;
                }
              };
              state_machine__5846__auto__ = function(state_20652) {
                switch(arguments.length) {
                  case 0:
                    return state_machine__5846__auto____0.call(this);
                  case 1:
                    return state_machine__5846__auto____1.call(this, state_20652);
                }
                throw new Error("Invalid arity: " + arguments.length);
              };
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$0 = state_machine__5846__auto____0;
              state_machine__5846__auto__.cljs$core$IFn$_invoke$arity$1 = state_machine__5846__auto____1;
              return state_machine__5846__auto__;
            }();
          }(switch__5845__auto__, c__5860__auto___20679);
        }();
        var state__5862__auto__ = function() {
          var statearr_20678 = f__5861__auto__.call(null);
          statearr_20678[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__5860__auto___20679;
          return statearr_20678;
        }();
        return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null, state__5862__auto__);
      };
    }(c__5860__auto___20679));
    return out;
  };
  scan_paths = function(input_paths, out) {
    switch(arguments.length) {
      case 1:
        return scan_paths__1.call(this, input_paths);
      case 2:
        return scan_paths__2.call(this, input_paths, out);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  scan_paths.cljs$core$IFn$_invoke$arity$1 = scan_paths__1;
  scan_paths.cljs$core$IFn$_invoke$arity$2 = scan_paths__2;
  return scan_paths;
}();
wilkerdev.util.nodejs.scandir = function() {
  var scandir = null;
  var scandir__1 = function(path) {
    return scandir.call(null, path, cljs.core.async.chan.call(null));
  };
  var scandir__2 = function(path, out) {
    return wilkerdev.util.nodejs.scan_paths.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [path], null), out);
  };
  scandir = function(path, out) {
    switch(arguments.length) {
      case 1:
        return scandir__1.call(this, path);
      case 2:
        return scandir__2.call(this, path, out);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  scandir.cljs$core$IFn$_invoke$arity$1 = scandir__1;
  scandir.cljs$core$IFn$_invoke$arity$2 = scandir__2;
  return scandir;
}();
wilkerdev.util.nodejs.stream__GT_buffer = function stream__GT_buffer(stream) {
  var c = cljs.core.async.chan.call(null);
  var buffers = [];
  var G__20698_20699 = stream;
  G__20698_20699.on("data", function(G__20698_20699, c, buffers) {
    return function(p1__20695_SHARP_) {
      return buffers.push(p1__20695_SHARP_);
    };
  }(G__20698_20699, c, buffers));
  G__20698_20699.on("error", function(G__20698_20699, c, buffers) {
    return function(p1__20696_SHARP_) {
      cljs.core.async.put_BANG_.call(null, c, wilkerdev.util.nodejs.make_js_error.call(null, p1__20696_SHARP_));
      return cljs.core.async.close_BANG_.call(null, c);
    };
  }(G__20698_20699, c, buffers));
  G__20698_20699.on("end", function(G__20698_20699, c, buffers) {
    return function() {
      cljs.core.async.put_BANG_.call(null, c, Buffer.concat(buffers));
      return cljs.core.async.close_BANG_.call(null, c);
    };
  }(G__20698_20699, c, buffers));
  return c;
};
wilkerdev.util.nodejs.create_gzip = function create_gzip() {
  return wilkerdev.util.nodejs.zlib.createGzip();
};
wilkerdev.util.nodejs.create_deflate_raw = function create_deflate_raw() {
  return wilkerdev.util.nodejs.zlib.DeflateRaw();
};
wilkerdev.util.nodejs.copy_file = function copy_file(source, target) {
  var input = wilkerdev.util.nodejs.create_read_stream.call(null, source);
  var output = wilkerdev.util.nodejs.create_write_stream.call(null, target);
  return input.pipe(output);
};
